/*
   Generated by EX4-TO-MQ4 decompiler V4.0.224.1 []
   Website: http://purebeam.biz
   E-mail : purebeam@gmail.com
*/
#property copyright "Copyright © 2008-2009, Sotnikov Denis (fxexpert@freemail.ru)"
#property link      "fxexpert@freemail.ru"

#include <WinUser32.mqh>

extern string OrderOptions = "--------   Orders options  --------";
extern double Lots = 0.0;
extern int LotsPercent = 10;
extern int MaxLotsPercent = 30;
double gd_100 = 0.0;
extern bool ResetMaxBalance = FALSE;
double gd_112 = 0.0;
extern string BalanceControlOptions = "------ BalanceControl options -----";
extern bool UseBalanceControl = TRUE;
extern bool SaveLotsValueAfterDD = FALSE;
extern int RestoreDepoMode = 1;
extern bool RestoreLostProfit = TRUE;
extern double DDSensitivity = 0.0;
extern int AverageTradeProfit = 3;
extern bool BlockTradesAfterDD = FALSE;
extern string TradeOptions = "--------   Trade  options  --------";
extern int SettingsNumber = 2;
extern int DDSettingsNumber = 0;

int g_str2int_176 = 1;
int gi_180 = 0;
int gi_184 = 0;
extern bool InvisibleStopLoss = TRUE;
bool gi_192 = TRUE;
bool g_str2int_196 = TRUE;
int g_str2int_200 = 0;
int g_str2int_204 = 20;
//string = "--------";
int gi_216 = 0;
bool g_str2int_220 = FALSE;
bool g_str2int_224 = FALSE;
int g_str2int_228 = 300;
bool g_str2int_232 = TRUE;
int g_str2int_236 = 5;
int gi_240 = 0;
int gi_244 = 0;
bool g_str2int_248 = FALSE;
int g_str2int_252 = 99;
int gi_256 = 0;
bool g_str2int_260 = FALSE;
bool g_str2int_264 = TRUE;
//string  = "--------";
bool g_str2int_276 = FALSE;
int gi_280 = 0;
bool g_str2int_284 = FALSE;
int gi_288 = 0;
bool g_str2int_292 = FALSE;
bool g_str2int_296 = TRUE;
//string  = "--------";
double gd_308 = 0.0;
int g_str2int_316 = 0;
int g_str2int_320 = 0;
//string  = "--------";
double gd_332 = 0.0;
int g_str2int_340 = 0;
double gd_344 = 0.0;
int g_str2int_352 = 0;
int g_str2int_356 = 0;
int g_str2int_360 = 0;
//string  = "--------";
bool g_str2int_372 = TRUE;
int g_str2int_376 = 0;
int g_str2int_380 = 0;
int g_str2int_384 = 0;
int g_str2int_388 = 0;
int g_str2int_392 = 0;
int gi_396 = 0;
int gi_400 = 0;
int gi_404 = 0;
int gi_408 = 0;
int g_str2int_412 = 0;
bool g_str2int_416 = FALSE;
bool g_str2int_420 = FALSE;
bool g_str2int_424 = FALSE;
bool g_str2int_428 = FALSE;
bool g_str2int_432 = FALSE;
bool g_str2int_436 = FALSE;
//string  = "--------";
int g_str2int_448 = 0;
double gd_452 = 0.0;
int g_str2int_460 = 0;
int g_str2int_464 = 0;
int g_str2int_468 = 0;
//string  = "--------";
int g_str2int_480 = 0;
double gd_484 = 0.0;
int g_str2int_492 = 0;
int g_str2int_496 = 0;
int g_str2int_500 = 0;
//string = "--------";
double gd_512 = 0.0;
int g_str2int_520 = 0;
int g_str2int_524 = 0;
double gd_528 = 0.0;
int g_str2int_536 = 0;
int g_str2int_540 = 0;
//string = "--------";
bool g_str2int_552 = FALSE;
int g_str2int_556 = 60;
int gi_560 = 0;
int g_str2int_564 = 100;
int gi_568 = 0;
int g_str2int_572 = 150;
int gi_576 = 0;
int g_str2int_580 = 200;
int gi_584 = 0;
int g_str2int_588 = 250;
int gi_592 = 0;
//string = "--------";
bool g_str2int_604 = FALSE;
int g_timeframe_608 = 0;
int g_period_612 = 0;
int g_applied_price_616 = PRICE_CLOSE;
int g_timeframe_620 = 0;
int g_period_624 = 0;
int g_applied_price_628 = PRICE_CLOSE;
int gi_632 = 0;
int g_timeframe_636 = 0;
int g_period_640 = 0;
int g_applied_price_644 = PRICE_CLOSE;
int g_period_648 = 0;
double gd_652 = 0.0;
int g_ma_method_660 = MODE_SMA;
int g_applied_price_664 = PRICE_CLOSE;
int gi_668 = 0;
int g_str2int_672 = 0;
double g_str2dbl_676 = 0.0;
double g_str2dbl_684 = 0.0;
double g_str2dbl_692 = 0.0;
double g_str2dbl_700 = 0.0;
int g_str2int_708 = 0;
int g_str2int_712 = 0;
//string  = "--------";
bool g_str2int_724 = FALSE;
bool gi_728 = FALSE;
double gd_732 = 0.0;
double gd_740 = 0.0;
double gd_748 = 0.0;
//extern string TimeOptions = "--------   Time   options  --------";
extern bool UseAutoTimeSettings = TRUE;
extern int TimeZone = 0;
extern int SWChangeMode = 0;
bool gi_776 = FALSE;
extern int TimeRiskFactor = 5;
int gi_784 = 0;
int gi_788 = 0;
extern bool BlockWeekBegin = TRUE;
extern bool BlockWeekEnd = TRUE;
bool gi_800 = FALSE;
int gi_804 = 0;
int gi_808 = 0;
extern bool TradeHourOptimization = FALSE;
extern int OpenHourAM = 0;
extern int CloseHourAM = 12;
extern int OpenHourPM = 12;
extern int CloseHourPM = 24;
int g_str2int_832 = -1;
int g_str2int_836 = -1;
bool gi_840 = TRUE;
bool gi_844 = FALSE;
//string= "--------Transmite options--------";
bool gi_856 = FALSE;
bool gi_860 = FALSE;
bool gi_864 = FALSE;
int gi_868 = 10;
bool gi_872 = TRUE;
int gi_876 = 10;
bool gi_880 = FALSE;
//string  = "--------   News   options  --------";
bool gi_892 = FALSE;
int gi_896 = 5;
int gi_900 = 30;
int gi_904 = 60;
bool gi_908 = TRUE;
bool gi_912 = TRUE;
bool gi_916 = TRUE;
bool gi_920 = TRUE;
bool gi_924 = TRUE;
bool gi_928 = TRUE;
bool gi_932 = TRUE;
bool gi_936 = TRUE;
bool gi_940 = TRUE;
extern string OtherOptions = "--------   Other  options  --------";
extern int PersonalMagicNumber = 0;
bool gi_956 = TRUE;
extern bool ShowTimes = TRUE;
extern bool ShowInformation = TRUE;
bool gi_968 = FALSE;
bool gi_972 = FALSE;
extern bool ShowSpreadInfo = FALSE;
bool gi_980 = FALSE;
extern int InformationStringNumber = 20;
bool gi_988 = TRUE;
bool gi_992 = TRUE;
bool gi_996 = FALSE;
bool gi_1000 = FALSE;
extern bool UseMailReport = FALSE;
extern int MailReportHourGMT = 6;
bool gi_1012 = FALSE;
bool gi_1016 = TRUE;
bool gi_1020 = FALSE;
double gd_1024 = 5.0;
bool gi_1032 = TRUE;
extern string Language = "rus";
extern string AdvancedOptions = "-------- Advanced options  --------";
extern bool CheckFreeMargin = FALSE;
extern bool CheckStopOutLevel = FALSE;
extern bool IncreaseFreezeLevel = FALSE;
extern bool CheckRateBeforeOpen = TRUE;
extern bool CheckRateBeforeClose = TRUE;
extern int OrderOpenSlippage = 2;
extern int OrderCloseSlippage = 2;
extern bool CheckRepeatClosePrice = TRUE;
extern bool UseSlippageCorrection = FALSE;
extern bool UseSpreadCorrection = FALSE;
bool gi_1092 = FALSE;
extern bool BlockAfterHandClose = TRUE;
extern int MaxSpreadValue = 0;
int gi_1104 = 2;
bool gi_1108 = TRUE;
int gi_1112;
int gi_1116;
bool gi_1120;
bool gi_1124;
bool gi_1128;
bool gi_1132;
int gi_1136;
int gi_1140;
int gi_1144;
int g_bars_1152;
int g_hour_1164;
int g_bars_1168;
int g_ticket_1172;
int g_ticket_1176;
int gi_1184;
bool g_ticket_1188;
bool g_bars_1192;
int g_magic_1196;
int g_count_1200;
int g_count_1204;
int gi_1208;
int g_count_1212;
int g_minute_1216;
int gi_1220;
int gi_1224;
bool gi_1228;
int gi_1232;
int gi_1236;
int gi_1260 = 10;
int gi_1264;
int g_day_of_week_1268;
int gi_1280;
datetime g_time_1284;
int gi_1288;
int gi_1292;
int gi_1296;
int gi_1300;
int gi_1304;
int g_hour_1308;
int g_day_of_week_1312;
int gi_1316;
int g_month_1320;
int g_year_1324;
int g_count_1328;
int gi_1332;
int gi_1336;
int g_count_1340;
bool gi_1344;
int gi_1348;
int gi_1352;
int gi_1356;
bool g_bars_1360;
int gia_1364[5][10];
int gia_1368[500][10];
int g_str2int_1372;
int g_str2int_1376;
int g_str2int_1380;
double gd_1384;
double gd_1392;
double gd_1400;
double gd_1408;
double gd_1416;
double gd_1424;
double gd_1432;
double g_price_1440;
double g_ord_profit_1456;
double g_global_var_1464;
double g_price_1472;
double gda_1504[1][6];
double gda_1508[1][8];
double gda_1512[30];
bool gi_1516;
bool gi_1520;
bool gi_1532;
bool gi_1536;
bool gi_1540;
bool gi_1544;
bool gi_1548;
bool gi_1552;
bool gi_1560;
bool gi_1564;
bool gi_1572;
bool gi_1576;
bool gi_1580;
bool gi_1584;
bool gi_1592;
bool gi_1600;
bool gi_1612;
bool gi_1616;
bool gi_1620;
bool gi_1624;
bool gi_1628;
bool gi_1632;
bool gi_1636;
bool gi_1648;
bool gi_1652;
bool gi_1660;
bool gi_1664;
int gi_1668;
int gi_1672;
int g_datetime_1676;
datetime g_time_1680;
int gi_1684;
int gi_1688;
int gi_1692;
int gi_1696;
int gi_1700;
string gs_1704;
string gs_1712;
string gs_1736;
string gs_1744;
string gs_1752;
string gs_1760;
string gsa_1768[7];
string gsa_1772[50];
string gsa_1776[150][21];
string gsa_1780[150][21];
string gsa_1784[4300];
string gsa_1788[20];
string gs_1792;
string gs_1800;
string gs_1808;
string gs_1824;
string gs_1832;
string g_var_name_1840;
string g_var_name_1848;
string g_var_name_1856;
string g_var_name_1864;
string g_var_name_1872;
string gs_1880;
string gs_1888;
string gs_1896;
string gs_1904;

int init() {
   Comment("");
   InitVariables();
   ClearBuffer("ReceiveBuffer");
   ClearBuffer("CommandBuffer");
   ClearBuffer("VariablesBuffer");
   ClearBuffer("InformationBuffer");
   ClearBuffer("LogFileBuffer");
   ClearBuffer("ErrorArray");
   ClearBuffer("LoadSettingsArray");
   ClearBuffer("SettingsArray");
   gi_1344 = MathRound(MarketInfo(Symbol(), MODE_SPREAD));
   g_time_1680 = Time[0];
   if (gi_1108) HideTestIndicators(TRUE);
   if (!g_str2int_372) {
      g_str2int_380 = g_str2int_376;
      g_str2int_388 = g_str2int_376;
      g_str2int_392 = g_str2int_376;
   }
   CheckPointDifference();
   if (IsOptimization() || IsTesting()) {
      gi_988 = FALSE;
      if (!IsVisualMode()) {
         gi_956 = FALSE;
         gi_992 = FALSE;
      }
      if (TradeHourOptimization) {
         if (OpenHourAM > 23) OpenHourAM = 23;
         CloseHourAM = OpenHourAM + 1;
         OpenHourPM = 24;
         CloseHourPM = 24;
      }
   } else TradeHourOptimization = FALSE;
      
   CheckMarketInfo();
   SetGlobalVariableNames();
   gi_1648 = CheckLastOptTime();
   InitErrorArray();
   InitTimeArray();
   LoadSettings();
   SetMaxLots();
   SetSettings(SettingsNumber, 1);
   SetTimeSettings(gi_784);
   CorrectGMTTime();
   StartRulls();
   
   if (g_str2int_248) {
      if (LotsPercent > 30 && Lots == 0.0) {
         g_str2int_248 = FALSE;
         Comments(9, "Init()", "Íåâîçìîæíî óñòàíîâèòü ContinueAfterClose: LotsPercent>30", "Unable to set ContinueAfterClose: LotsPercent>30");
      }
   }
   MakeInitString();
   MakeTimeString();
   Comments(9, "Init()", "Èíèöèàëèçàöèÿ çàâåðøåíà.", "Initialization completed.");
   if (gi_860) SaveFileOrder(99, 0, 0, 0, 0, 0);
   Comments(1, "", "CurrentOrderProfitPoint = " + DoubleToStr(gd_1424, 0), "");
   return (0);
}

int start() {
   int li_0;
   gi_1288 = GetTickCount();
   MainProgram();
   if (gi_1012) {
      li_0 = GetTickCount() - gi_1288;
      if (gi_1332 > li_0) gi_1332 = li_0;
      if (gi_1336 < li_0) gi_1336 = li_0;
      g_count_1340++;
      gd_1384 += 1.0 * li_0;
      if (gi_956) Comments(2, "", "SysSpeed:  min=" + gi_1332 + "  average=" + DoubleToStr(gd_1384 / (1.0 * g_count_1340), 0) + "  max=" + gi_1336 + "   current=" + li_0, "");
      else Comment("SysSpeed:  min=" + gi_1332 + "  average=" + DoubleToStr(gd_1384 / (1.0 * g_count_1340), 0) + "  max=" + gi_1336 + "   current=" + li_0);
   }
   SaveCommentsFile(" ");
   return (0);
}

int MainProgram() {
   bool li_ret_0 = FALSE;
   bool li_4 = FALSE;
   if (!StartRulls()) return (0);
   if (gi_856) {
      if (ReadFileOrder()) CheckReceiveBuffer();
      CheckCommandBuffer();
      return (0);
   }
   if (isOrderSell() && !TimeCurrentBar(g_str2int_420)) {
      isRSItoOpen(99);
      li_4 = TRUE;
      if (isCloseSellOrder()) {
         if (isTimeFiltertoClose(1)) {
            if (CloseSellOrder()) {
               gi_1612 = FALSE;
               li_4 = FALSE;
               if (!g_str2int_248) return (li_ret_0);
            }
         }
      }
   }
   if (isOrderBuy() && !TimeCurrentBar(g_str2int_420)) {
      isRSItoOpen(99);
      li_4 = TRUE;
      if (isCloseBuyOrder()) {
         if (isTimeFiltertoClose(0)) {
            if (CloseBuyOrder()) {
               gi_1612 = FALSE;
               li_4 = FALSE;
               if (!g_str2int_248) return (li_ret_0);
            }
         }
      }
   }
   gi_1612 = FALSE;
   if (li_4 && g_str2int_296) return (li_ret_0);
   if (isOpenBuyOrder() || isErrorOpenOrder(0)) {
      if (isTimeFiltertoOpen(0)) SendBuyOrder(gi_180, gi_184);
      return (li_ret_0);
   }
   if (isOpenSellOrder() || isErrorOpenOrder(1)) {
      if (isTimeFiltertoOpen(1)) SendSellOrder(gi_180, gi_184);
      return (li_ret_0);
   }
   return (li_ret_0);
}

int isErrorOpenOrder(int ai_0) {
   double ld_8;
   bool li_ret_4 = FALSE;
   if (g_str2int_232) {
      if (gi_1516 && ai_0 == 1) {
         ld_8 = MathRound((g_price_1472 - Ask) / Point);
         if (Bars - g_bars_1168 > g_str2int_236) {
            gi_1516 = FALSE;
            g_count_1212 = 0;
            Comments(9, "isErrorOpenOrder()", "Íå óäàëîñü ïîâòîðèòü îòêðûòèå îðäåðà Sell, èñòåê ëèìèò áàðîâ îæèäàíèÿ", "Unable to reopen Sell order, bars are over");
         } else {
            if (ld_8 >= gi_288 - gi_240) {
               gi_1516 = FALSE;
               g_count_1212 = 0;
               Comments(9, "isErrorOpenOrder()", "Íå óäàëîñü ïîâòîðèòü îòêðûòèå îðäåðà Sell, ïðîôèò îòðàáîòàí (" + DoubleToStr(g_price_1472, Digits) + "/" + DoubleToStr(Bid, Digits) +
                  ")", "Unable to reopen Sell order, profit worked by (" + DoubleToStr(g_price_1472, Digits) + "/" + DoubleToStr(Bid, Digits) + ")");
            } else {
               if (Bid >= g_price_1472 + gi_240 * Point && !gi_1616) {
                  li_ret_4 = TRUE;
                  g_count_1212++;
                  Comments(9, "isErrorOpenOrder()", "Ïîâòîð îòêðûòèÿ îðäåðà Sell (" + DoubleToStr(Bid, Digits) + "), ïîïûòêà " + ((g_count_1212 + 1)), "Try to reopen Sell (" + DoubleToStr(Bid, Digits) +
                     "), trial " + ((g_count_1212 + 1)));
               }
            }
         }
      }
      if (gi_1520 && ai_0 == 0) {
         ld_8 = MathRound((Bid - g_price_1472) / Point);
         if (Bars - g_bars_1168 > g_str2int_236) {
            gi_1520 = FALSE;
            g_count_1212 = 0;
            Comments(9, "isErrorOpenOrder()", "Íå óäàëîñü ïîâòîðèòü îòêðûòèå îðäåðà Buy, èñòåê ëèìèò áàðîâ îæèäàíèÿ", "Unable to reopen Buy order, bars are over");
         } else {
            if (ld_8 >= gi_288 - gi_240) {
               gi_1520 = FALSE;
               g_count_1212 = 0;
               Comments(9, "isErrorOpenOrder()", "Íå óäàëîñü ïîâòîðèòü îòêðûòèå îðäåðà Buy, ïðîôèò îòðàáîòàí (" + DoubleToStr(g_price_1472, Digits) + "/" + DoubleToStr(Ask, Digits) +
                  ")", "Unable to reopen Buy order, profit worked by (" + DoubleToStr(g_price_1472, Digits) + "/" + DoubleToStr(Ask, Digits) + ")");
            } else {
               if (Ask <= g_price_1472 - gi_240 * Point && !gi_1616) {
                  li_ret_4 = TRUE;
                  g_count_1212++;
                  Comments(9, "isErrorOpenOrder()", "Ïîâòîð îòêðûòèÿ îðäåðà Buy (" + DoubleToStr(Ask, Digits) + "), ïîïûòêà " + ((g_count_1212 + 1)), "Try to reopen Buy (" + DoubleToStr(Ask, Digits) +
                     "), trial " + ((g_count_1212 + 1)));
               }
            }
         }
      }
   }
   return (li_ret_4);
}

bool isTimeFiltertoClose(int ai_0) {
   double l_price_8;
   bool li_ret_4 = TRUE;
   if (!IsOptimization() && !IsTesting() && !IsVisualMode() && g_str2int_224) {
      if (ai_0 == 1) {
         l_price_8 = Ask;
         Sleep(g_str2int_228);
         if (Ask > l_price_8) li_ret_4 = FALSE;
      }
      if (ai_0 == 0) {
         l_price_8 = Bid;
         Sleep(g_str2int_228);
         if (Bid < l_price_8) li_ret_4 = FALSE;
      }
   }
   if (!li_ret_4) Comments(9, "isTimeFiltertoClose()", "Îøèáêà çàêðûòèÿ îðäåðà: èçìåíèëàñü öåíà", "Error to close order, price change");
   return (li_ret_4);
}

bool isTimeFiltertoOpen(int ai_0) {
   double l_bid_8;
   bool li_ret_4 = TRUE;
   if (!IsOptimization() && !IsTesting() && !IsVisualMode() && g_str2int_220) {
      if (ai_0 == 1) {
         l_bid_8 = Bid;
         Sleep(g_str2int_228);
         if (Bid < l_bid_8) li_ret_4 = FALSE;
      }
      if (ai_0 == 0) {
         l_bid_8 = Bid;
         Sleep(g_str2int_228);
         if (Ask > l_bid_8) li_ret_4 = FALSE;
      }
   }
   if (!li_ret_4) Comments(9, "isTimeFiltertoOpen()", "Îøèáêà îòêðûòèÿ îðäåðà: èçìåíèëàñü öåíà", "Error to open order, price change");
   return (li_ret_4);
}

bool isCloseSellOrder() {
   bool li_ret_0 = FALSE;
   if ((g_str2int_276 && isChanneltoClose(1, g_str2int_388, g_str2int_432, gi_404, "MinProfit") && isProfitValuetoClose(gi_280 - gi_1112 + gi_1140, "MinProfit")) || (!g_str2int_276 &&
      isChanneltoClose(1, g_str2int_388, g_str2int_432, gi_404, "ChannelClose")) || (isChanneltoClose(1, g_str2int_392, g_str2int_436, gi_408, "ChannelOff") && g_str2int_392 != 0) ||
      (g_str2int_284 && isProfitValuetoClose(TimeProfit(), "OptProfit")) || isErrorCloseOrder(1) || isInvisibleStopLosstoClose(1)) li_ret_0 = TRUE;
   return (li_ret_0);
}

bool isCloseBuyOrder() {
   bool li_ret_0 = FALSE;
   if ((g_str2int_276 && isChanneltoClose(0, g_str2int_388, g_str2int_432, gi_404, "MinProfit") && isProfitValuetoClose(gi_280 - gi_1112 + gi_1140, "MinProfit")) || (!g_str2int_276 &&
      isChanneltoClose(0, g_str2int_388, g_str2int_432, gi_404, "ChannelClose")) || (isChanneltoClose(0, g_str2int_392, g_str2int_436, gi_408, "ChannelOff") && g_str2int_392 != 0) ||
      (g_str2int_284 && isProfitValuetoClose(TimeProfit(), "OptProfit")) || isErrorCloseOrder(0) || isInvisibleStopLosstoClose(0)) li_ret_0 = TRUE;
   return (li_ret_0);
}

int isBarsHeighttoOpen(int ai_0, int ai_4, double ad_8) {
   double l_high_20;
   double l_low_28;
   bool li_ret_16 = FALSE;
   if (ad_8 != 0.0) {
      l_high_20 = High[iHighest(NULL, 0, MODE_HIGH, ai_4, 0)];
      l_low_28 = Low[iLowest(NULL, 0, MODE_LOW, ai_4, 0)];
      if (ai_0 == 1 && Close[0] >= l_high_20 && (l_high_20 - l_low_28) / Point >= ad_8) li_ret_16 = TRUE;
      if (ai_0 == 0 && Close[0] <= l_low_28 && (l_high_20 - l_low_28) / Point >= ad_8) li_ret_16 = TRUE;
   }
   return (li_ret_16);
}

int isMADistancetoOpen(int ai_0, int a_ma_method_4, int a_period_8, int a_applied_price_12, double a_pips_16, int ai_24) {
   double ld_32;
   bool li_ret_28 = TRUE;
   if (a_period_8 != 0) {
      ld_32 = iMA(NULL, 0, a_period_8, 0, a_ma_method_4, a_applied_price_12, 1);
      if (ai_24 == 1) ld_32 = MathRound(ld_32 / Point) * Point;
      if (ai_24 == 2 && ai_0 == 1) ld_32 = MathFloor(ld_32 / Point) * Point;
      if (ai_24 == 2 && ai_0 == 0) ld_32 = MathCeil(ld_32 / Point) * Point;
      if (ai_24 == 3 && ai_0 == 0) ld_32 = MathFloor(ld_32 / Point) * Point;
      if (ai_24 == 3 && ai_0 == 1) ld_32 = MathCeil(ld_32 / Point) * Point;
      if (MathAbs(Bid - ld_32) <= a_pips_16 * Point) li_ret_28 = FALSE;
   }
   return (li_ret_28);
}

int isOpenSellOrder() {
   bool li_ret_0 = FALSE;
   if (!TimeCurrentBar(g_str2int_416) && !TimeCurrentBar(g_str2int_424) && !gi_1616 && !gi_1560 && g_ticket_1176 == 0 && !gi_1516 && !gi_1572 && !gi_1624 && !gi_1620 &&
      !gi_1628 && !gi_1632 && !gi_1664 && !gi_1660) {
      if (!gi_1636) {
         if ((g_str2int_176 == 0 || g_str2int_176 == 1 && isMADistancetoOpen(1, g_str2int_460, g_str2int_448, g_str2int_464, gd_452, g_str2int_468) && isChanneltoOpen(1, g_str2int_380, g_str2int_428, gi_396)) ||
            (g_str2int_176 == 0 || g_str2int_176 == 2 && isMADistancetoOpen(1, g_str2int_536, g_str2int_524, g_str2int_540, gd_528, g_str2int_468) && isChanneltoOpen(1, g_str2int_384, g_str2int_428, gi_400)) ||
            (g_str2int_176 == 0 || g_str2int_176 == 3 && isBarsHeighttoOpen(1, g_str2int_520, gd_512)) || (g_str2int_176 == 4 && isRSItoOpen(1))) li_ret_0 = TRUE;
      }
   }
   return (li_ret_0);
}

int isOpenBuyOrder() {
   bool li_ret_0 = FALSE;
   if (!TimeCurrentBar(g_str2int_416) && !TimeCurrentBar(g_str2int_424) && !gi_1616 && !gi_1560 && g_ticket_1176 == 0 && !gi_1520 && !gi_1572 && !gi_1624 && !gi_1620 &&
      !gi_1628 && !gi_1632 && !gi_1664 && !gi_1660) {
      if (!gi_1636) {
         if ((g_str2int_176 == 0 || g_str2int_176 == 1 && isMADistancetoOpen(0, g_str2int_460, g_str2int_448, g_str2int_464, gd_452, g_str2int_468) && isChanneltoOpen(0, g_str2int_380, g_str2int_428, gi_396)) ||
            (g_str2int_176 == 0 || g_str2int_176 == 2 && isMADistancetoOpen(0, g_str2int_536, g_str2int_524, g_str2int_540, gd_528, g_str2int_468) && isChanneltoOpen(0, g_str2int_384, g_str2int_428, gi_400)) ||
            (g_str2int_176 == 0 || g_str2int_176 == 3 && isBarsHeighttoOpen(0, g_str2int_520, gd_512)) || (g_str2int_176 == 4 && isRSItoOpen(0))) li_ret_0 = TRUE;
      }
   }
   return (li_ret_0);
}

int isSpreadtoTrade() {
   bool li_ret_0 = FALSE;
   int li_4 = MathRound(MarketInfo(Symbol(), MODE_SPREAD));
   if (gi_1344 != li_4 && ShowSpreadInfo) {
      Comments(9, "isSpreadtoTrade()", "Èçìåíèëîñü çíà÷åíèå ñïðåäà ñ " + gi_1344 + " íà " + li_4, "Spread value change from " + gi_1344 + " to " + li_4);
      gi_1344 = li_4;
   }
   if ((!UseSpreadCorrection && li_4 <= MaxSpreadValue) || (UseSpreadCorrection && li_4 <= MaxSpreadValue)) li_ret_0 = TRUE;
   return (li_ret_0);
}

int MaxChannelLimit(double ad_0, int ai_8, int ai_12) {
   double ld_20;
   double ld_28;
   double ld_36;
   int li_ret_16 = 0;
   int li_48 = 0;
   int li_52 = 0;
   int li_56 = 0;
   if (ad_0 != 0.0) {
      ld_36 = MathAbs(ad_0);
      ld_20 = High[iHighest(NULL, 0, MODE_HIGH, ai_8, ai_12)] / Point;
      ld_28 = Low[iLowest(NULL, 0, MODE_LOW, ai_8, ai_12)] / Point;
      if (ad_0 > 0.0) {
         if (ld_20 - ld_28 - ld_36 > 0.0) {
            if (IsTesting() || IsOptimization() || !gi_972 || !gi_956) li_ret_16 = 1;
            for (int li_44 = 1; li_44 <= ai_8; li_44++) {
               if (li_ret_16 != 0) break;
               li_56 = li_44;
               if (High[li_44] > High[li_48]) li_48 = li_44;
               if (Low[li_44] < Low[li_52]) li_52 = li_44;
               if ((High[li_48] - Low[li_52]) / Point - ld_36 > 0.0) li_ret_16 = (ai_8 - li_56) * Period();
            }
         }
      }
      if (ad_0 < 0.0)
         if (ld_20 - ld_28 - ld_36 < 0.0) li_ret_16 = 1;
   }
   return (li_ret_16);
}

bool MaxVolumeLimit(double ad_0, int ai_8, int ai_12) {
   bool l_bool_16 = FALSE;
   bool li_20 = FALSE;
   if (ad_0 != 0.0) {
      if (ad_0 < 0.0) li_20 = TRUE;
      ad_0 = MathAbs(ad_0);
      if (g_bars_1192 != Bars) {
         gd_1392 = 0.0;
         for (int li_24 = ai_8 + ai_12; li_24 > ai_12; li_24--) gd_1392 += Volume[li_24];
         g_bars_1192 = Bars;
         gd_1392 /= ai_8;
      }
      if (ad_0 < gd_1392) l_bool_16 = TRUE;
   }
   if (li_20) l_bool_16 = !l_bool_16;
   return (l_bool_16);
}

bool TimeCurrentBar(int ai_0) {
   bool li_ret_4 = FALSE;
   if (ai_0 && Time[0] == g_time_1680) li_ret_4 = TRUE;
   return (li_ret_4);
}

int isOrderSell() {
   double l_price_16;
   double l_pips_24;
   bool li_ret_0 = FALSE;
   int l_pos_4 = 0;
   int l_ord_total_12 = OrdersTotal();
   for (l_pos_4 = 0; l_pos_4 < l_ord_total_12; l_pos_4++) {
      OrderSelect(l_pos_4, SELECT_BY_POS, MODE_TRADES);
      if (OrderSymbol() == Symbol() && OrderType() == OP_SELL) {
         if (!gi_860 && OrderMagicNumber() != g_magic_1196) continue;
         g_ord_profit_1456 = OrderProfit();
         gd_1424 = MathRound((OrderOpenPrice() - Ask) / Point);
         g_hour_1164 = TimeHour(OrderOpenTime() + 7200 - 3600 * (TimeZone + gi_1356));
         g_datetime_1676 = OrderOpenTime();
         g_ticket_1176 = OrderTicket();
         gi_1184 = TimeCurrent() - g_datetime_1676;
         if (g_str2int_196) {
            l_price_16 = 1.0 * gi_180;
            l_pips_24 = TrailingTP();
            if (InvisibleStopLoss) l_price_16 = 0.0;
            if ((l_price_16 != 0.0 && OrderStopLoss() == 0.0) || l_pips_24 != 0.0 && !gi_860) {
               if (l_price_16 != 0.0) {
                  if (l_price_16 < MarketInfo(Symbol(), MODE_STOPLEVEL)) l_price_16 = MarketInfo(Symbol(), MODE_STOPLEVEL);
                  l_price_16 = NormalizeDouble(OrderOpenPrice() + l_price_16 * Point, Digits);
               }
               if (l_pips_24 != 0.0) l_pips_24 = NormalizeDouble(OrderOpenPrice() - l_pips_24 * Point, Digits);
               if (IsTradeAllowed()) {
                  if (!OrderModify(OrderTicket(), OrderOpenPrice(), l_price_16, l_pips_24, 0, Red)) {
                     Comments(9, "isOrderSell()", "Íåâîçìîæíî óñòàíîâèòü SL èëè TP: " + PrintError(GetLastError()) + " : Bid=" + DoubleToStr(Bid, Digits) + ", SL=" + DoubleToStr(l_price_16, Digits) +
                        "(" + DoubleToStr(OrderStopLoss(), Digits) + ")" + ", TP=" + DoubleToStr(l_pips_24, Digits) + "(" + DoubleToStr(OrderTakeProfit(), Digits) + ")", "Unable to set SL or TP: " + PrintError(GetLastError()) + " : Bid=" + DoubleToStr(Bid, Digits) + ", SL=" + DoubleToStr(l_price_16, Digits) + "(" + DoubleToStr(OrderStopLoss(), Digits) + ")" + ", TP=" + DoubleToStr(l_pips_24, Digits) + "(" + DoubleToStr(OrderTakeProfit(), Digits) + ")");
                  }
               } else
                  if (!gi_1020) Comments(9, "isOrderSell()", "Íåâîçìîæíî óñòàíîâèòü SL èëè TP: òîðãîâûé ïîòîê çàíÿò", "Unable to set SL or TP: Trade context busy");
            }
         }
         li_ret_0 = TRUE;
         break;
      }
   }
   gi_1548 = li_ret_0;
   return (li_ret_0);
}

int isOrderBuy() {
   double l_price_16;
   double l_pips_24;
   bool li_ret_0 = FALSE;
   int l_pos_4 = 0;
   int l_ord_total_12 = OrdersTotal();
   for (l_pos_4 = 0; l_pos_4 < l_ord_total_12; l_pos_4++) {
      OrderSelect(l_pos_4, SELECT_BY_POS, MODE_TRADES);
      if (OrderSymbol() == Symbol() && OrderType() == OP_BUY) {
         if (!gi_860 && OrderMagicNumber() != g_magic_1196) continue;
         g_ord_profit_1456 = OrderProfit();
         gd_1424 = MathRound((Bid - OrderOpenPrice()) / Point);
         g_hour_1164 = TimeHour(OrderOpenTime() + 7200 - 3600 * (TimeZone + gi_1356));
         g_datetime_1676 = OrderOpenTime();
         g_ticket_1176 = OrderTicket();
         gi_1184 = TimeCurrent() - g_datetime_1676;
         if (g_str2int_196) {
            l_price_16 = 1.0 * gi_180;
            l_pips_24 = TrailingTP();
            if (InvisibleStopLoss) l_price_16 = 0.0;
            if ((l_price_16 != 0.0 && OrderStopLoss() == 0.0) || l_pips_24 != 0.0 && !gi_860) {
               if (l_price_16 != 0.0) {
                  if (l_price_16 < MarketInfo(Symbol(), MODE_STOPLEVEL)) l_price_16 = MarketInfo(Symbol(), MODE_STOPLEVEL);
                  l_price_16 = NormalizeDouble(OrderOpenPrice() - l_price_16 * Point, Digits);
               }
               if (l_pips_24 != 0.0) l_pips_24 = NormalizeDouble(OrderOpenPrice() + l_pips_24 * Point, Digits);
               if (IsTradeAllowed()) {
                  if (!OrderModify(OrderTicket(), OrderOpenPrice(), l_price_16, l_pips_24, 0, Red)) {
                     Comments(9, "isOrderBuy()", "Íåâîçìîæíî óñòàíîâèòü SL èëè TP: " + PrintError(GetLastError()) + " : Ask=" + DoubleToStr(Ask, Digits) + ", SL=" + DoubleToStr(l_price_16, Digits) +
                        "(" + DoubleToStr(OrderStopLoss(), Digits) + ")" + ", TP=" + DoubleToStr(l_pips_24, Digits) + "(" + DoubleToStr(OrderTakeProfit(), Digits) + ")", "Unable to set SL or TP: " + PrintError(GetLastError()) + " : Ask=" + DoubleToStr(Ask, Digits) + ", SL=" + DoubleToStr(l_price_16, Digits) + "(" + DoubleToStr(OrderStopLoss(), Digits) + ")" + ", TP=" + DoubleToStr(l_pips_24, Digits) + "(" + DoubleToStr(OrderTakeProfit(), Digits) + ")");
                  }
               } else
                  if (!gi_1020) Comments(9, "isOrderBuy()", "Íåâîçìîæíî óñòàíîâèòü SL èëè TP: òîðãîâûé ïîòîê çàíÿò", "Unable to set SL or TP: Trade context busy");
            }
         }
         li_ret_0 = TRUE;
         break;
      }
   }
   gi_1552 = li_ret_0;
   return (li_ret_0);
}

bool CloseBuyOrder() {
   bool l_bool_20;
   int li_28;
   int l_ticket_32;
   bool li_ret_0 = FALSE;
   bool li_4 = FALSE;
   bool li_8 = FALSE;
   bool li_12 = TRUE;
   int l_pos_16 = 0;
   double l_bid_36 = Bid;
   int l_ord_total_24 = OrdersTotal();
   for (l_pos_16 = 0; l_pos_16 < l_ord_total_24; l_pos_16++) {
      l_bool_20 = OrderSelect(l_pos_16, SELECT_BY_POS, MODE_TRADES);
      if (OrderSymbol() == Symbol() && OrderType() == OP_BUY) {
         if (isFreezLevel() == 0) {
            if (Bid >= OrderTakeProfit() && OrderTakeProfit() > 0.0) continue;
            if (!gi_860) {
               if (OrderMagicNumber() == g_magic_1196) {
                  li_4 = TRUE;
                  li_8 = TRUE;
                  li_28 = GetTickCount();
                  l_ticket_32 = OrderTicket();
                  if (IsTradeAllowed()) {
                     RefreshRates();
                     if ((Bid >= l_bid_36 && CheckRateBeforeClose) || !CheckRateBeforeClose) {
                        if (OrderClose(OrderTicket(), OrderLots(), Bid, OrderCloseSlippage, Blue)) li_ret_0 = TRUE;
                     } else li_12 = FALSE;
                  } else li_8 = FALSE;
               }
            } else {
               li_4 = TRUE;
               li_28 = GetTickCount();
               if (SaveFileOrder(98, OrderTicket(), OrderLots(), Bid, 0, 0)) li_ret_0 = TRUE;
            }
         }
      }
   }
   if (li_4) {
      gi_1296 = GetTickCount() - li_28;
      gi_1304 = GetTickCount() - gi_1288;
      if (li_ret_0) {
         gi_1124 = gi_1144;
         gi_1132 = MathRound((Ask - Bid) / Point);
         g_time_1680 = Time[0];

         if (!gi_1584) g_price_1440 = l_bid_36;
         gi_1584 = FALSE;
         gi_1208 = g_str2int_252 - gi_1264;

         gi_1552 = FALSE;
         if (!gi_1612) {
            g_ticket_1172 = l_ticket_32;
            g_ticket_1176 = 0;
         } else g_ticket_1188 = l_ticket_32;
         gi_1540 = FALSE;
      } else {
         if (!gi_1612) {
            if (li_8) {
               if (li_12) {
                  Comments(9, "CloseBuyOrder()", "Îøèáêà çàêðûòèÿ îðäåðà Buy" + " (" + DoubleToStr(l_bid_36, Digits) + "): " + PrintError(GetLastError()), "Error to close Buy order" +
                     " (" + DoubleToStr(l_bid_36, Digits) + "): " + PrintError(GetLastError()));
               } else {
                  Comments(9, "CloseBuyOrder()", "Îøèáêà çàêðûòèÿ îðäåðà Buy" + " (" + DoubleToStr(l_bid_36, Digits) + "): èçìåíèëàñü öåíà", "Error to close Buy order" + " (" + DoubleToStr(l_bid_36, Digits) +
                     "): rate changed");
               }
            } else {
               if (!gi_1020) {
                  Comments(9, "CloseBuyOrder()", "Îøèáêà çàêðûòèÿ îðäåðà Buy" + " (" + DoubleToStr(l_bid_36, Digits) + "): òîðãîâûé ïîòîê çàíÿò", "Error to close Buy order" + " (" +
                     DoubleToStr(l_bid_36, Digits) + "): trade context busy");
               }
            }
            if (!gi_1584) g_price_1440 = l_bid_36;
            gi_1584 = TRUE;


         }
      }
   }
   return (li_ret_0);
}

bool CloseSellOrder() {
   bool l_bool_20;
   int li_28;
   int l_ticket_32;
   bool li_ret_0 = FALSE;
   bool li_4 = FALSE;
   bool li_8 = FALSE;
   bool li_12 = TRUE;
   int l_pos_16 = 0;
   double l_ask_36 = Ask;
   int l_ord_total_24 = OrdersTotal();
   for (l_pos_16 = 0; l_pos_16 < l_ord_total_24; l_pos_16++) {
      l_bool_20 = OrderSelect(l_pos_16, SELECT_BY_POS, MODE_TRADES);
      if (OrderSymbol() == Symbol() && OrderType() == OP_SELL) {
         if (isFreezLevel() == 0) {
            if (Ask > OrderTakeProfit()) {
               if (!gi_860) {
                  if (OrderMagicNumber() == g_magic_1196) {
                     li_4 = TRUE;
                     li_8 = TRUE;
                     li_28 = GetTickCount();
                     l_ticket_32 = OrderTicket();
                     if (IsTradeAllowed()) {
                        RefreshRates();
                        if ((Ask <= l_ask_36 && CheckRateBeforeClose) || !CheckRateBeforeClose) {
                           if (OrderClose(OrderTicket(), OrderLots(), Ask, OrderCloseSlippage, Red)) li_ret_0 = TRUE;
                        } else li_12 = FALSE;
                     } else li_8 = FALSE;
                  }
               } else {
                  li_4 = TRUE;
                  li_28 = GetTickCount();
                  if (SaveFileOrder(98, OrderTicket(), OrderLots(), Ask, 0, 0)) li_ret_0 = TRUE;
               }
            }
         }
      }
   }
   if (li_4) {
      gi_1296 = GetTickCount() - li_28;
      gi_1304 = GetTickCount() - gi_1288;
      if (li_ret_0) {
         gi_1124 = gi_1144;
         gi_1132 = MathRound((Ask - Bid) / Point);
         g_time_1680 = Time[0];

         if (!gi_1584) g_price_1440 = l_ask_36;
         gi_1584 = FALSE;
         gi_1208 = g_str2int_252 - gi_1264;

         gi_1548 = FALSE;
         if (!gi_1612) {
            g_ticket_1172 = l_ticket_32;
            g_ticket_1176 = 0;
         } else g_ticket_1188 = l_ticket_32;
         gi_1540 = FALSE;
      } else {
         if (!gi_1612) {
            if (li_8) {
               if (li_12) {
                  Comments(9, "CloseSellOrder()", "Îøèáêà çàêðûòèÿ îðäåðà Sell" + " (" + DoubleToStr(l_ask_36, Digits) + "): " + PrintError(GetLastError()), "Error to close Sell order" +
                     " (" + DoubleToStr(l_ask_36, Digits) + "): " + PrintError(GetLastError()));
               } else {
                  Comments(9, "CloseSellOrder()", "Îøèáêà çàêðûòèÿ îðäåðà Sell" + " (" + DoubleToStr(l_ask_36, Digits) + "): èçìåíèëàñü öåíà", "Error to close Sell order" + " (" + DoubleToStr(l_ask_36, Digits) +
                     "): rate changed");
               }
            } else {
               if (!gi_1020) {
                  Comments(9, "CloseSellOrder()", "Îøèáêà çàêðûòèÿ îðäåðà Sell" + " (" + DoubleToStr(l_ask_36, Digits) + "): òîðãîâûé ïîòîê çàíÿò", "Error to close Sell order" + " (" +
                     DoubleToStr(l_ask_36, Digits) + "): trade context busy");
               }
            }
            if (!gi_1584) g_price_1440 = l_ask_36;
            gi_1584 = TRUE;

         }
      }
   }
   return (li_ret_0);
}

int isErrorCloseOrder(int ai_0) {
   bool li_ret_4 = FALSE;
   if (g_str2int_252 != 0) {
      if (!gi_1584) gi_1264 = g_str2int_252;
      else {
         if (gi_1264 > 0) {
            if (!CheckRepeatClosePrice || (CheckRepeatClosePrice && (ai_0 == 1 && Ask <= g_price_1440) || (ai_0 == 0 && Bid >= g_price_1440))) {
               gi_1264--;
               li_ret_4 = TRUE;
               Comments(9, "isErrorCloseOrder()", "Ïîâòîð çàêðûòèÿ îðäåðà (ïîïûòêà " + ((g_str2int_252 - gi_1264 + 1)) + " èç " + ((g_str2int_252 + 1)) + ")", "Try to close order again (trial " +
                  ((g_str2int_252 - gi_1264 + 1)) + " from " + ((g_str2int_252 + 1)) + ")");
            }
         } else {
            gi_1584 = FALSE;
            gi_1208 = g_str2int_252 - gi_1264;
            Comments(9, "isErrorCloseOrder()", "Îøèáêà ïîâòîðà çàêðûòèÿ îðäåðà (ïîïûòîê " + g_str2int_252 + ")", "Error to close order again (trials " + g_str2int_252 + ")");
         }
      }
   }
   if (li_ret_4 && gi_980) {
      Comments(9, "!Test!", "isErrorCloseOrder(" + ai_0 + "), NumRepClOrd=" + g_str2int_252 + ", CoRepCl=" + gi_1264 + ", ChRepClPr=" + CheckRepeatClosePrice + ", ClOrdPr=" +
         g_price_1440, "isErrorCloseOrder(" + ai_0 + "), NumRepClOrd=" + g_str2int_252 + ", CoRepCl=" + gi_1264 + ", ChRepClPr=" + CheckRepeatClosePrice + ", ClOrdPr=" + g_price_1440);
   }
   return (li_ret_4);
}

bool isFreezLevel() {
   double l_price_4;
   double ld_12;
   bool li_ret_0 = FALSE;
   if (g_str2int_264) {
      if (OrderStopLoss() != 0.0 || OrderTakeProfit() != 0.0) {
         if (OrderType() == OP_BUY) l_price_4 = Bid;
         if (OrderType() == OP_SELL) l_price_4 = Ask;
         ld_12 = MarketInfo(Symbol(), MODE_FREEZELEVEL) * Point;
         if (OrderStopLoss() != 0.0 && ld_12 > MathAbs(l_price_4 - OrderStopLoss())) li_ret_0 = TRUE;
         if (OrderTakeProfit() != 0.0 && ld_12 > MathAbs(l_price_4 - OrderTakeProfit())) li_ret_0 = TRUE;
      }
   }
   return (li_ret_0);
}

bool SendBuyOrder(int ai_0, int ai_4) {
   int l_error_68;
   int l_ticket_8 = 0;
   bool li_ret_16 = FALSE;
   bool li_20 = TRUE;
   bool li_24 = TRUE;
   double l_ask_36 = Ask;
   double l_price_44 = ai_0 / 10.0;
   double l_price_52 = ai_4 / 10.0;
   string ls_60 = "";
   gi_1584 = FALSE;
   double l_lots_28 = LotsForTrade();
   if (l_lots_28 < 0.0) {
      Comments(9, "SendBuyOrder()", "Îøèáêà îòêðûòèÿ îðäåðà Buy : Ìèíèìàëüíûé îáúåì ñâîáîäíûõ ñðåäñòâ " + DoubleToStr(-1.0 * l_lots_28, 2) + AccountCurrency() + " (" + DoubleToStr(l_ask_36, Digits) +
         ")", "Error open Buy order : Not enough money (" + DoubleToStr(l_ask_36, Digits) + ")");
      return (FALSE);
   }
   if (l_price_44 != 0.0 && !InvisibleStopLoss) {
      if (l_price_44 < MarketInfo(Symbol(), MODE_STOPLEVEL)) l_price_44 = MarketInfo(Symbol(), MODE_STOPLEVEL);
      l_price_44 = NormalizeDouble(Ask - l_price_44 * Point, Digits);
   }
   if (l_price_52 != 0.0) {
      if (l_price_52 < MarketInfo(Symbol(), MODE_STOPLEVEL)) l_price_52 = MarketInfo(Symbol(), MODE_STOPLEVEL);
      l_price_52 = NormalizeDouble(Ask + l_price_52 * Point, Digits);
   }
   if (g_str2int_196 && !gi_860) {
      l_price_44 = 0;
      l_price_52 = 0;
   }
   int li_12 = GetTickCount();
   if (!gi_860) {
      if (gi_240 == 0 || (gi_240 > 0 && gi_1520)) {
         if (IsTradeAllowed()) {
            RefreshRates();
            if ((Ask <= l_ask_36 && CheckRateBeforeOpen) || !CheckRateBeforeOpen) l_ticket_8 = OrderSend(Symbol(), OP_BUY, l_lots_28, Ask, OrderOpenSlippage, l_price_44, l_price_52, "euronis", g_magic_1196, 0, Blue);
            else li_24 = FALSE;
         } else li_20 = FALSE;
      }
      if (l_ticket_8 > 0)
         if (OrderSelect(l_ticket_8, SELECT_BY_TICKET, MODE_TRADES)) li_ret_16 = TRUE;
   } else
      if (SaveFileOrder(0, l_ticket_8, l_lots_28, Ask, l_price_44, l_price_52)) li_ret_16 = TRUE;
   gi_1292 = GetTickCount() - li_12;
   gi_1300 = GetTickCount() - gi_1288;
   if (li_ret_16) {
      gi_1112 = MathRound((OrderOpenPrice() - l_ask_36) / Point);
      if (gi_1520) gi_1112 = MathRound((OrderOpenPrice() - g_price_1472) / Point);
      gi_1116 = -1 * gi_1112;
      gi_1120 = gi_1144;
      gi_1128 = MathRound((Ask - Bid) / Point);
      if (UseSlippageCorrection) {
         if (gi_1112 > gi_288) gi_1112 = gi_288;
         ls_60 = ls_60 + ", SlippageCorrection=" + (-1 * gi_1112);
      } else gi_1112 = 0;
      if (UseSpreadCorrection) ls_60 = ls_60 + ", SpreadDifference=" + gi_1144;
      Comments(9, "SendBuyOrder()", "Îòêðûò Buy îðäåð : " + DoubleToStr(OrderOpenPrice(), Digits) + " (" + DoubleToStr(l_ask_36, Digits) + "), Slippage=" + gi_1116 + ls_60, "Buy order opened : " +
         DoubleToStr(OrderOpenPrice(), Digits) + " (" + DoubleToStr(l_ask_36, Digits) + "), Slippage=" + gi_1116 + ls_60);
      gi_1520 = FALSE;
      gi_1516 = FALSE;
      g_time_1680 = Time[0];
      g_bars_1152 = Bars;
      gi_1348 = 0;
      gi_1552 = TRUE;
   } else {
      if (gi_240 > 0 && !gi_1520) l_error_68 = 0;
      else l_error_68 = GetLastError();
      if (g_str2int_232) {
         if (!gi_1520) {
            gi_1520 = TRUE;
            gi_1516 = FALSE;
            g_bars_1168 = Bars;
            g_price_1472 = l_ask_36;
         }
         if (li_20) {
            Comments(9, "SendBuyOrder()", "Îøèáêà îòêðûòèÿ îðäåðà Buy, îæèäàíèå ïîâòîðà : " + PrintError(l_error_68) + " (" + DoubleToStr(l_ask_36, Digits) + ")", "Error open Buy order, waiting for repeat : " +
               PrintError(l_error_68) + " (" + DoubleToStr(l_ask_36, Digits) + ")");
         } else
            if (!gi_1020) Comments(9, "SendBuyOrder()", "Îøèáêà îòêðûòèÿ îðäåðà Buy, îæèäàíèå ïîâòîðà : òîðãîâûé ïîòîê çàíÿò", "Error open Buy order, waiting for repeat : trade context busy");
      } else {
         if (li_20) {
            if (li_24) {
               Comments(9, "SendBuyOrder()", "Îøèáêà îòêðûòèÿ îðäåðà Buy : " + PrintError(l_error_68) + " (" + DoubleToStr(l_ask_36, Digits) + ")", "Error open Buy order : " + PrintError(l_error_68) +
                  " (" + DoubleToStr(l_ask_36, Digits) + ")");
            } else Comments(9, "SendBuyOrder()", "Îøèáêà îòêðûòèÿ îðäåðà Buy : èçìåíèëàñü öåíà", "Error open Buy order : rate changed");
         } else
            if (!gi_1020) Comments(9, "SendBuyOrder()", "Îøèáêà îòêðûòèÿ îðäåðà Buy : òîðãîâûé ïîòîê çàíÿò", "Error open Buy order : trade context busy");
      }
   }
   return (li_ret_16);
}

bool SendSellOrder(int ai_0, int ai_4) {
   int l_error_68;
   bool li_ret_8 = FALSE;
   bool li_12 = TRUE;
   bool li_16 = TRUE;
   int l_ticket_20 = 0;
   double l_price_36 = Bid;
   double l_price_44 = ai_0 / 10.0;
   double l_price_52 = ai_4 / 10.0;
   string ls_60 = "";
   gi_1584 = FALSE;
   double l_lots_28 = LotsForTrade();
   if (l_lots_28 < 0.0) {
      Comments(9, "SendSellOrder()", "Îøèáêà îòêðûòèÿ îðäåðà Sell : Ìèíèìàëüíûé îáúåì ñâîáîäíûõ ñðåäñòâ " + DoubleToStr(-1.0 * l_lots_28, 2) + AccountCurrency() + " (" +
         DoubleToStr(l_price_36, Digits) + ")", "Error open Sell order : Not enough money (" + DoubleToStr(l_price_36, Digits) + ")");
      return (FALSE);
   }
   if (l_price_44 != 0.0 && !InvisibleStopLoss) {
      if (l_price_44 < MarketInfo(Symbol(), MODE_STOPLEVEL)) l_price_44 = MarketInfo(Symbol(), MODE_STOPLEVEL);
      l_price_44 = NormalizeDouble(Bid + l_price_44 * Point, Digits);
   }
   if (l_price_52 != 0.0) {
      if (l_price_52 < MarketInfo(Symbol(), MODE_STOPLEVEL)) l_price_52 = MarketInfo(Symbol(), MODE_STOPLEVEL);
      l_price_52 = NormalizeDouble(Bid - l_price_52 * Point, Digits);
   }
   if (g_str2int_196 && !gi_860) {
      l_price_44 = 0;
      l_price_52 = 0;
   }
   int li_24 = GetTickCount();
   if (!gi_860) {
      if (gi_240 == 0 || (gi_240 > 0 && gi_1516)) {
         if (IsTradeAllowed()) {
            RefreshRates();
            if ((Bid >= l_price_36 && CheckRateBeforeOpen) || !CheckRateBeforeOpen) l_ticket_20 = OrderSend(Symbol(), OP_SELL, l_lots_28, Bid, OrderOpenSlippage, l_price_44, l_price_52, "euronis", g_magic_1196, 0, Red);
            else li_16 = FALSE;
         } else li_12 = FALSE;
      }
      if (l_ticket_20 > 0)
         if (OrderSelect(l_ticket_20, SELECT_BY_TICKET, MODE_TRADES)) li_ret_8 = TRUE;
   } else
      if (SaveFileOrder(1, l_ticket_20, l_lots_28, Bid, l_price_44, l_price_52)) li_ret_8 = TRUE;
   gi_1292 = GetTickCount() - li_24;
   gi_1300 = GetTickCount() - gi_1288;
   if (li_ret_8) {
      if (gi_1516) l_price_36 = g_price_1472;
      gi_1112 = MathRound((l_price_36 - OrderOpenPrice()) / Point);
      gi_1116 = -1 * gi_1112;
      gi_1120 = gi_1144;
      gi_1128 = MathRound((Ask - Bid) / Point);
      if (UseSlippageCorrection) {
         if (gi_1112 > gi_288) gi_1112 = gi_288;
         ls_60 = ls_60 + ", SlippageCorrection=" + (-1 * gi_1112);
      } else gi_1112 = 0;
      if (UseSpreadCorrection) ls_60 = ls_60 + ", SpreadDifference=" + gi_1144;
      Comments(9, "SendSellOrder()", "Îòêðûò Sell îðäåð : " + DoubleToStr(OrderOpenPrice(), Digits) + " (" + DoubleToStr(l_price_36, Digits) + "), Slippage=" + gi_1116 +
         ls_60, "Sell order opened : " + DoubleToStr(OrderOpenPrice(), Digits) + " (" + DoubleToStr(l_price_36, Digits) + "), Slippage=" + gi_1116 + ls_60);
      gi_1516 = FALSE;
      gi_1520 = FALSE;
      g_time_1680 = Time[0];
      g_bars_1152 = Bars;


      gi_1348 = 1;
      gi_1548 = TRUE;
   } else {
      if (gi_240 > 0 && !gi_1516) l_error_68 = 0;
      else l_error_68 = GetLastError();
      if (g_str2int_232) {
         if (!gi_1516) {
            gi_1516 = TRUE;
            gi_1520 = FALSE;
            g_bars_1168 = Bars;
            g_price_1472 = l_price_36;
         }
         if (li_12) {
            Comments(9, "SendSellOrder()", "Îøèáêà îòêðûòèÿ îðäåðà Sell, îæèäàíèå ïîâòîðà : " + PrintError(l_error_68) + " (" + DoubleToStr(l_price_36, Digits) + ")", "Error open Sell order, waiting for repeat : " +
               PrintError(l_error_68) + " (" + DoubleToStr(l_price_36, Digits) + ")");
         } else
            if (!gi_1020) Comments(9, "SendSellOrder()", "Îøèáêà îòêðûòèÿ îðäåðà Sell, îæèäàíèå ïîâòîðà : òîðãîâûé ïîòîê çàíÿò", "Error open Sell order, waiting for repeat : trade context busy");
      } else {
         if (li_12) {
            if (li_16) {
               Comments(9, "SendSellOrder()", "Îøèáêà îòêðûòèÿ îðäåðà Sell : " + PrintError(l_error_68) + " (" + DoubleToStr(l_price_36, Digits) + ")", "Error open Sell order : " +
                  PrintError(l_error_68) + " (" + DoubleToStr(l_price_36, Digits) + ")");
            } else Comments(9, "SendSellOrder()", "Îøèáêà îòêðûòèÿ îðäåðà Sell : èçìåíèëàñü öåíà", "Error open Sell order : rate changed");
         } else
            if (!gi_1020) Comments(9, "SendSellOrder()", "Îøèáêà îòêðûòèÿ îðäåðà Sell : òîðãîâûé ïîòîê çàíÿò", "Error open Sell order : trade context busy");
      }
   }
   return (li_ret_8);
}

int isOrderClose() {
   double ld_12;
   double ld_20;
   string ls_36;
   string l_name_60;
   color l_color_68;
   string l_name_76;
   int l_file_84;
   string ls_88;
   int l_ticket_0 = 0;
   double ld_4 = 0;
   double l_global_var_28 = 0.0;
   string l_dbl2str_44 = "";
   string ls_52 = "";
   if (g_ticket_1172 != 0) {
      if (OrderSelect(g_ticket_1172, SELECT_BY_TICKET) == TRUE) {
         ld_20 = OrderClosePrice();
         if (OrderCloseTime() > 0) {
            l_ticket_0 = OrderTicket();
            l_global_var_28 = GlobalVariableGet(g_var_name_1840);
            ls_52 = MarginControl(l_ticket_0);
            if (!RestoreLostProfit) ls_52 = "";
            if (OrderType() == OP_SELL) {
               ld_12 = (OrderOpenPrice() - OrderClosePrice()) / Point;
               ld_4 = g_price_1440 - ld_20;
               ls_36 = " (Slippage o/c=" + gi_1116 + "/" + DoubleToStr(ld_4 / Point, 0) + ", Spread o/c=" + gi_1128 + "/" + gi_1132 + ", ProfitPoint=" + DoubleToStr(ld_12, 0) + ls_52 + ")";
               Comments(9, "isOrderClose()", "Îðäåð Sell çàêðûò : " + DoubleToStr(ld_20, Digits) + " (" + DoubleToStr(g_price_1440, Digits) + "), Slippage=" + DoubleToStr(ld_4 / Point, 0) +
                  ls_36, "Sell order closed : " + DoubleToStr(ld_20, Digits) + " (" + DoubleToStr(g_price_1440, Digits) + "), Slippage=" + DoubleToStr(ld_4 / Point, 0) + ls_36);
            }
            if (OrderType() == OP_BUY) {
               ld_12 = (OrderClosePrice() - OrderOpenPrice()) / Point;
               ld_4 = ld_20 - g_price_1440;
               ls_36 = " (Slippage o/c=" + gi_1116 + "/" + DoubleToStr(ld_4 / Point, 0) + ", Spread o/c=" + gi_1128 + "/" + gi_1132 + ", ProfitPoint=" + DoubleToStr(ld_12, 0) + ls_52 + ")";
               Comments(9, "isOrderClose()", "Îðäåð Buy çàêðûò : " + DoubleToStr(ld_20, Digits) + " (" + DoubleToStr(g_price_1440, Digits) + "), Slippage=" + DoubleToStr(ld_4 / Point, 0) +
                  ls_36, "Buy order closed : " + DoubleToStr(ld_20, Digits) + " (" + DoubleToStr(g_price_1440, Digits) + "), Slippage=" + DoubleToStr(ld_4 / Point, 0) + ls_36);
            }
            g_ticket_1172 = 0;
            g_ticket_1176 = 0;
         }
      }
   }
   if (g_ticket_1176 != 0) {
      if (OrderSelect(g_ticket_1176, SELECT_BY_TICKET) == TRUE) {
         if (OrderCloseTime() > 0) {
            l_ticket_0 = OrderTicket();
            l_global_var_28 = GlobalVariableGet(g_var_name_1840);
            ls_52 = MarginControl(l_ticket_0);
            if (!RestoreLostProfit) ls_52 = "";
            ld_20 = OrderClosePrice();
            if (OrderType() == OP_SELL) {
               ld_12 = (OrderOpenPrice() - OrderClosePrice()) / Point;
               ls_36 = " (Slippage o/c=" + gi_1116 + "/..." + ", Spread o/c=" + gi_1128 + "/" + gi_1132 + ", ProfitPoint=" + DoubleToStr(ld_12, 0) + ls_52 + ")";
               if (OrderClosePrice() <= OrderTakeProfit() && OrderTakeProfit() != 0.0) {
                  l_dbl2str_44 = "TP";
                  Comments(9, "isOrderClose()", "Îðäåð Sell çàêðûò ïî TakeProfit (" + DoubleToStr(ld_20, Digits) + ")" + ls_36, "Sell order closed by TakeProfit (" + DoubleToStr(ld_20, Digits) +
                     ")" + ls_36);
                  gda_1512[24] += 1.0;
                  if (gi_844) {
                     gi_1560 = TRUE;
                     GlobalVariableSet(g_var_name_1856, gi_1316);
                     Comments(9, "isOrderClose()", "Òîðãîâëÿ çàáëîêèðîâàíà: Îðäåð çàêðûò ïî TakeProfit", "Trade stoped: Order closed by TakeProfit");
                  }
               } else {
                  if (OrderClosePrice() >= OrderStopLoss() && OrderStopLoss() != 0.0) {
                     l_dbl2str_44 = "SL";
                     Comments(9, "isOrderClose()", "Îðäåð Sell çàêðûò ïî StopLoss (" + DoubleToStr(ld_20, Digits) + ")" + ls_36, "Sell order closed by StopLoss (" + DoubleToStr(ld_20, Digits) +
                        ")" + ls_36);
                     gda_1512[23] += 1.0;
                     if (gi_840) {
                        gi_1560 = TRUE;
                        GlobalVariableSet(g_var_name_1856, gi_1316);
                        Comments(9, "isOrderClose()", "Òîðãîâëÿ çàáëîêèðîâàíà: Îðäåð çàêðûò ïî StopLoss", "Trade stoped: Order closed by StopLoss");
                     }
                  } else {
                     if (g_ticket_1188 != 0) {
                        l_dbl2str_44 = "iSL";
                        Comments(9, "isOrderClose()", "Îðäåð Sell çàêðûò ïî iStopLoss (" + DoubleToStr(ld_20, Digits) + ")" + ls_36, "Sell order closed by iStopLoss (" + DoubleToStr(ld_20, Digits) +
                           ")" + ls_36);
                        gda_1512[23] += 1.0;
                        if (gi_840) {
                           gi_1560 = TRUE;
                           GlobalVariableSet(g_var_name_1856, gi_1316);
                           Comments(9, "isOrderClose()", "Òîðãîâëÿ çàáëîêèðîâàíà: Îðäåð çàêðûò ïî iStopLoss", "Trade stoped: Order closed by iStopLoss");
                        }
                     } else {
                        l_dbl2str_44 = "H";
                        Comments(9, "isOrderClose()", "Îðäåð Sell çàêðûò âðó÷íóþ (" + DoubleToStr(ld_20, Digits) + ")" + ls_36, "Sell order closed by hand (" + DoubleToStr(ld_20, Digits) +
                           ")" + ls_36);
                        gda_1512[25] += 1.0;
                        if (BlockAfterHandClose) {
                           gi_1560 = TRUE;
                           GlobalVariableSet(g_var_name_1856, gi_1316);
                           Comments(9, "isOrderClose()", "Òîðãîâëÿ çàáëîêèðîâàíà: Îðäåð çàêðûò âðó÷íóþ", "Trade stoped: Order closed by hand");
                        }
                     }
                  }
               }
            }
            if (OrderType() == OP_BUY) {
               ld_12 = (OrderClosePrice() - OrderOpenPrice()) / Point;
               ls_36 = " (Slippage o/c=" + gi_1116 + "/..." + ", Spread o/c=" + gi_1128 + "/" + gi_1132 + ", ProfitPoint=" + DoubleToStr(ld_12, 0) + ls_52 + ")";
               if (OrderClosePrice() >= OrderTakeProfit() && OrderTakeProfit() != 0.0) {
                  l_dbl2str_44 = "TP";
                  Comments(9, "isOrderClose()", "Îðäåð Buy çàêðûò ïî TakeProfit (" + DoubleToStr(ld_20, Digits) + ")" + ls_36, "Buy order closed by TakeProfit (" + DoubleToStr(ld_20, Digits) +
                     ")" + ls_36);
                  gda_1512[24] += 1.0;
                  if (gi_844) {
                     gi_1560 = TRUE;
                     GlobalVariableSet(g_var_name_1856, gi_1316);
                     Comments(9, "isOrderClose()", "Òîðãîâëÿ çàáëîêèðîâàíà: Îðäåð çàêðûò ïî TakeProfit", "Trade stoped: Order closed by TakeProfit");
                  }
               } else {
                  if (OrderClosePrice() <= OrderStopLoss() && OrderStopLoss() != 0.0) {
                     l_dbl2str_44 = "SL";
                     Comments(9, "isOrderClose()", "Îðäåð Buy çàêðûò ïî StopLoss (" + DoubleToStr(ld_20, Digits) + ")" + ls_36, "Buy order closed by StopLoss (" + DoubleToStr(ld_20, Digits) +
                        ")" + ls_36);
                     gda_1512[23] += 1.0;
                     if (gi_840) {
                        gi_1560 = TRUE;
                        GlobalVariableSet(g_var_name_1856, gi_1316);
                        Comments(9, "isOrderClose()", "Òîðãîâëÿ çàáëîêèðîâàíà: Îðäåð çàêðûò ïî StopLoss", "Trade stoped: Order closed by StopLoss");
                     }
                  } else {
                     if (g_ticket_1188 != 0) {
                        l_dbl2str_44 = "iSL";
                        Comments(9, "isOrderClose()", "Îðäåð Buy çàêðûò ïî iStopLoss (" + DoubleToStr(ld_20, Digits) + ")" + ls_36, "Buy order closed by iStopLoss (" + DoubleToStr(ld_20, Digits) +
                           ")" + ls_36);
                        gda_1512[23] += 1.0;
                        if (gi_840) {
                           gi_1560 = TRUE;
                           GlobalVariableSet(g_var_name_1856, gi_1316);
                           Comments(9, "isOrderClose()", "Òîðãîâëÿ çàáëîêèðîâàíà: Îðäåð çàêðûò ïî iStopLoss", "Trade stoped: Order closed by iStopLoss");
                        }
                     } else {
                        l_dbl2str_44 = "H";
                        Comments(9, "isOrderClose()", "Îðäåð Buy çàêðûò âðó÷íóþ (" + DoubleToStr(ld_20, Digits) + ")" + ls_36, "Buy order closed by hand (" + DoubleToStr(ld_20, Digits) +
                           ")" + ls_36);
                        gda_1512[25] += 1.0;
                        if (BlockAfterHandClose) {
                           gi_1560 = TRUE;
                           GlobalVariableSet(g_var_name_1856, gi_1316);
                           Comments(9, "isOrderClose()", "Òîðãîâëÿ çàáëîêèðîâàíà: Îðäåð çàêðûò âðó÷íóþ", "Trade stoped: Order closed by hand");
                        }
                     }
                  }
               }
            }
            if (OrderCloseTime() >= Time[0] && g_str2int_424) g_time_1680 = Time[0];
            if (!IsOptimization()) {
               if (OrderType() == OP_BUY) {
    
                  l_color_68 = Blue;
                  l_name_60 = OrderTicket() + " buy  " + DoubleToStr(OrderLots(), 2) + " " + OrderSymbol() + " at " + DoubleToStr(OrderOpenPrice(), MarketInfo(OrderSymbol(), MODE_DIGITS));
               }
               if (OrderType() == OP_SELL) {
  
                  l_color_68 = Red;
                  l_name_60 = OrderTicket() + " sell  " + DoubleToStr(OrderLots(), 2) + " " + OrderSymbol() + " at " + DoubleToStr(OrderOpenPrice(), MarketInfo(OrderSymbol(), MODE_DIGITS));
               }
               ObjectCreate(l_name_60, OBJ_ARROW, 0, OrderCloseTime(), OrderClosePrice());
               ObjectSet(l_name_60, OBJPROP_ARROWCODE, 3);
               ObjectSet(l_name_60, OBJPROP_COLOR, Black);
               l_name_60 = OrderTicket() + DoubleToStr(OrderOpenPrice(), MarketInfo(OrderSymbol(), MODE_DIGITS)) + "->" + DoubleToStr(OrderClosePrice(), MarketInfo(OrderSymbol(), MODE_DIGITS));
               ObjectCreate(l_name_60, OBJ_TREND, 0, OrderOpenTime(), OrderOpenPrice(), OrderCloseTime(), OrderClosePrice());
               ObjectSet(l_name_60, OBJPROP_STYLE, STYLE_DOT);
               ObjectSet(l_name_60, OBJPROP_WIDTH, 1);
               ObjectSet(l_name_60, OBJPROP_RAY, FALSE);
               ObjectSet(l_name_60, OBJPROP_COLOR, l_color_68);
            }
            g_ticket_1188 = FALSE;
            g_ticket_1176 = 0;
         }
      }
   }
   if (l_ticket_0 > 0 && !IsOptimization()) {
      l_name_76 = gs_1808 + ".csv";
      if (gi_1600 && IsTesting()) {
         gi_1600 = FALSE;
         FileDelete(l_name_76);
      }
      l_file_84 = FileOpen(l_name_76, FILE_CSV|FILE_WRITE|FILE_READ, ';');
      if (l_file_84 < 1) Comments(9, "isOrderClose()", "Íåâîçìîæíî çàïèñàòü äàííûå â ôàéë " + l_name_76 + " :" + PrintError(GetLastError()), "Can not write to file " + l_name_76 + " :" + PrintError(GetLastError()));
      else {
         if (FileSize(l_file_84) <= 0) {
            FileWrite(l_file_84, "Ticket", "Type", "Size", "Item", "", "", "", "Open", "", "", "TakeProfit", "StopLoss", "", "", "", "Close", "", "", "ProfitP", "Profit$", "Profit%", "LifeTime", "Balance", "MaxBalance", "Expert");
            FileWrite(l_file_84, "", "", "", "", "Time", "Delay", "Price", "Repeat", "Slippage", "Spread(Diff)", "", "", "Time", "Delay", "Price", "Repeat", "Slippage", "Spread(Diff)", "", "", "", "", "", "", "");
         }
         FileSeek(l_file_84, 0, SEEK_END);
         ls_88 = "";
         if (l_dbl2str_44 == "") l_dbl2str_44 = DoubleToStr(ld_4 / Point, 0);
         if (OrderType() == OP_SELL) ls_88 = "sell";
         if (OrderType() == OP_BUY) ls_88 = "buy";
         FileWrite(l_file_84, OrderTicket(), ls_88, " " + DoubleToStr(OrderLots(), 2) + " (" + DoubleToStr(OrderLots() * MarketInfo(Symbol(), MODE_LOTSIZE) / (AccountBalance() - OrderProfit()), 0) +
            "%/" + DoubleToStr(OrderLots() * MarketInfo(Symbol(), MODE_LOTSIZE) / l_global_var_28, 0) + "%)", gs_1752, TimeToStr(OrderOpenTime(), TIME_DATE|TIME_SECONDS) + " (" + NameDayOfWeek(OrderOpenTime()) + ")", gi_1292 + " (" + gi_1300 + ")", " " + DoubleToStr(OrderOpenPrice(), Digits), g_count_1212, gi_1116, gi_1128 + " (" + gi_1120 + ")", " " + DoubleToStr(OrderTakeProfit(), Digits), " " + DoubleToStr(OrderStopLoss(), Digits), TimeToStr(OrderCloseTime(), TIME_DATE|TIME_SECONDS) + " (" + NameDayOfWeek(OrderCloseTime()) + ")", gi_1296 + " (" + gi_1304 + ")", " " + DoubleToStr(OrderClosePrice(), Digits), gi_1208, l_dbl2str_44, gi_1132 + " (" + gi_1124 + ")", DoubleToStr(ld_12, 0), " " + DoubleToStr(OrderProfit(), 2), " " + DoubleToStr(100.0 * OrderProfit() / (AccountBalance() - OrderProfit()), 1), OrderCloseTime() - OrderOpenTime(), " " + DoubleToStr(AccountBalance(), 2), " " + DoubleToStr(GlobalVariableGet(g_var_name_1840), 2), WindowExpertName());
         FileClose(l_file_84);
      }
      g_count_1212 = 0;
      gi_1292 = 0;
      gi_1300 = 0;
      gi_1296 = 0;
      gi_1304 = 0;
   }
   return (l_ticket_0);
}

string NameDayOfWeek(int ai_0) {
   if (TimeDayOfWeek(ai_0) == 0) return ("âñ");
   if (TimeDayOfWeek(ai_0) == 1) return ("ïí");
   if (TimeDayOfWeek(ai_0) == 2) return ("âò");
   if (TimeDayOfWeek(ai_0) == 3) return ("ñð");
   if (TimeDayOfWeek(ai_0) == 4) return ("÷ò");
   if (TimeDayOfWeek(ai_0) == 5) return ("ïò");
   if (TimeDayOfWeek(ai_0) == 6) return ("ñá");
   return ("");
}

bool isNewBar() {
   bool li_ret_0 = FALSE;
   if (Time[0] != g_time_1284) {
      g_time_1284 = Time[0];
      li_ret_0 = TRUE;
   }
   return (li_ret_0);
}

bool isNewHour() {
   bool li_ret_0 = FALSE;
   if (Hour() != gi_1280) {
      gi_1280 = Hour();
      li_ret_0 = TRUE;
   }
   return (li_ret_0);
}

bool isNewDayOfWeek() {
   bool li_ret_0 = FALSE;
   if (DayOfWeek() != g_day_of_week_1268) {
      g_day_of_week_1268 = DayOfWeek();
      li_ret_0 = TRUE;
   }
   return (li_ret_0);
}

int GMTSWDifference() {
   bool li_ret_0 = FALSE;
   if (SWChangeMode == 1 || SWChangeMode == 3) {
      if (TimeCurrent() > gi_1684 && TimeCurrent() < gi_1696) li_ret_0 = TRUE;
      if (TimeCurrent() > gi_1700 && TimeCurrent() < gi_1688) li_ret_0 = TRUE;
   }
   if (SWChangeMode == 2)
      if (TimeCurrent() > gi_1684 || TimeCurrent() < gi_1688) li_ret_0 = TRUE;
   return (li_ret_0);
}

bool StartRulls() {
   int li_4;

   if (isNewDayOfWeek()) {
      li_4 = gi_1356;
      gi_1356 = GMTSWDifference();
      if (li_4 != gi_1356) {
         MakeInitString();
         if (gi_1356 >= 0) Comments(9, "GMTSWDifference()", "Íîâîå çíà÷åíèå êîððåêöèè âðåìåíè: Correction+" + gi_1356, "New value of time correcton: Correction+" + gi_1356);
         if (gi_1356 < 0) Comments(9, "GMTSWDifference()", "Íîâîå çíà÷åíèå êîððåêöèè âðåìåíè: Correction" + gi_1356, "New value of time correcton: Correction" + gi_1356);
      }
   }
   gi_1668 = TimeCurrent() + 7200 - 3600 * (TimeZone + gi_1356);
   g_hour_1308 = TimeHour(gi_1668);
   g_day_of_week_1312 = TimeDayOfWeek(gi_1668);
   gi_1316 = TimeDay(gi_1668);
   g_month_1320 = TimeMonth(gi_1668);
   g_year_1324 = TimeYear(gi_1668);
   if (g_minute_1216 != TimeMinute(gi_1668)) {
      g_minute_1216 = TimeMinute(gi_1668);
      if (Language == "eng") gs_1824 = "Trade time CET " + TimeToStr(gi_1668, TIME_MINUTES);
      else gs_1824 = "Òîðãîâîå âðåìÿ CET (MSK-2) " + TimeToStr(gi_1668, TIME_MINUTES);
      gs_1824 = gs_1824 
      + "\n";
      Comments(7, "", "", "");
   }
   CheckSpreadDifference();
   isOrderClose();
   isNoNews(gi_1668, gi_896);
   if (IsOptimization() && !TradeHourOptimization) {
      if (OpenHourAM > 12) return (FALSE);
      if (CloseHourAM > 12) return (FALSE);
      if (OpenHourPM < 12) return (FALSE);
      if (CloseHourPM < 12) return (FALSE);
      if (OpenHourAM > CloseHourAM || OpenHourPM > CloseHourPM) return (FALSE);
   }
   if (IsTesting() || IsOptimization()) {
      gi_856 = FALSE;
      gi_860 = FALSE;
   }
   if (gi_856 && gi_860) {
      Comment("TradeTransferIn è TradeTransferOut íå ìîãóò ðàáîòàòü îäíîâðåìåííî!!!");

   }
   MarginControl(0);
   int li_8 = gi_1664;
   gi_1664 = FALSE;
   if (!CheckHystory()) gi_1664 = TRUE;
   if (!li_8 && gi_1664) Comments(9, "CheckHystory()", "Òîðãîâëÿ çàáëîêèðîâàíà: Îæèäàåòñÿ çàãðóçêà èñòîðèè", "Trade stoped: No history");
   if (li_8 && !gi_1664) Comments(9, "CheckHystory()", "Òîðãîâëÿ ðàçðåøåíà: Èñòîðèÿ çàãðóæåíà", "Trade allowed: History loaded");
   li_8 = gi_1632;
   gi_1632 = FALSE;
   if (!isVolatilitytoTrade()) gi_1632 = TRUE;
   if (g_str2int_724) Comments(3, "", "BlockByVolatility = " + gi_1632, "");
   li_8 = gi_1624;
   gi_1624 = FALSE;
   int li_12 = MaxChannelLimit(gd_332, g_str2int_340, g_str2int_356);
   if (li_12 != 0) gi_1624 = TRUE;
   if (!li_8 && gi_1624) {
      Comments(9, "MaxChannelLimit()", "Òîðãîâëÿ çàáëîêèðîâàíà: Ïðåâûøåí ðàçìåð êàíàëà (" + DoubleToStr(gd_332, 0) + "/" + g_str2int_340 + ")", "Trade stoped: High channel size (" +
         DoubleToStr(gd_332, 0) + "/" + g_str2int_340 + ")");
   }
   if (li_8 && !gi_1624) {
      Comments(9, "MaxChannelLimit()", "Òîðãîâëÿ ðàçðåøåíà (" + DoubleToStr(gd_332, 0) + "/" + g_str2int_340 + ")", "Trade allowed (" + DoubleToStr(gd_332, 0) + "/" + g_str2int_340 +
         ")");
   }
   li_8 = gi_1620;
   gi_1620 = FALSE;
   int li_16 = MaxChannelLimit(gd_344, g_str2int_352, g_str2int_360);
   if (li_16 != 0) gi_1620 = TRUE;
   if (!li_8 && gi_1620) {
      Comments(9, "MaxChannelLimit()", "Òîðãîâëÿ çàáëîêèðîâàíà: Ïðåâûøåí ðàçìåð êàíàëà (" + DoubleToStr(gd_344, 0) + "/" + g_str2int_352 + ")", "Trade stoped: High channel size (" +
         DoubleToStr(gd_344, 0) + "/" + g_str2int_352 + ")");
   }
   if (li_8 && !gi_1620) {
      Comments(9, "MaxChannelLimit()", "Òîðãîâëÿ ðàçðåøåíà (" + DoubleToStr(gd_344, 0) + "/" + g_str2int_352 + ")", "Trade allowed (" + DoubleToStr(gd_344, 0) + "/" + g_str2int_352 +
         ")");
   }
   li_8 = gi_1628;
   gi_1628 = FALSE;
   if (MaxVolumeLimit(gd_308, g_str2int_316, g_str2int_320)) gi_1628 = TRUE;
   if (!li_8 && gi_1628) {
      Comments(9, "MaxVolumeLimit()", "Òîðãîâëÿ çàáëîêèðîâàíà: Ïðåâûøåí ðàçìåð áàðîâ (" + DoubleToStr(gd_308, 0) + "/" + g_str2int_316 + ")", "Trade stoped: High bars size (" +
         DoubleToStr(gd_308, 0) + "/" + g_str2int_316 + ")");
   }
   if (li_8 && !gi_1628) {
      Comments(9, "MaxVolumeLimit()", "Òîðãîâëÿ ðàçðåøåíà (" + DoubleToStr(gd_308, 0) + "/" + g_str2int_316 + ")", "Trade allowed (" + DoubleToStr(gd_308, 0) + "/" + g_str2int_316 +
         ")");
   }
   if (gi_1348 == 1) Comments(4, "", "Next Direction = buy", "");
   if (gi_1348 == 0) Comments(4, "", "Next Direction = sell", "");
   if (gi_1348 == 99) Comments(4, "", "Next Direction = buy or sell", "");
   li_8 = gi_1616;
   gi_1616 = FALSE;
   if (!isSpreadtoTrade()) gi_1616 = TRUE;
   if (!li_8 && gi_1616 && ShowSpreadInfo) {
      Comments(9, "isSpreadtoTrade()", "Òîðãîâëÿ çàáëîêèðîâàíà: Ïðåâûøåí ðàçìåð ñïðåäà (Spread=" + DoubleToStr(MarketInfo(Symbol(), MODE_SPREAD), 0) + ")", "Trade stoped: High spread value (Spread=" +
         DoubleToStr(MarketInfo(Symbol(), MODE_SPREAD), 0) + ")");
   }
   if (li_8 && !gi_1616 && ShowSpreadInfo) {
      Comments(9, "isSpreadtoTrade()", "Òîðãîâëÿ ðàçðåøåíà (Spread=" + DoubleToStr(MarketInfo(Symbol(), MODE_SPREAD), 0) + ")", "Trade allowed (Spread=" + DoubleToStr(MarketInfo(Symbol(), MODE_SPREAD), 0) +
         ")");
   }
   DrawDownAction(g_hour_1308);
   if (isNewBar()) {
   }
   if (isNewHour()) {
      SendMailReport();
      li_8 = gi_1636;
      gi_1636 = FALSE;
      if (!isTimetoTrade(gi_1668)) gi_1636 = TRUE;
      if (!li_8 && gi_1636) {
         Comments(9, "isTimetoTrade()", "Òîðãîâëÿ çàáëîêèðîâàíà: Òîðãîâîå âðåìÿ âûøëî", "Trade stoped: Trade time is over");
         gi_1560 = FALSE;
      }
      if (li_8 && !gi_1636) {
         gi_1348 = 99;
         Comments(9, "isTimetoTrade()", "Òîðãîâëÿ ðàçðåøåíà: Òîðãîâîå âðåìÿ íà÷àëîñü", "Trade allowed: Trade time is started");
      }
   }
   CheckBlockByStopsDate();
   if (!gi_1564 && gi_1560) Comments(9, "CheckBlockByStopsDate()", "Òîðãîâëÿ çàáëîêèðîâàíà äî ñëåäóþùåé òîðãîâîé ñåññèè", "Trade is disabled until the next trading session");
   gi_1564 = gi_1560;
   return (TRUE);
}

int CheckSpreadDifference() {
   bool li_ret_0 = FALSE;
   if (UseSpreadCorrection) {
      gi_1144 = MathRound(gi_256 - MarketInfo(Symbol(), MODE_SPREAD));
      if (gi_1552) gi_1140 = gi_1120;
      if (gi_1548) gi_1140 = gi_1144;
      Comments(0, "", "SpreadDifference = " + gi_1144 + "   SpreadCorrection = " + gi_1140, "");
   } else gi_1140 = 0;
   return (li_ret_0);
}

int SendMailReport() {
   double l_global_var_8;
   double l_global_var_16;
   double ld_24;
   string ls_80;
   bool li_ret_0 = FALSE;
   bool li_4 = TRUE;
   string ls_32 = "";
   int l_error_40 = 0;
   int li_44 = TimeCurrent() - 3600 * (TimeZone + gi_1356);
   double ld_48 = 1.0 * TimeHour(li_44);
   double ld_56 = 1.0 * TimeDay(li_44);
   string ls_64 = " ";
   string ls_72 = "";
   if (UseMailReport) {
      if (!gi_1532) {
         gi_1532 = TRUE;
         if (!GlobalVariableCheck(g_var_name_1864) || !GlobalVariableCheck(g_var_name_1872) || IsTesting() || IsOptimization()) {
            if (GlobalVariableSet(g_var_name_1864, AccountBalance()) == 0 || GlobalVariableSet(g_var_name_1872, TimeDay(li_44 - 86400)) == 0) {
               Comments(9, "SendMailReport()", "Íåâîçìîæíî óñòàíîâèòü ãëîá. ïåðåìåííûå äëÿ îòïðàâêè îò÷åòà íà e-mail", "Can not set global variables to send e-mail");
               UseMailReport = FALSE;
            }
         }
      }
      l_global_var_16 = GlobalVariableGet(g_var_name_1864);
      l_global_var_8 = GlobalVariableGet(g_var_name_1872);
      if ((l_global_var_8 != ld_56 && ld_56 != 6.0 && ld_56 != 0.0 && ld_48 >= 1.0 * MailReportHourGMT) || (AccountMargin() == 0.0 && gi_1536)) {
         if (AccountMargin() == 0.0 && gi_1536) {
            gi_1536 = FALSE;
            li_4 = FALSE;
         }
         ls_80 = gs_1760 + " " + AccountNumber();
         ls_32 = ls_32 + ls_80 + ls_64;
         ls_32 = ls_32 + TimeToStr(li_44, TIME_DATE|TIME_MINUTES) + " GMT" + ls_64;
         ls_32 = ls_32 + "Balance: " + DoubleToStr(AccountBalance(), 2) + AccountCurrency() + ls_64;
         ld_24 = AccountBalance() - l_global_var_16;
         ls_72 = "";
         if (AccountMargin() != 0.0) {
            gi_1536 = TRUE;
            if (AccountEquity() > AccountBalance()) ls_72 = "+";
            ls_32 = ls_32 + "Trades: " + ls_72 + DoubleToStr(AccountEquity() - AccountBalance(), 2) + AccountCurrency() + ls_64;
         }
         ls_72 = "";
         if (ld_24 > 0.0) ls_72 = "+";
         if (li_4) ls_32 = ls_32 + "DayProfit: " + ls_72 + DoubleToStr(ld_24, 2) + AccountCurrency();
         if (!IsTesting() && !IsOptimization()) {
            GetLastError();
            SendMail("report", ls_32);
            l_error_40 = GetLastError();
         }
         if (l_error_40 != 0/* NO_ERROR */) {
            Comments(9, "SendMailReport()", "Íå óäàëîñü îòïðàâèòü îò÷åò íà e-mail: " + PrintError(l_error_40), "Can not send e-mail: " + PrintError(l_error_40));
            UseMailReport = FALSE;
         } else {
            Comments(9, "SendMailReport()", "Îòïðàâëåí îò÷åò íà e-mail", "E-mail report sent");
            if (li_4) {
               GlobalVariableSet(g_var_name_1872, ld_56);
               GlobalVariableSet(g_var_name_1864, AccountBalance());
            }
            li_ret_0 = TRUE;
         }
      }
   }
   return (li_ret_0);
}

int isProfitValuetoClose(int ai_0, string as_4) {
   int li_16;
   bool li_ret_12 = FALSE;
   Comments(1, "", "CurrentOrderProfitPoint = " + DoubleToStr(gd_1424, 0), "");
   if (g_str2int_200 == 0 || ai_0 == gi_280) {
      if (gd_1424 >= ai_0) {
         if (gi_1184 > gi_216 && gi_216 < 0) li_ret_12 = TRUE;
      } else {
         if (g_str2int_260) {
            li_16 = Bars - g_bars_1152;
            if (gd_1424 > 0.0 && gd_1424 - ai_0 * (1 - li_16 / g_str2int_376) >= 0.0) li_ret_12 = TRUE;
         }
      }
   } else {
      if (gd_1424 >= ai_0 && !gi_1540) {
         gd_1432 = 0.0;
         gi_1540 = TRUE;
      }
      if (gi_1540) {
         if (gd_1424 <= MathFloor((100 - g_str2int_204) * gi_288 / 100)) {
            li_ret_12 = TRUE;
            gi_1540 = FALSE;
         } else {
            if (gd_1432 < gd_1424) gd_1432 = gd_1424;
            if (gd_1424 <= MathFloor((100 - g_str2int_200) * gd_1432 / 100.0)) {
               li_ret_12 = TRUE;
               gi_1540 = FALSE;
            }
         }
      }
   }
   if (li_ret_12 && gi_980 && as_4 != "MinProfit") {
      Comments(9, "!Test!", as_4 + " isProfitValuetoClose(" + ai_0 + "), CurOrdPrP=" + DoubleToStr(gd_1424, 2) + ", OptPV=" + gi_288 + ", SlCor=" + gi_1112 + ", SprCor=" +
         gi_1140, as_4 + " isProfitValuetoClose(" + ai_0 + "), CurOrdPrP=" + DoubleToStr(gd_1424, 2) + ", OptPV=" + gi_288 + ", SlCor=" + gi_1112 + ", SprCor=" + gi_1140);
   }
   return (li_ret_12);
}

int isInvisibleStopLosstoClose(int ai_0) {
   bool li_ret_4 = FALSE;
   if (InvisibleStopLoss) {
      if (gi_180 != 0) {
         if ((gd_1424 <= (-1 * gi_180) + gi_1140 && ai_0 == 1) || (gd_1424 <= (-1 * gi_180) && ai_0 == 0)) {
            li_ret_4 = TRUE;
            gi_1612 = TRUE;
         }
      }
   }
   if (li_ret_4 && gi_980) {
      Comments(9, "!Test!", "isInvisibleStopLosstoClose(" + ai_0 + "), CurOrdPrP=" + DoubleToStr(gd_1424, 0) + ", SprCor=" + gi_1140, "isInvisibleStopLosstoClose(" + ai_0 +
         "), CurOrdPrP=" + DoubleToStr(gd_1424, 0) + ", SprCor=" + gi_1140);
   }
   return (li_ret_4);
}

int isChanneltoOpen(int ai_0, int ai_4, int ai_8, int ai_12) {
   bool li_ret_16 = FALSE;
   if (ai_4 == WHOLE_ARRAY) return (li_ret_16);
   double ld_20 = High[iHighest(NULL, 0, MODE_HIGH, ai_4, 1)] + Point * ai_12;
   double ld_28 = Low[iLowest(NULL, 0, MODE_LOW, ai_4, 1)] - Point * ai_12;
   if (gi_1136 == 10) {
      if (g_str2int_412 == 1) {
         ld_20 = MathRound(ld_20 / Point / gi_1136) * Point * gi_1136;
         ld_28 = MathRound(ld_28 / Point / gi_1136) * Point * gi_1136;
      }
      if (g_str2int_412 == 2) {
         ld_20 = MathFloor(ld_20 / Point / gi_1136) * Point * gi_1136;
         ld_28 = MathCeil(ld_28 / Point / gi_1136) * Point * gi_1136;
      }
      if (g_str2int_412 == 3) {
         ld_20 = MathCeil(ld_20 / Point / gi_1136) * Point * gi_1136;
         ld_28 = MathFloor(ld_28 / Point / gi_1136) * Point * gi_1136;
      }
   }
   if (ai_0 == 0)
      if (Bid < ld_28 || (ai_8 && Bid <= ld_28)) li_ret_16 = TRUE;
   if (ai_0 == 1)
      if (Bid > ld_20 || (ai_8 && Bid >= ld_20)) li_ret_16 = TRUE;
   return (li_ret_16);
}

int isChanneltoClose(int ai_0, int ai_4, int ai_8, int ai_12, string as_16) {
   bool li_ret_24 = FALSE;
   if (ai_4 == WHOLE_ARRAY) return (li_ret_24);
   double ld_28 = High[iHighest(NULL, 0, MODE_HIGH, ai_4, 1)] + Point * ai_12;
   double ld_36 = Low[iLowest(NULL, 0, MODE_LOW, ai_4, 1)] - Point * ai_12;
   if (gi_1136 == 10) {
      if (g_str2int_412 == 1) {
         ld_28 = MathRound(ld_28 / Point / gi_1136) * Point * gi_1136;
         ld_36 = MathRound(ld_36 / Point / gi_1136) * Point * gi_1136;
      }
      if (g_str2int_412 == 2) {
         ld_28 = MathFloor(ld_28 / Point / gi_1136) * Point * gi_1136;
         ld_36 = MathCeil(ld_36 / Point / gi_1136) * Point * gi_1136;
      }
      if (g_str2int_412 == 3) {
         ld_28 = MathCeil(ld_28 / Point / gi_1136) * Point * gi_1136;
         ld_36 = MathFloor(ld_36 / Point / gi_1136) * Point * gi_1136;
      }
   }
   if (ai_0 == 0)
      if (Bid > ld_28 || (ai_8 && Bid >= ld_28)) li_ret_24 = TRUE;
   if (ai_0 == 1)
      if (Bid < ld_36 || (ai_8 && Bid <= ld_36)) li_ret_24 = TRUE;
   if (li_ret_24 && gi_980 && as_16 != "MinProfit") {
      Comments(9, "!Test!", as_16 + " isChanneltoClose(" + ai_0 + "," + ai_4 + "," + ai_8 + "," + ai_12 + ") Bid=" + DoubleToStr(Bid, Digits) + ", HighestBC=" + ld_28 +
         ", LowestBC=" + ld_36, as_16 + " isChanneltoClose(" + ai_0 + "," + ai_4 + "," + ai_8 + "," + ai_12 + ") Bid=" + DoubleToStr(Bid, Digits) + ", HighestBC=" + ld_28 + ", LowestBC=" + ld_36);
   }
   return (li_ret_24);
}

bool isTimetoTrade(int ai_0) {
   int li_12;
   int li_16;
   bool li_ret_4 = FALSE;
   int l_hour_20 = TimeHour(ai_0);
   int l_day_of_week_24 = TimeDayOfWeek(ai_0);
   int l_day_28 = TimeDay(ai_0);
   int l_month_32 = TimeMonth(ai_0);
   int l_year_36 = TimeYear(ai_0);
   if (l_day_of_week_24 > 0 && l_day_of_week_24 < 6) {
      for (int li_8 = 0; li_8 < 10; li_8 += 2) {
         li_12 = gia_1364[l_day_of_week_24 - 1][li_8];
         li_16 = gia_1364[l_day_of_week_24 - 1][li_8 + 1];
         if (CheckTimes(l_hour_20, li_12, li_16)) {
            li_ret_4 = TRUE;
            break;
         }
      }
      if (l_day_of_week_24 == 1 && l_hour_20 < 12 && BlockWeekBegin) li_ret_4 = FALSE;
      if (l_day_of_week_24 == 5 && l_hour_20 >= 12 && BlockWeekEnd) li_ret_4 = FALSE;
      if ((l_day_of_week_24 != MathAbs(gi_804) && gi_804 > 0) || (l_day_of_week_24 == MathAbs(gi_804) && gi_804 < 0)) li_ret_4 = FALSE;
      if (l_month_32 != gi_808 && gi_808 != 0) li_ret_4 = FALSE;
      if (gi_800) {
         if (l_month_32 == 1 || l_month_32 == 3 || l_month_32 == 5 || l_month_32 == 7 || l_month_32 == 9 || l_month_32 == 11 && l_day_28 == 30 || l_day_28 == 31) li_ret_4 = FALSE;
         if (l_month_32 == 4 || l_month_32 == 6 || l_month_32 == 8 || l_month_32 == 10 || l_month_32 == 12 && l_day_28 == 29 || l_day_28 == 30) li_ret_4 = FALSE;
         if (l_month_32 == 2 && l_day_28 == 27 || l_day_28 == 28 || l_day_28 == 29) li_ret_4 = FALSE;
      }
   }
   if (ai_0 > StrToTime("2008.12.22 00:00") && ai_0 < StrToTime("2009.01.05 00:00")) li_ret_4 = FALSE;
  // if (TimeCurrent() > D'09.09.2009 14:00') li_ret_4 = FALSE;
   return (li_ret_4);
}

bool CheckTimes(int ai_0, int ai_4, int ai_8) {
   bool li_ret_12 = FALSE;
   if (ai_4 > 23 || ai_4 < 0) ai_4 = 0;
   if (ai_8 > 23 || ai_8 < 0) ai_8 = 0;
   if (ai_4 < ai_8 && (ai_0 >= ai_4 && ai_0 < ai_8)) li_ret_12 = TRUE;
   if (ai_4 > ai_8 && ai_0 >= ai_4 || ai_0 < ai_8) li_ret_12 = TRUE;
   return (li_ret_12);
}

int ClearBuffer(string as_0) {
   bool li_ret_12 = FALSE;
   if (as_0 == "ReceiveBuffer") {
      gda_1504[0][0] = 0;
      gda_1504[0][1] = 99;
      gda_1504[0][2] = 0;
      gda_1504[0][3] = 0;
      gda_1504[0][4] = 0;
      gda_1504[0][5] = 0;
   }
   if (as_0 == "CommandBuffer") {
      gda_1508[0][0] = 0;
      gda_1508[0][1] = 99;
      gda_1508[0][2] = 0;
      gda_1508[0][3] = 0;
      gda_1508[0][4] = 0;
      gda_1508[0][5] = 0;
      gda_1508[0][6] = 0;
      gda_1508[0][7] = 0;
   }
   if (as_0 == "VariablesBuffer") for (int l_index_16 = 0; l_index_16 < 7; l_index_16++) gsa_1768[l_index_16] = "";
   if (as_0 == "InformationBuffer") for (l_index_16 = 0; l_index_16 < 50; l_index_16++) gsa_1772[l_index_16] = "";
   if (as_0 == "LogFileBuffer") for (l_index_16 = 0; l_index_16 < 20; l_index_16++) gsa_1788[l_index_16] = "";
   if (as_0 == "ReportBuffer") for (l_index_16 = 0; l_index_16 < 30; l_index_16++) gda_1512[l_index_16] = 0.0;
   if (as_0 == "ErrorArray") for (l_index_16 = 0; l_index_16 < 4300; l_index_16++) gsa_1784[l_index_16] = "Íåïîíÿòíàÿ îøèáêà";
   if (as_0 == "LoadSettingsArray") for (int l_count_20 = 0; l_count_20 < 21; l_count_20++) for (l_index_16 = 0; l_index_16 < 150; l_index_16++) gsa_1776[l_index_16][l_count_20] = "0";
   if (as_0 == "SettingsArray") for (l_count_20 = 0; l_count_20 < 21; l_count_20++) for (l_index_16 = 0; l_index_16 < 150; l_index_16++) gsa_1780[l_index_16][l_count_20] = "0";
   return (li_ret_12);
}

bool isNoNews(int ai_0, int ai_4) {
   int l_file_12;
   int li_20;
   string ls_32;
   string ls_40;
   string ls_48;
   string ls_56;
   string ls_64;
   string ls_72;
   int li_80;
   int li_84;
   bool li_ret_8 = TRUE;
   bool li_16 = FALSE;
   string ls_24 = "";
   if (gi_892 && (ai_0 - gi_1672) / 60 - ai_4 >= 0 || ai_4 == 0) {
      if (ai_4 != 0) gi_1672 = ai_0;
      l_file_12 = FileOpen("news" + TimeMonth(ai_0 - 3600 * (TimeZone + gi_1356)) + TimeYear(ai_0 - 3600 * (TimeZone + gi_1356)) + ".csv", FILE_CSV|FILE_READ, ';');
      if (l_file_12 < 1) {
         if (!gi_1576) {
            gi_1576 = TRUE;
            if (ai_4 != 0) Comments(9, "isNoNews()", "Ôàéë íå îáíàðóæåí, îøèáêà : " + GetLastError(), "Error, no news file : " + GetLastError());
         }
      } else {
         gi_1576 = FALSE;
         while (!FileIsEnding(l_file_12)) {
            ls_32 = FileReadString(l_file_12);
            if (StringLen(ls_32) == 1) ls_40 = "0" + ls_32;
            else ls_40 = ls_32;
            ls_32 = FileReadString(l_file_12);
            if (StringLen(ls_32) == 1) ls_48 = "0" + ls_32;
            else ls_48 = ls_32;
            ls_56 = FileReadString(l_file_12);
            ls_32 = FileReadString(l_file_12);
            if (StrToInteger(ls_32) == 1) li_16 = TRUE;
            ls_32 = FileReadString(l_file_12);
            if (StringLen(ls_32) == 4) ls_64 = "0" + ls_32;
            else ls_64 = ls_32;
            li_20 = StrToTime(ls_56 + "." + ls_48 + "." + ls_40 + " " + ls_64) + 3600 * (TimeZone + gi_1356);
            ls_72 = FileReadString(l_file_12);
            ls_24 = FileReadString(l_file_12);
            li_80 = li_20 - 60 * gi_900;
            li_84 = li_20 + 60 * gi_904;
            if (ai_0 >= li_80 && ai_0 < li_84 && li_16 || (!li_16 && !gi_908) && (gi_912 && ls_72 == "ÑØÀ") || (gi_916 && ls_72 == "Ôðàí." || ls_72 == "Ãåðì." || ls_72 == "Èòàë." ||
               ls_72 == "ÅÑ") || (gi_920 && ls_72 == "Øâåéö.") || (gi_928 && ls_72 == "Âåëèêîá.") || (gi_924 && ls_72 == "ßïîí.") || (gi_932 && ls_72 == "Àâñòðàë.") || (gi_936 && ls_72 == "Í.Çåëàíä.") ||
               (gi_940 && ls_72 == "Êàíàäà")) {
               li_ret_8 = FALSE;
               if (!(!gi_1572)) break;
               gi_1572 = TRUE;
               if (ai_4 == 0) break;
               Comments(9, "isNoNews()", "Áëîêèðîâêà ïî íîâîñòÿì âêëþ÷åíà ñ " + TimeToStr(li_80, TIME_MINUTES) + " äî " + TimeToStr(li_84, TIME_MINUTES) + " GMT+2 (" + ls_72 + ")", "Trading blocked by news from " +
                  TimeToStr(li_80, TIME_MINUTES) + " till " + TimeToStr(li_84, TIME_MINUTES) + " GMT+2 (" + ls_72 + ")");
               break;
            }
         }
         FileClose(l_file_12);
      }
      if (li_ret_8 && gi_1572) {
         gi_1572 = FALSE;
         if (ai_4 != 0) Comments(9, "isNoNews()", "Áëîêèðîâêà ïî íîâîñòÿì âûêëþ÷åíà", "Trading allowed");
      }
   }
   return (li_ret_8);
}

int SetTimeSettings(int ai_0) {
   bool li_ret_4 = FALSE;
   for (int l_count_8 = 0; l_count_8 < 10; l_count_8++) {
      gia_1364[0][l_count_8] = 0;
      gia_1364[1][l_count_8] = 0;
      gia_1364[2][l_count_8] = 0;
      gia_1364[3][l_count_8] = 0;
      gia_1364[4][l_count_8] = 0;
   }
   if (gi_776 && ai_0 >= 0) {
      if (ai_0 > 99) ai_0 = 99;
      li_ret_4 = TRUE;
      if (li_ret_4) {
         for (l_count_8 = 0; l_count_8 < 10; l_count_8++) {
            gia_1364[0][l_count_8] = gia_1368[5 * ai_0 + 0][l_count_8];
            gia_1364[1][l_count_8] = gia_1368[5 * ai_0 + 1][l_count_8];
            gia_1364[2][l_count_8] = gia_1368[5 * ai_0 + 2][l_count_8];
            gia_1364[3][l_count_8] = gia_1368[5 * ai_0 + 3][l_count_8];
            gia_1364[4][l_count_8] = gia_1368[5 * ai_0 + 4][l_count_8];
         }
      }
   } else {
      gia_1364[0][0] = OpenHourAM;
      gia_1364[0][1] = CloseHourAM;
      gia_1364[0][2] = OpenHourPM;
      gia_1364[0][3] = CloseHourPM;
      gia_1364[1][0] = OpenHourAM;
      gia_1364[1][1] = CloseHourAM;
      gia_1364[1][2] = OpenHourPM;
      gia_1364[1][3] = CloseHourPM;
      gia_1364[2][0] = OpenHourAM;
      gia_1364[2][1] = CloseHourAM;
      gia_1364[2][2] = OpenHourPM;
      gia_1364[2][3] = CloseHourPM;
      gia_1364[3][0] = OpenHourAM;
      gia_1364[3][1] = CloseHourAM;
      gia_1364[3][2] = OpenHourPM;
      gia_1364[3][3] = CloseHourPM;
      gia_1364[4][0] = OpenHourAM;
      gia_1364[4][1] = CloseHourAM;
      gia_1364[4][2] = OpenHourPM;
      gia_1364[4][3] = CloseHourPM;
   }
   return (li_ret_4);
}

double GetLotValue(double ad_0, int ai_8) {
   double ld_12 = Lots;
   if (ai_8 != 0) ld_12 = gd_1400 * MathFloor((ad_0 - gd_112) * ai_8 / 100000.0 / gd_1400);
   ld_12 = CheckLotsLimits(ld_12);
   return (ld_12);
}

double CheckLotsLimits(double ad_0) {
   if (CheckFreeMargin && ad_0 / (AccountFreeMargin() / 100000.0) - 1.0 * MaxLotsPercent > 0.0) ad_0 = gd_1400 * MathFloor(AccountFreeMargin() * MaxLotsPercent / 100000.0 / gd_1400);
   if (!CheckFreeMargin && ad_0 / (AccountBalance() / 100000.0) - 1.0 * MaxLotsPercent > 0.0) ad_0 = gd_1400 * MathFloor(AccountBalance() * MaxLotsPercent / 100000.0 / gd_1400);
   if (CheckStopOutLevel && ad_0 / (AccountFreeMargin() / 100000.0) - 1.0 * gd_1416 > 0.0) ad_0 = gd_1400 * MathFloor(AccountFreeMargin() * gd_1416 / 100000.0 / gd_1400);
   if (ad_0 > gd_100) ad_0 = gd_100;
   if (ad_0 < gd_1408) ad_0 = gd_1408;
   return (ad_0);
}

double LotsForTrade() {
   double ld_ret_0;
   double ld_8;
   double ld_16;
   if (AccountFreeMarginCheck(Symbol(), OP_BUY, gd_1408) <= 0.0 || GetLastError() == 134/* NOT_ENOUGH_MONEY */) return ((-1.0 * gd_1408) * MarketInfo(Symbol(), MODE_MARGINREQUIRED));
   if (Lots != 0.0) ld_ret_0 = GetLotValue(AccountFreeMargin(), 0);
   else {
      if (CheckFreeMargin) ld_ret_0 = GetLotValue(AccountFreeMargin(), LotsPercent);
      else ld_ret_0 = GetLotValue(AccountBalance(), LotsPercent);
      if (SaveLotsValueAfterDD) ld_ret_0 = GetLotValue(g_global_var_1464, LotsPercent);
      if (RestoreDepoMode == 2 || (RestoreDepoMode == 1 && gi_1652)) {
         ld_8 = 0.0;
         ld_16 = 0.0;
         ld_8 = GetPointPrice("Symbol") * gd_1408;
         if (ld_8 == 0.0 || gi_288 == 0.0 || !g_str2int_284) {
            Comments(9, "LotsForTrade()", "Ðåæèì RestoreLostProfit âûêëþ÷åí: Íåäîñòàòî÷íî äàííûõ äëÿ ðàñ÷åòà", "RestoreLostProfit is disabled: no data");
            RestoreLostProfit = FALSE;
         } else {
            ld_16 = gd_1400 * MathFloor((g_global_var_1464 - AccountBalance()) / gi_288 / ld_8 * gd_1408 / gd_1400);
            if (ld_16 > ld_ret_0) ld_ret_0 = CheckLotsLimits(ld_16);
         }
      }
   }
   return (ld_ret_0);
}

string MarginControl(int ai_0) {
   double ld_12;
   double l_global_var_20;
   int l_mb_code_28;
   double ld_32;
   double ld_40;
   double ld_48;
   string ls_ret_4 = "";
   if (gi_1592) {
      gi_1592 = FALSE;
      if (!IsOptimization() && !IsTesting() && GlobalVariableCheck(g_var_name_1840)) {
         if (GlobalVariableGet(g_var_name_1840) > AccountBalance() && ResetMaxBalance) {
            if (Language == "eng") l_mb_code_28 = MessageBox("Reset variable MaxBalance = " + DoubleToStr(GlobalVariableGet(g_var_name_1840), 2) + AccountCurrency(), "Question", MB_YESNO|MB_ICONQUESTION);
            else l_mb_code_28 = MessageBox("Ñáðîñèòü ïåðåìåííóþ MaxBalance = " + DoubleToStr(GlobalVariableGet(g_var_name_1840), 2) + AccountCurrency(), "Question", MB_YESNO|MB_ICONQUESTION);
            if (l_mb_code_28 == IDYES) {
               GlobalVariableSet(g_var_name_1840, AccountBalance());
               Comments(9, "MarginControl()", "Óñòàíîâëåíî íîâîå çíà÷åíèå MaxBalance = " + DoubleToStr(GlobalVariableGet(g_var_name_1840), 2) + AccountCurrency(), "New MaxBalance value = " +
                  DoubleToStr(GlobalVariableGet(g_var_name_1840), 2) + AccountCurrency());
            } else {
               Comments(9, "MarginControl()", "Çíà÷åíèå MaxBalance = " + DoubleToStr(GlobalVariableGet(g_var_name_1840), 2) + AccountCurrency(), "MaxBalance value = " + DoubleToStr(GlobalVariableGet(g_var_name_1840), 2) +
                  AccountCurrency());
            }
         } else {
            Comments(9, "MarginControl()", "Çíà÷åíèå MaxBalance = " + DoubleToStr(GlobalVariableGet(g_var_name_1840), 2) + AccountCurrency(), "MaxBalance value = " + DoubleToStr(GlobalVariableGet(g_var_name_1840), 2) +
               AccountCurrency());
         }
      } else {
         GlobalVariableSet(g_var_name_1840, AccountBalance());
         Comments(9, "MarginControl()", "Óñòàíîâëåíî íîâîå çíà÷åíèå MaxBalance = " + DoubleToStr(GlobalVariableGet(g_var_name_1840), 2) + AccountCurrency(), "New MaxBalance value = " +
            DoubleToStr(GlobalVariableGet(g_var_name_1840), 2) + AccountCurrency());
      }
      GlobalVariableSet(g_var_name_1848, GlobalVariableGet(g_var_name_1840));
   }
   if (!GlobalVariableCheck(g_var_name_1840) || !GlobalVariableCheck(g_var_name_1848)) {
      GlobalVariableSet(g_var_name_1840, AccountBalance());
      GlobalVariableSet(g_var_name_1848, AccountBalance());
      if (!GlobalVariableCheck(g_var_name_1840) || !GlobalVariableCheck(g_var_name_1848)) {
         Comments(9, "MarginControl()", "Îøèáêà ñîçäàíèÿ ãëîáàëüíûõ ïåðåìåííûõ MaxBalance: " + PrintError(GetLastError()), "Error set gobal variables MaxBalance: " + PrintError(GetLastError()));
         g_global_var_1464 = AccountBalance();
         l_global_var_20 = AccountBalance();
      }
   } else {
      g_global_var_1464 = GlobalVariableGet(g_var_name_1840);
      l_global_var_20 = GlobalVariableGet(g_var_name_1848);
   }
   if (AccountBalance() > g_global_var_1464) {
      gi_1580 = FALSE;
      g_global_var_1464 = AccountBalance();
      GlobalVariableSet(g_var_name_1840, g_global_var_1464);
   }
   if (RestoreLostProfit && ai_0 > 0) {
      ld_40 = GetLotValue(l_global_var_20, LotsPercent);
      ld_48 = GetPointPrice("Symbol");
      ld_32 = ld_48 * ld_40;
      ld_12 = l_global_var_20 + ld_32 * AverageTradeProfit;
      if (g_global_var_1464 < ld_12) {
         g_global_var_1464 = ld_12;
         GlobalVariableSet(g_var_name_1840, g_global_var_1464);
      }
      GlobalVariableSet(g_var_name_1848, g_global_var_1464);
   }
   if (AccountBalance() < g_global_var_1464) {
      if (DDSensitivity > 0.0) {
         if (100.0 * (g_global_var_1464 - AccountBalance()) / (g_global_var_1464 - gd_112) > DDSensitivity) {
            gi_1580 = TRUE;
            if (BlockTradesAfterDD) gi_1560 = TRUE;
         }
      } else {
         if (DDSensitivity == 0.0) {
            if (100.0 * (g_global_var_1464 - AccountBalance()) / (g_global_var_1464 - gd_112) > MathRound(LotsPercent / 4)) {
               gi_1580 = TRUE;
               if (BlockTradesAfterDD) gi_1560 = TRUE;
            }
         } else gi_1580 = TRUE;
      }
   }
   ls_ret_4 = ", MaxBalance=" + DoubleToStr(GlobalVariableGet(g_var_name_1840), 2) + " " + AccountCurrency();
   return (ls_ret_4);
}

int TimeProfit() {
   int li_4 = TimeCurrent() - g_datetime_1676;
   if (g_str2int_552) {
      if (li_4 >= 60 * g_str2int_588) return (gi_592 - gi_1112 + gi_1140);
      if (li_4 >= 60 * g_str2int_580) return (gi_584 - gi_1112 + gi_1140);
      if (li_4 >= 60 * g_str2int_572) return (gi_576 - gi_1112 + gi_1140);
      if (li_4 >= 60 * g_str2int_564) return (gi_568 - gi_1112 + gi_1140);
      if (li_4 >= 60 * g_str2int_556) return (gi_560 - gi_1112 + gi_1140);
   }
   return (gi_288 - gi_1112 + gi_1140);
}

int isRSItoOpen(int ai_0) {
   bool li_ret_4 = FALSE;
   if (g_period_612 == 0 || g_period_640 == 0 || g_period_648 == 0) return (li_ret_4);
   double l_irsi_8 = iRSI(NULL, g_timeframe_608, g_period_612, g_applied_price_616, 0);
   double l_irsi_16 = iRSI(NULL, g_timeframe_636, g_period_640, g_applied_price_644, 0);
   double l_irsi_24 = iRSI(NULL, g_timeframe_620, g_period_624, g_applied_price_628, gi_632);
   double ld_32 = iMA(NULL, 0, g_period_648, 0, g_ma_method_660, g_applied_price_664, gi_668);
   double ld_40 = ld_32;
   double l_price_48 = Ask;
   double l_price_56 = Bid;
   if (g_str2int_672 == 1) l_price_48 = Bid;
   if (g_str2int_672 == 2) l_price_56 = Ask;
   if (g_str2int_468 == 1) {
      ld_32 = MathRound(ld_32 / Point) * Point;
      ld_40 = MathRound(ld_40 / Point) * Point;
   }
   if (g_str2int_468 == 2) {
      ld_32 = MathCeil(ld_32 / Point) * Point;
      ld_40 = MathFloor(ld_40 / Point) * Point;
   }
   if (g_str2int_468 == 3) {
      ld_32 = MathFloor(ld_32 / Point) * Point;
      ld_40 = MathCeil(ld_40 / Point) * Point;
   }
   if (l_irsi_8 < g_str2dbl_676 || l_irsi_16 < g_str2int_708 && ld_32 >= l_price_48 + gd_652 * Point)
      if (gi_1348 == 1 || gi_1348 == 99 && ai_0 == 0) li_ret_4 = TRUE;
   if (l_irsi_8 > g_str2dbl_684 || l_irsi_16 > g_str2int_712 && ld_40 <= l_price_56 - gd_652 * Point)
      if (gi_1348 == 0 || gi_1348 == 99 && ai_0 == 1) li_ret_4 = TRUE;
   if (l_irsi_24 < g_str2dbl_700 && l_irsi_24 > g_str2dbl_692 && g_str2int_604) gi_1348 = 99;
   return (li_ret_4);
}

bool isVolatilitytoTrade() {
   bool li_ret_0 = TRUE;
   if (g_str2int_724) {
      if (iOpen(Symbol(), PERIOD_M5, 0) >= Ask + gd_732 * Point) li_ret_0 = FALSE;
      if (iOpen(Symbol(), PERIOD_M5, 0) <= Bid - gd_732 * Point) li_ret_0 = FALSE;
      if (iOpen(Symbol(), PERIOD_M5, 1) >= Ask + gd_740 * Point) li_ret_0 = FALSE;
      if (iOpen(Symbol(), PERIOD_M5, 1) <= Bid - gd_740 * Point) li_ret_0 = FALSE;
      if (iOpen(Symbol(), PERIOD_M5, 2) >= Ask + gd_748 * Point) li_ret_0 = FALSE;
      if (iOpen(Symbol(), PERIOD_M5, 2) <= Bid - gd_748 * Point) li_ret_0 = FALSE;
   }
   if (!li_ret_0) {
      if (gi_728) g_bars_1360 = Bars;
   } else
      if (g_bars_1360 == Bars) li_ret_0 = FALSE;
   return (li_ret_0);
}

int ChannelProfit() {
   bool li_ret_0 = FALSE;
   int l_cmd_4 = OrderType();
   int li_8 = g_str2int_388;
   bool l_str2int_12 = g_str2int_432;
   int li_16 = gi_404;
   double ld_20 = High[iHighest(NULL, 0, MODE_HIGH, li_8, 1)] + Point * li_16;
   double ld_28 = Low[iLowest(NULL, 0, MODE_LOW, li_8, 1)] - Point * li_16;
   if (gi_1136 == 10) {
      if (g_str2int_412 == 1) {
         ld_20 = MathRound(ld_20 / Point / gi_1136) * Point * gi_1136;
         ld_28 = MathRound(ld_28 / Point / gi_1136) * Point * gi_1136;
      }
      if (g_str2int_412 == 2) {
         ld_20 = MathFloor(ld_20 / Point / gi_1136) * Point * gi_1136;
         ld_28 = MathCeil(ld_28 / Point / gi_1136) * Point * gi_1136;
      }
      if (g_str2int_412 == 3) {
         ld_20 = MathCeil(ld_20 / Point / gi_1136) * Point * gi_1136;
         ld_28 = MathFloor(ld_28 / Point / gi_1136) * Point * gi_1136;
      }
   }
   if (!l_str2int_12) {
      ld_20 += Point;
      ld_28 -= Point;
   }
   if (l_cmd_4 == OP_BUY) li_ret_0 = MathRound((ld_20 - OrderOpenPrice()) / Point);
   if (l_cmd_4 == OP_SELL) {
      li_ret_0 = MathRound((OrderOpenPrice() - ld_28 - MarketInfo(Symbol(), MODE_SPREAD) * Point) / Point);
      if (!gi_1092) li_ret_0 = MathRound((OrderOpenPrice() - ld_28 - gi_256 * Point) / Point);
   }
   return (li_ret_0);
}

double TrailingTP() {
   int li_12;
   int li_16;
   int li_24;
   int li_28;
   int li_32;
   double ld_36;
   double ld_44;
   double ld_52;
   double ld_4 = 0.0;
   if (gi_184 != 0 && g_str2int_284 || g_str2int_388 != 0) {
      li_12 = MathRound(MarketInfo(Symbol(), MODE_STOPLEVEL));
      li_16 = MathRound(MarketInfo(Symbol(), MODE_FREEZELEVEL));
      li_24 = li_12 + li_16;
      if (!gi_192) {
         if (OrderTakeProfit() == 0.0) ld_4 = 1.0 * gi_184;
      } else {
         if (g_str2int_388 != 0) li_32 = ChannelProfit();
         else li_32 = 999;
         if (g_str2int_284) {
            li_28 = TimeProfit();
            if (!gi_1092) li_28 -= gi_1144;
            Comments(6, "", " NeedProfit=" + li_28 + " ChannelProfitValue=" + li_32, "");
            if (li_28 > li_32 && li_32 != 999) li_28 = li_32;
         } else li_28 = li_32;
         if (OrderType() == OP_BUY) {
            ld_44 = NormalizeDouble(OrderOpenPrice() + li_28 * Point, Digits);
            if (IncreaseFreezeLevel) ld_36 = NormalizeDouble(Ask + li_12 * Point + li_16 * Point, Digits);
            else ld_36 = NormalizeDouble(Ask + li_12 * Point, Digits);
            if (OrderTakeProfit() == 0.0) {
               ld_52 = NormalizeDouble(ld_44 + li_16 * Point, Digits);
               if (ld_52 < ld_36) ld_52 = ld_36;
               if (ld_52 < ld_44) ld_52 = ld_44;
               ld_4 = (ld_52 - OrderOpenPrice()) / Point;
            } else
               if (MathRound(10000.0 * OrderTakeProfit()) - MathRound(10000.0 * ld_44) != 0.0 && MathRound(10000.0 * ld_44) > MathRound(10000.0 * ld_36)) ld_4 = 1.0 * li_28;
         }
         if (OrderType() == OP_SELL) {
            ld_44 = NormalizeDouble(OrderOpenPrice() - li_28 * Point, Digits);
            if (IncreaseFreezeLevel) ld_36 = NormalizeDouble(Bid - li_12 * Point - li_16 * Point, Digits);
            else ld_36 = NormalizeDouble(Bid - li_12 * Point, Digits);
            if (OrderTakeProfit() == 0.0) {
               ld_52 = NormalizeDouble(ld_44 - li_16 * Point, Digits);
               if (ld_52 > ld_36) ld_52 = ld_36;
               if (ld_52 > ld_44) ld_52 = ld_44;
               ld_4 = (OrderOpenPrice() - ld_52) / Point;
            } else
               if (MathRound(10000.0 * OrderTakeProfit()) - MathRound(10000.0 * ld_44) != 0.0 && MathRound(10000.0 * ld_44) < MathRound(10000.0 * ld_36)) ld_4 = 1.0 * li_28;
         }
      }
   }
   ld_4 = MathRound(ld_4);
   return (ld_4);
}

int deinit() {
   int l_file_8;
   double ld_12;
   double ld_20;
   string ls_0 = gs_1800;
   SaveCommentsFile("deinit");
   if (gi_1012) Print("SysSpeed:  min=" + gi_1332 + "  average=" + DoubleToStr(gd_1384 / (1.0 * g_count_1340), 0) + "  max=" + gi_1336);
   if (!gi_1016) return (0);
   if (IsOptimization() || IsTesting()) {
      GlobalVariableSet(g_var_name_1856, 0.0);
      ld_12 = MathRound(GetTickCount() / 100);
      ld_20 = GlobalVariableGet("OptCounter");
      if (gi_1648) ld_20 = 1.0;
      else ld_20 += 1.0;
      GlobalVariableSet("OptCounter", ld_20);
      GlobalVariableSet("LastOptTime", ld_12);
      if (gi_1648 && gi_1032) l_file_8 = FileOpen(ls_0 + ".csv", FILE_CSV|FILE_WRITE, ';');
      else l_file_8 = FileOpen(ls_0 + ".csv", FILE_CSV|FILE_WRITE|FILE_READ, ';');
      if (l_file_8 < 1) {
         Print("Íåâîçìîæíî çàïèñàòü äàííûå â ôàéë " + ls_0 + ".csv, îøèáêà: ", GetLastError());
         return (0);
      }
      FileSeek(l_file_8, 0, SEEK_END);
      FillReportBuffer();
      if (gi_1648) {
         if (IsTesting() && !IsOptimization()) FileWrite(l_file_8, "Testing " + WindowExpertName() + " " + gs_1752 + " M" + Period());
         if (IsOptimization()) FileWrite(l_file_8, "Optimization " + WindowExpertName() + " " + gs_1752 + " M" + Period());
         FileWrite(l_file_8, "¹", "ValProfitTotal", "ValNetProfit", "ValNetLoss", "ValProfitFactor", "ValAverProfit", "ValAverLoss", "PntProfitTotal", "PntNetProfit", "PntNetLoss", "PntProfitFactor", "PntAverProfit", "PntAverLoss", "TrdTotal", "TrdNetProfit", "TrdNetLoss", "TrdProfitPercent", "TrdLossPercent", "TrdProfitFactor", "TrdSLNumber", "TrdTPNumber", "TrdHNumber");
      }
      FileWrite(l_file_8, DoubleToStr(ld_20, 0), " " + DoubleToStr(gda_1512[1], 2), " " + DoubleToStr(gda_1512[2], 2), " " + DoubleToStr(gda_1512[3], 2), " " + DoubleToStr(gda_1512[4], 2), " " +
         DoubleToStr(gda_1512[26], 2), " " + DoubleToStr(gda_1512[27], 2), " " + DoubleToStr(gda_1512[9], 0), " " + DoubleToStr(gda_1512[10], 0), " " + DoubleToStr(gda_1512[11], 0), " " + DoubleToStr(gda_1512[12], 2), " " + DoubleToStr(gda_1512[28], 1), " " + DoubleToStr(gda_1512[29], 1), " " + DoubleToStr(gda_1512[17], 0), " " + DoubleToStr(gda_1512[18], 0), " " + DoubleToStr(gda_1512[19], 0), " " + DoubleToStr(gda_1512[20], 1) + "%", " " + DoubleToStr(gda_1512[21], 1) + "%", " " + DoubleToStr(gda_1512[22], 2), " " + DoubleToStr(gda_1512[23], 0), " " + DoubleToStr(gda_1512[24], 0), " " + DoubleToStr(gda_1512[25], 0));
      FileClose(l_file_8);
   }
   return (0);
}

int FillReportBuffer() {
   int l_pos_0 = 0;
   double ld_12 = 0.0;
   int l_hist_total_8 = OrdersHistoryTotal();
   for (l_pos_0 = 0; l_pos_0 < l_hist_total_8; l_pos_0++) {
      OrderSelect(l_pos_0, SELECT_BY_POS, MODE_HISTORY);
      if (OrderSymbol() != Symbol() || OrderMagicNumber() != g_magic_1196) continue;
      gda_1512[17] += 1.0;
      gda_1512[1] += OrderProfit();
      if (ld_12 < gda_1512[1]) ld_12 = gda_1512[1];
      if (ld_12 > gda_1512[1])
         if (gda_1512[5] < ld_12 - MathAbs(gda_1512[1])) gda_1512[5] = ld_12 - MathAbs(gda_1512[1]);
      if (OrderProfit() >= 0.0) {
         gda_1512[9] += MathAbs((OrderOpenPrice() - OrderClosePrice()) / Point);
         gda_1512[10] += MathAbs((OrderOpenPrice() - OrderClosePrice()) / Point);
         if (gda_1512[15] < MathAbs((OrderOpenPrice() - OrderClosePrice()) / Point)) gda_1512[15] = MathAbs((OrderOpenPrice() - OrderClosePrice()) / Point);
         if (gda_1512[7] < OrderProfit()) gda_1512[7] = OrderProfit();
         gda_1512[2] += OrderProfit();
         gda_1512[18] += 1.0;
      } else {
         gda_1512[9] = gda_1512[9] - MathAbs((OrderOpenPrice() - OrderClosePrice()) / Point);
         gda_1512[11] = gda_1512[11] - MathAbs((OrderOpenPrice() - OrderClosePrice()) / Point);
         if (MathAbs(gda_1512[16]) < MathAbs((OrderOpenPrice() - OrderClosePrice()) / Point)) gda_1512[16] = -1.0 * MathAbs((OrderOpenPrice() - OrderClosePrice()) / Point);
         if (gda_1512[8] > OrderProfit()) gda_1512[8] = OrderProfit();
         gda_1512[3] += OrderProfit();
         gda_1512[19] += 1.0;
      }
   }
   if (gda_1512[17] != 0.0) gda_1512[20] = 100.0 * (gda_1512[18] / gda_1512[17]);
   if (gda_1512[17] != 0.0) gda_1512[21] = 100.0 * (gda_1512[19] / gda_1512[17]);
   if (gda_1512[3] != 0.0) gda_1512[4] = MathAbs(gda_1512[2] / gda_1512[3]);
   if (gda_1512[11] != 0.0) gda_1512[12] = MathAbs(gda_1512[10] / gda_1512[11]);
   if (gda_1512[19] != 0.0) gda_1512[22] = gda_1512[18] / gda_1512[19];
   if (gda_1512[18] > 0.0) gda_1512[26] = gda_1512[2] / gda_1512[18];
   if (gda_1512[19] > 0.0) gda_1512[27] = MathAbs(gda_1512[3] / gda_1512[19]);
   if (gda_1512[18] > 0.0) gda_1512[28] = gda_1512[10] / gda_1512[18];
   if (gda_1512[19] > 0.0) gda_1512[29] = MathAbs(gda_1512[11] / gda_1512[19]);
   return (0);
}

int CorrectGMTTime() {
   string ls_12;
   string l_name_20;
   string ls_28;
   int l_file_36;
   int l_str2time_80;
   string ls_84;
   bool li_ret_0 = FALSE;
   bool li_4 = FALSE;
   bool li_8 = FALSE;
   int li_48 = 99;
   int li_52 = 99;
   int l_str2int_56 = 99;
   int l_str2int_60 = 99;
   bool l_str2time_64 = FALSE;
   bool l_str2time_68 = FALSE;
   bool l_str2time_72 = FALSE;
   bool l_str2time_76 = FALSE;
   int l_count_40 = 51;
   while (l_count_40 > 0) {
      l_count_40--;
      if (l_count_40 == 0) ls_12 = "";
      else {
         if (l_count_40 > 9) ls_12 = l_count_40;
         else ls_12 = "0" + l_count_40;
      }
      l_name_20 = "gmtstd" + ls_12 + ".csv";
      l_file_36 = FileOpen(l_name_20, FILE_CSV|FILE_READ, ';');
      if (l_file_36 >= 0) break;
   }
   if (l_file_36 < 1) Comments(9, "CorrectGMTTime()", "Ôàéë íàñòðîåê ðàçíèö GMT íå çàãðóæåí, îøèáêà: " + PrintError(GetLastError()), "Can not load GMTSTD file, error: " + PrintError(GetLastError()));
   else {
      Comments(9, "CorrectGMTTime()", "Çàãðóæåí ôàéë íàñòðîåê ðàçíèö GMT (" + l_name_20 + ")", "GMTSTD file loaded (" + l_name_20 + ")");
      ls_12 = FileReadString(l_file_36);
      ls_12 = FileReadString(l_file_36);
      for (ls_12 = FileReadString(l_file_36); !FileIsEnding(l_file_36); ls_12 = FileReadString(l_file_36)) {
         ls_12 = FileReadString(l_file_36);
         if (AccountCompany() == ls_12) {
            l_str2int_56 = StrToInteger(FileReadString(l_file_36));
            l_str2int_60 = StrToInteger(FileReadString(l_file_36));
            li_4 = TRUE;
            break;
         }
         ls_12 = FileReadString(l_file_36);
      }
      FileClose(l_file_36);
   }
   if (!li_4) Comments(9, "CorrectGMTTime()", "Íàñòðîéêè ðàçíèöû GMT â ôàëå " + l_name_20 + " äëÿ äàííîãî áðîêåðà îòñóòñòâóþò", "No GMTSTD settings for this brocker");
   int l_shift_44 = iBarShift(gs_1880 + "GBPUSD" + gs_1888, PERIOD_H1, D'24.10.2008 04:00', TRUE);
   if (l_shift_44 >= 240) {
      for (l_count_40 = 2; l_count_40 < 14; l_count_40++) {
         if (l_count_40 < 10) ls_28 = "0" + l_count_40;
         else ls_28 = l_count_40;
         l_str2time_80 = StrToTime("2008.10.24 " + ls_28 + ":00");
         l_shift_44 = iBarShift(gs_1880 + "GBPUSD" + gs_1888, PERIOD_H1, l_str2time_80);
         if (iHigh(gs_1880 + "GBPUSD" + gs_1888, PERIOD_H1, l_shift_44) > 1.562 && iLow(gs_1880 + "GBPUSD" + gs_1888, PERIOD_H1, l_shift_44) < 1.562) {
            l_str2time_64 = l_str2time_80;
            li_48 = l_count_40 - 8;
            break;
         }
      }
      if (l_str2time_64 == 0) {
      }
      for (l_count_40 = 0; l_count_40 < 12; l_count_40++) {
         if (l_count_40 < 10) ls_28 = "0" + l_count_40;
         else ls_28 = l_count_40;
         l_str2time_80 = StrToTime("2008.10.27 " + ls_28 + ":00");
         l_shift_44 = iBarShift(gs_1880 + "GBPUSD" + gs_1888, PERIOD_H1, l_str2time_80);
         if (iHigh(gs_1880 + "GBPUSD" + gs_1888, PERIOD_H1, l_shift_44) > 1.55 && iLow(gs_1880 + "GBPUSD" + gs_1888, PERIOD_H1, l_shift_44) < 1.55) {
            l_str2time_68 = l_str2time_80;
            break;
         }
      }
      if (l_str2time_68 == 0) {
      }
      for (l_count_40 = 6; l_count_40 < 18; l_count_40++) {
         if (l_count_40 < 10) ls_28 = "0" + l_count_40;
         else ls_28 = l_count_40;
         l_str2time_80 = StrToTime("2008.11.03 " + ls_28 + ":00");
         l_shift_44 = iBarShift(gs_1880 + "GBPUSD" + gs_1888, PERIOD_H1, l_str2time_80);
         if (iHigh(gs_1880 + "GBPUSD" + gs_1888, PERIOD_H1, l_shift_44) > 1.607 && iLow(gs_1880 + "GBPUSD" + gs_1888, PERIOD_H1, l_shift_44) < 1.607) {
            l_str2time_72 = l_str2time_80;
            break;
         }
      }
      if (l_str2time_72 == 0) {
      }
      for (l_count_40 = 8; l_count_40 < 20; l_count_40++) {
         if (l_count_40 < 10) ls_28 = "0" + l_count_40;
         else ls_28 = l_count_40;
         l_str2time_80 = StrToTime("2008.11.05 " + ls_28 + ":00");
         l_shift_44 = iBarShift(gs_1880 + "GBPUSD" + gs_1888, PERIOD_H1, l_str2time_80);
         if (iHigh(gs_1880 + "GBPUSD" + gs_1888, PERIOD_H1, l_shift_44) > 1.61 && iLow(gs_1880 + "GBPUSD" + gs_1888, PERIOD_H1, l_shift_44) < 1.61) {
            l_str2time_76 = l_str2time_80;
            break;
         }
      }
      if (l_str2time_76 == 0) {
      }
      if (TimeHour(l_str2time_68) - TimeHour(l_str2time_64) == -2) {
         li_52 = 0;
         li_8 = TRUE;
      } else {
         if (TimeHour(l_str2time_68) - TimeHour(l_str2time_64) == -1) {
            if (TimeHour(l_str2time_72) - TimeHour(l_str2time_68) == 5) {
               li_52 = 1;
               li_8 = TRUE;
            } else {
               if (TimeHour(l_str2time_72) - TimeHour(l_str2time_68) == 6) {
                  if (TimeHour(l_str2time_76) - TimeHour(l_str2time_72) == 2) {
                     li_52 = 2;
                     li_8 = TRUE;
                  } else {
                     if (TimeHour(l_str2time_76) - TimeHour(l_str2time_72) == TRUE) {
                        li_52 = 3;
                        li_8 = TRUE;
                     }
                  }
               }
            }
         }
      }
   }
   if (UseAutoTimeSettings) {
      ls_84 = "";
      if (li_4) {
         if (li_8) {
            if (l_str2int_56 == li_48 && l_str2int_60 == li_52) Comments(9, "GMTAutoDetection()", "Çàãðóæåííàÿ ðàçíèöà ñ GMT ïðîâåðåíà", "GMT difference checked");
            else {
               if (li_48 >= 0) ls_84 = "+";
               Comments(9, "CorrectGMTTime()", "Ðàñ÷åòíûå íàñòðîéêè âðåìåíè íå ñîâïàäàþò ñ çàãðóæåííûìè: GMT" + ls_84 + li_48 + " (SWCM" + li_52 + ")", "Calculated and loaded times settings are not the same : GMT" +
                  ls_84 + li_48 + " (SWCM" + li_52 + ")");
            }
         } else Comments(9, "GMTAutoDetection()", "Íåâîçìîæíî ïðîâåðèòü çàãðóæåííóþ ðàçíèöó ñ GMT: Íåäîñòàò÷íî áàðîâ èñòîðèè ïî GBPUSD", "Can not check GMT difference: No GBPUSD history data");
         ls_84 = "";
         TimeZone = l_str2int_56;
         SWChangeMode = l_str2int_60;
         if (TimeZone >= 0) ls_84 = "+";
         Comments(9, "CorrectGMTTime()", "Óñòàíîâëåíû çàãðóæåííûå íàñòðîéêè âðåìåíè: GMT" + ls_84 + TimeZone + " (SWCM" + SWChangeMode + ")", "Loaded times settings: GMT" +
            ls_84 + TimeZone + " (SWCM" + SWChangeMode + ")");
      } else {
         if (li_8) {
            TimeZone = li_48;
            SWChangeMode = li_52;
            if (TimeZone >= 0) ls_84 = "+";
            Comments(9, "CorrectGMTTime()", "Óñòàíîâëåíû ðàñ÷åòíûå íàñòðîéêè âðåìåíè: GMT" + ls_84 + TimeZone + " (SWCM" + SWChangeMode + ")", "Calculated times settings: GMT" +
               ls_84 + TimeZone + " (SWCM" + SWChangeMode + ")");
         } else {
            if (TimeZone >= 0) ls_84 = "+";
            Comments(9, "CorrectGMTTime()", "Óñòàíîâëåíû ïðåäóñòàíîâëåííûå íàñòðîéêè âðåìåíè: GMT" + ls_84 + TimeZone + " (SWCM" + SWChangeMode + ")", "Loaded default times settings: GMT" +
               ls_84 + TimeZone + " (SWCM" + SWChangeMode + ")");
         }
      }
   } else {
      if (TimeZone >= 0) ls_84 = "+";
      Comments(9, "CorrectGMTTime()", "Óñòàíîâëåíû ïðåäóñòàíîâëåííûå íàñòðîéêè âðåìåíè: GMT" + ls_84 + TimeZone + " (SWCM" + SWChangeMode + ")", "Loaded default times settings: GMT" +
         ls_84 + TimeZone + " (SWCM" + SWChangeMode + ")");
   }
   return (li_ret_0);
}

int LoadSettings() {
   int li_ret_0 = LoadSettingsFile();
   if (li_ret_0 > 0) EncodeSettings(li_ret_0);
   gi_1352 = li_ret_0;
   Comments(9, "LoadSettings()", "Èíèöèàëèçèðîâàíî íàñòðîåê: " + gi_1352, "Settings total: " + gi_1352);
   return (li_ret_0);
}

int SetSettings(int ai_0, bool ai_4) {
   int li_ret_8 = -1;
   int li_12 = -1;
   if (ai_0 == 0) return (li_ret_8);
   if (ai_0 > gi_1352) {
      if (ai_4) Comments(9, "SetMode()", "Îøèáêà óñòàíîâêè íàñòðîåê: íåñóùåñòâóþèé ðåæèì", "Error load settings: unknown settings");
      return (li_ret_8);
   }
   li_12++;
   gs_1744 = gsa_1780[li_12][ai_0];
   li_12++;
   g_str2int_176 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12 += gi_1232;
   gi_180 = StrToInteger(gsa_1780[li_12][ai_0]) * gi_1136;
   li_12 = li_12 + gi_1236 - gi_1232;
   li_12 += gi_1232;
   gi_184 = StrToInteger(gsa_1780[li_12][ai_0]) * gi_1136;
   li_12 = li_12 + gi_1236 - gi_1232;
   li_12++;
   if (AverageTradeProfit == 0) AverageTradeProfit = StrToInteger(gsa_1780[li_12][ai_0]) * gi_1136;
   li_12++;
   g_str2int_196 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   g_str2int_200 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   g_str2int_204 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   g_str2int_220 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   g_str2int_224 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   g_str2int_228 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   g_str2int_232 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   g_str2int_236 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   gi_240 = StrToInteger(gsa_1780[li_12][ai_0]) * gi_1136;
   li_12++;
   gi_244 = StrToInteger(gsa_1780[li_12][ai_0]) * gi_1136;
   li_12++;
   li_12++;
   if (OrderOpenSlippage == 0) OrderOpenSlippage = StrToInteger(gsa_1780[li_12][ai_0]) * gi_1136;
   li_12++;
   if (OrderCloseSlippage == 0) OrderCloseSlippage = StrToInteger(gsa_1780[li_12][ai_0]) * gi_1136;
   li_12++;
   li_12 += gi_1232;
   gi_256 = StrToInteger(gsa_1780[li_12][ai_0]) * gi_1136;
   li_12 = li_12 + gi_1236 - gi_1232;
   li_12 += gi_1232;
   if (MaxSpreadValue == 0) MaxSpreadValue = StrToInteger(gsa_1780[li_12][ai_0]) * gi_1136;
   li_12 = li_12 + gi_1236 - gi_1232;
   li_12++;
   g_str2int_248 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   g_str2int_252 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   g_str2int_260 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   g_str2int_264 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   g_str2int_276 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   gi_280 = StrToInteger(gsa_1780[li_12][ai_0]) * gi_1136;
   li_12++;
   g_str2int_284 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12 += gi_1232;
   gi_288 = StrToInteger(gsa_1780[li_12][ai_0]) * gi_1136;
   li_12 = li_12 + gi_1236 - gi_1232;
   li_12++;
   g_str2int_292 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   g_str2int_296 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   gd_308 = StrToDouble(gsa_1780[li_12][ai_0]) * gi_1136;
   li_12++;
   g_str2int_316 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   g_str2int_320 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   gd_332 = StrToDouble(gsa_1780[li_12][ai_0]) * gi_1136;
   li_12++;
   g_str2int_340 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   gd_344 = StrToDouble(gsa_1780[li_12][ai_0]) * gi_1136;
   li_12++;
   g_str2int_352 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   g_str2int_356 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   g_str2int_360 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   g_str2int_372 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   g_str2int_376 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12 += gi_1232;
   g_str2int_380 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12 = li_12 + gi_1236 - gi_1232;
   li_12++;
   g_str2int_384 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12 += gi_1232;
   g_str2int_388 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12 = li_12 + gi_1236 - gi_1232;
   li_12 += gi_1232;
   g_str2int_392 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12 = li_12 + gi_1236 - gi_1232;
   li_12++;
   gi_396 = StrToInteger(gsa_1780[li_12][ai_0]) * gi_1136;
   li_12++;
   gi_400 = StrToInteger(gsa_1780[li_12][ai_0]) * gi_1136;
   li_12++;
   gi_404 = StrToInteger(gsa_1780[li_12][ai_0]) * gi_1136;
   li_12++;
   gi_408 = StrToInteger(gsa_1780[li_12][ai_0]) * gi_1136;
   li_12++;
   g_str2int_412 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   g_str2int_416 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   g_str2int_420 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   g_str2int_424 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   g_str2int_428 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   g_str2int_432 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   g_str2int_436 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12 += gi_1232;
   g_str2int_448 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12 = li_12 + gi_1236 - gi_1232;
   li_12 += gi_1232;
   gd_452 = StrToDouble(gsa_1780[li_12][ai_0]) * gi_1136;
   li_12 = li_12 + gi_1236 - gi_1232;
   li_12 += gi_1232;
   g_str2int_460 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12 = li_12 + gi_1236 - gi_1232;
   li_12 += gi_1232;
   g_str2int_464 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12 = li_12 + gi_1236 - gi_1232;
   li_12++;
   g_str2int_468 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   g_str2int_480 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   gd_484 = StrToDouble(gsa_1780[li_12][ai_0]) * gi_1136;
   li_12++;
   g_str2int_492 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   g_str2int_496 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   g_str2int_500 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   gd_512 = StrToDouble(gsa_1780[li_12][ai_0]) * gi_1136;
   li_12++;
   g_str2int_520 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   g_str2int_524 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   gd_528 = StrToDouble(gsa_1780[li_12][ai_0]) * gi_1136;
   li_12++;
   g_str2int_536 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   g_str2int_540 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   g_str2int_552 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   g_str2int_556 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   gi_560 = StrToInteger(gsa_1780[li_12][ai_0]) * gi_1136;
   li_12++;
   g_str2int_564 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   gi_568 = StrToInteger(gsa_1780[li_12][ai_0]) * gi_1136;
   li_12++;
   g_str2int_572 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   gi_576 = StrToInteger(gsa_1780[li_12][ai_0]) * gi_1136;
   li_12++;
   g_str2int_580 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   gi_584 = StrToInteger(gsa_1780[li_12][ai_0]) * gi_1136;
   li_12++;
   g_str2int_588 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   gi_592 = StrToInteger(gsa_1780[li_12][ai_0]) * gi_1136;
   li_12++;
   g_str2int_604 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   g_timeframe_608 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   g_period_612 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   g_applied_price_616 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   g_timeframe_620 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   g_period_624 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   g_applied_price_628 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   gi_632 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   g_timeframe_636 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   g_period_640 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   g_applied_price_644 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   g_period_648 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   gd_652 = StrToDouble(gsa_1780[li_12][ai_0]) * gi_1136;
   li_12++;
   g_ma_method_660 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   g_applied_price_664 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   gi_668 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   g_str2int_672 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   g_str2dbl_676 = StrToDouble(gsa_1780[li_12][ai_0]);
   li_12++;
   g_str2dbl_684 = StrToDouble(gsa_1780[li_12][ai_0]);
   li_12++;
   g_str2dbl_692 = StrToDouble(gsa_1780[li_12][ai_0]);
   li_12++;
   g_str2dbl_700 = StrToDouble(gsa_1780[li_12][ai_0]);
   li_12++;
   g_str2int_708 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   g_str2int_712 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   g_str2int_724 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12++;
   gd_732 = StrToDouble(gsa_1780[li_12][ai_0]) * gi_1136;
   li_12++;
   gd_740 = StrToDouble(gsa_1780[li_12][ai_0]) * gi_1136;
   li_12++;
   gd_748 = StrToDouble(gsa_1780[li_12][ai_0]) * gi_1136;
   li_12 += gi_1232;
   g_str2int_832 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12 = li_12 + gi_1236 - gi_1232;
   li_12 += gi_1232;
   g_str2int_836 = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12 = li_12 + gi_1236 - gi_1232;
   li_12 += gi_1232;
   if (TimeRiskFactor == -1) TimeRiskFactor = StrToInteger(gsa_1780[li_12][ai_0]);
   li_12 = li_12 + gi_1236 - gi_1232;
   g_str2int_1380 = StrToInteger(gsa_1780[147][ai_0]);
   g_str2int_1376 = StrToInteger(gsa_1780[148][ai_0]);
   g_str2int_1372 = StrToInteger(gsa_1780[149][ai_0]);
   if (TimeRiskFactor >= 0) {
      gi_776 = TRUE;
      if (TimeRiskFactor > 22) TimeRiskFactor = 22;
      if (TimeRiskFactor == 0) {
         gi_784 = 0;
         gi_788 = 0;
      }
      if (TimeRiskFactor == 1) {
         gi_784 = 1;
         gi_788 = 0;
      }
      if (TimeRiskFactor == 2) {
         gi_784 = 1;
         gi_788 = 1;
      }
      if (TimeRiskFactor == 3) {
         gi_784 = 2;
         gi_788 = 0;
      }
      if (TimeRiskFactor == 4) {
         gi_784 = 2;
         gi_788 = 1;
      }
      if (TimeRiskFactor == 5) {
         gi_784 = 2;
         gi_788 = 2;
      }
      if (TimeRiskFactor == 6) {
         gi_784 = 3;
         gi_788 = 0;
      }
      if (TimeRiskFactor == 7) {
         gi_784 = 3;
         gi_788 = 1;
      }
      if (TimeRiskFactor == 8) {
         gi_784 = 3;
         gi_788 = 3;
      }
      if (TimeRiskFactor == 9) {
         gi_784 = 4;
         gi_788 = 0;
      }
      if (TimeRiskFactor == 10) {
         gi_784 = 4;
         gi_788 = 1;
      }
      if (TimeRiskFactor == 11) {
         gi_784 = 4;
         gi_788 = 3;
      }
      if (TimeRiskFactor == 12) {
         gi_784 = 4;
         gi_788 = 2;
      }
      if (TimeRiskFactor == 13) {
         gi_784 = 4;
         gi_788 = 4;
      }
      if (TimeRiskFactor == 14) {
         gi_784 = 10;
         gi_788 = 10;
      }
      if (TimeRiskFactor == 15) {
         gi_784 = 8;
         gi_788 = 10;
      }
      if (TimeRiskFactor == 16) {
         gi_784 = 7;
         gi_788 = 10;
      }
      if (TimeRiskFactor == 17) {
         gi_784 = 6;
         gi_788 = 10;
      }
      if (TimeRiskFactor == 18) {
         gi_784 = 5;
         gi_788 = 10;
      }
      if (TimeRiskFactor == 19) {
         gi_784 = 8;
         gi_788 = 8;
      }
      if (TimeRiskFactor == 20) {
         gi_784 = 7;
         gi_788 = 8;
      }
      if (TimeRiskFactor == 21) {
         gi_784 = 6;
         gi_788 = 8;
      }
      if (TimeRiskFactor == 22) {
         gi_784 = 5;
         gi_788 = 8;
      }
   }
   if (!g_str2int_372) {
      g_str2int_380 = g_str2int_376;
      g_str2int_388 = g_str2int_376;
      g_str2int_392 = g_str2int_376;
   }
   li_ret_8 = ai_0;
   if (ai_4) Comments(9, "SetMode()", "Óñòàíîâëåíû íàñòðîéêè: " + gs_1744, "Load settings: " + gs_1744);
   return (li_ret_8);
}

int MakeTimeString() {
   bool li_24;
   bool li_ret_4 = FALSE;
   if (!gi_956 || !ShowTimes) return (li_ret_4);
   gs_1712 = "00 " + "01 " + "02 " + "03 " + "04 " + "05 " + "06 " + "07 " + "08 " + "09 " + "10 " + "11 " + "12 " + "13 " + "14 " + "15 " + "16 " + "17 " + "18 " + "19 " + "20 " + "21 " + "22 " + "23 " + "24 " 
   + "\n";
   int li_28 = TimeCurrent() - 86400 * DayOfWeek() - 3600 * Hour() - 60 * Minute() - Seconds() + 86400 + 1800;
   for (int li_8 = 1; li_8 < 6; li_8++) {
      gs_1712 = gs_1712 + " |";
      for (int l_count_20 = 0; l_count_20 < 24; l_count_20++) {
         for (int li_0 = 0; li_0 < 10; li_0 += 2) {
            li_24 = FALSE;
            if (isTimetoTrade(li_28)) {
               li_24 = TRUE;
               break;
            }
         }
         if (li_24) {
            if (isNoNews(li_28, 0)) gs_1712 = gs_1712 + ":::|";
            else gs_1712 = gs_1712 + "···|";
         } else gs_1712 = gs_1712 + "   |";
         li_28 += 3600;
      }
      gs_1712 = gs_1712 
      + "\n";
   }
   return (li_ret_4);
}

int MakeInitString() {
   if (!gi_956) return (0);
   gs_1704 = "";
   string ls_0 = " GMT";
   string ls_8 = "";
   if (TimeZone >= 0) ls_0 = ls_0 + "+" + TimeZone;
   else ls_0 = ls_0 + "" + TimeZone;
   if (gi_1356 > 0) ls_0 = ls_0 + " (Corr+" + gi_1356 + ")";
   if (gi_1356 < 0) ls_0 = ls_0 + " (Corr" + gi_1356 + ")";
   if (gi_1356 == 0) ls_0 = ls_0 + " (Corr " + gi_1356 + ")";
   gs_1704 = gs_1704 + AccountCompany() + " (" + AccountNumber()  + "): " + AccountName() + " (magic " + ((g_magic_1196 - gi_1220)) + "+" + gi_1220 + ")" + ls_0 + ls_8 
   + "\n";
   if (gi_860 && !gi_856) {
      gs_1704 = gs_1704 + "Ðåæèì ïåðåäà÷è äàííûõ" 
      + "\n";
   }
   if (!gi_860 && gi_856) {
      gs_1704 = gs_1704 + "Ðåæèì ïðèåìà äàííûõ" 
      + "\n";
   }
   return (0);
}

int Comments(int ai_0, string as_4, string as_12, string as_20) {
   if (Language == "eng") as_12 = as_20;
   bool li_ret_28 = FALSE;
   string ls_40 = "";
   if (ai_0 == 9) {
      if (gi_968) as_12 = as_4 + ": " + as_12;
      if (gi_992) {
         ls_40 = ls_40 + TimeToStr(TimeCurrent(), TIME_SECONDS) + " : ";
         if (gi_996) ls_40 = ls_40 + "euronis";
         if (gi_1000) ls_40 = ls_40 + "(" + g_magic_1196 + ")";
         if (gi_996 || gi_1000) ls_40 = ls_40 + ": ";
         Print(ls_40 + as_12);
      }
      ls_40 = "";
      if (gi_956) {
         if (ShowTimes) ls_40 = ls_40 + gs_1712;
         if (ShowInformation) {
            g_count_1328++;
            if (g_count_1328 > InformationStringNumber) {
               g_count_1328 = InformationStringNumber;
               if (InformationStringNumber > 1) for (int l_index_32 = 0; l_index_32 < InformationStringNumber - 1; l_index_32++) gsa_1772[l_index_32] = gsa_1772[l_index_32 + 1];
            }
            gsa_1772[g_count_1328 - 1] = TimeToStr(TimeCurrent(), TIME_SECONDS) + " : " + as_12;
            for (l_index_32 = 0; l_index_32 < InformationStringNumber; l_index_32++) {
               ls_40 = ls_40 + gsa_1772[l_index_32];
               if (l_index_32 < InformationStringNumber - 1) {
                  ls_40 = ls_40 
                  + "\n";
               }
            }
         }
         gs_1736 = ls_40;
         if (gi_972) {
            ls_40 = ls_40 
               + "\n" 
               + gsa_1768[0] 
               + "\n" 
               + gsa_1768[1] 
               + "\n" 
               + gsa_1768[2] 
               + "\n" 
               + gsa_1768[3] 
               + "\n" 
               + gsa_1768[4] 
               + "\n" 
               + gsa_1768[5] 
               + "\n" 
            + gsa_1768[6];
         }
         Comment(gs_1704 + gs_1824 + ls_40);
      }
      if (gi_988) {
         for (l_index_32 = 0; l_index_32 < 20; l_index_32++) {
            if (gsa_1788[l_index_32] == "") {
               gsa_1788[l_index_32] = TimeToStr(TimeCurrent(), TIME_SECONDS) + " : " + as_12;
               break;
            }
         }
      }
   }
   if (ai_0 == 0 || ai_0 == 1 || ai_0 == 2 || ai_0 == 3 || ai_0 == 4 || ai_0 == 5 || ai_0 == 6) {
      gsa_1768[ai_0] = as_12;
      if (gi_956) {
         ls_40 = gs_1736;
         if (gi_972) {
            ls_40 = ls_40 
               + "\n" 
               + gsa_1768[0] 
               + "\n" 
               + gsa_1768[1] 
               + "\n" 
               + gsa_1768[2] 
               + "\n" 
               + gsa_1768[3] 
               + "\n" 
               + gsa_1768[4] 
               + "\n" 
               + gsa_1768[5] 
               + "\n" 
            + gsa_1768[6];
         }
         Comment(gs_1704 + gs_1824 + ls_40);
      }
   }
   if (ai_0 == 7) {
      if (gi_956) {
         ls_40 = gs_1736;
         if (gi_972) {
            ls_40 = ls_40 
               + "\n" 
               + gsa_1768[0] 
               + "\n" 
               + gsa_1768[1] 
               + "\n" 
               + gsa_1768[2] 
               + "\n" 
               + gsa_1768[3] 
               + "\n" 
               + gsa_1768[4] 
               + "\n" 
               + gsa_1768[5] 
               + "\n" 
            + gsa_1768[6];
         }
         Comment(gs_1704 + gs_1824 + ls_40);
      }
   }
   return (li_ret_28);
}

string PrintError(int ai_0) {
   if (ai_0 > 4299 || ai_0 < 0) ai_0 = 4299;
   string ls_ret_4 = ai_0 + " " + gsa_1784[ai_0];
   return (ls_ret_4);
}

void InitErrorArray() {
   if (Language == "eng") {
      gsa_1784[0] = "No error returned";
      gsa_1784[1] = "No error returned, but the result is unknown";
      gsa_1784[2] = "Common error";
      gsa_1784[3] = "Invalid trade parameters";
      gsa_1784[4] = "Trade server is busy";
      gsa_1784[5] = "Old version of the client terminal";
      gsa_1784[6] = "No connection with trade server";
      gsa_1784[7] = "Not enough rights";
      gsa_1784[8] = "Too frequent requests";
      gsa_1784[9] = "Malfunctional trade operation";
      gsa_1784[64] = "Account disabled";
      gsa_1784[65] = "Invalid account";
      gsa_1784[128] = "Trade timeout";
      gsa_1784[129] = "Invalid price";
      gsa_1784[130] = "Invalid stops";
      gsa_1784[131] = "Invalid trade volume";
      gsa_1784[132] = "Market is closed";
      gsa_1784[133] = "Trade is disabled";
      gsa_1784[134] = "Not enough money";
      gsa_1784[135] = "Price changed";
      gsa_1784[136] = "Off quotes";
      gsa_1784[137] = "Broker is busy";
      gsa_1784[138] = "Requote";
      gsa_1784[139] = "Order is locked";
      gsa_1784[140] = "Long positions only allowed";
      gsa_1784[141] = "Too many requests";
      gsa_1784[145] = "Modification denied because an order is too close to market";
      gsa_1784[146] = "Trade context is busy";
      gsa_1784[147] = "Expirations are denied by broker";
      gsa_1784[148] = "The amount of opened and pending orders has reached the limit set by a broker";
      gsa_1784[4000] = "No error";
      gsa_1784[4001] = "Wrong function pointer";
      gsa_1784[4002] = "Array index is out of range";
      gsa_1784[4003] = "No memory for function call stack";
      gsa_1784[4004] = "Recursive stack overflow";
      gsa_1784[4005] = "Íà ñòåêå íåò ïàìÿòè äëÿ ïåðåäà÷è ïàðàìåòðîâ";
      gsa_1784[4006] = "Not enough stack for parameter";
      gsa_1784[4007] = "No memory for parameter string";
      gsa_1784[4008] = "Not initialized string";
      gsa_1784[4009] = "Not initialized string in an array";
      gsa_1784[4010] = "No memory for an array string";
      gsa_1784[4011] = "Too long string";
      gsa_1784[4012] = "Remainder from zero divide";
      gsa_1784[4013] = "Zero divide";
      gsa_1784[4014] = "Unknown command";
      gsa_1784[4015] = "Wrong jump";
      gsa_1784[4016] = "Not initialized array";
      gsa_1784[4017] = "DLL calls are not allowed";
      gsa_1784[4018] = "Cannot load library";
      gsa_1784[4019] = "Cannot call function";
      gsa_1784[4020] = "EA function calls are not allowed";
      gsa_1784[4021] = "Not enough memory for a string returned from a function";
      gsa_1784[4022] = "System is busy";
      gsa_1784[4050] = "Invalid function parameters count";
      gsa_1784[4051] = "Invalid function parameter value";
      gsa_1784[4052] = "String function internal error";
      gsa_1784[4053] = "Some array error";
      gsa_1784[4054] = "Incorrect series array using";
      gsa_1784[4055] = "Custom indicator error";
      gsa_1784[4056] = "Arrays are incompatible";
      gsa_1784[4057] = "Global variables processing error";
      gsa_1784[4058] = "Global variable not found";
      gsa_1784[4059] = "Function is not allowed in testing mode";
      gsa_1784[4060] = "Function is not confirmed";
      gsa_1784[4061] = "Mail sending error";
      gsa_1784[4062] = "String parameter expected";
      gsa_1784[4063] = "Integer parameter expected";
      gsa_1784[4064] = "Double parameter expected";
      gsa_1784[4065] = "Array as parameter expected";
      gsa_1784[4066] = "Requested history data in updating state";
      gsa_1784[4067] = "Some error in trade operation execution";
      gsa_1784[4099] = "End of a file";
      gsa_1784[4100] = "Some file error";
      gsa_1784[4101] = "Wrong file name";
      gsa_1784[4102] = "Too many opened files";
      gsa_1784[4103] = "Cannot open file";
      gsa_1784[4104] = "Incompatible access to a file";
      gsa_1784[4105] = "No order selected";
      gsa_1784[4106] = "Unknown symbol";
      gsa_1784[4107] = "Invalid price";
      gsa_1784[4108] = "Invalid ticket";
      gsa_1784[4109] = "Trade is not allowed";
      gsa_1784[4110] = "Longs are not allowed";
      gsa_1784[4111] = "Shorts are not allowed";
      gsa_1784[4200] = "Object already exists";
      gsa_1784[4201] = "Unknown object property";
      gsa_1784[4202] = "Object does not exist";
      gsa_1784[4203] = "Unknown object type";
      gsa_1784[4204] = "No object name";
      gsa_1784[4205] = "Object coordinates error";
      gsa_1784[4206] = "No specified subwindow";
      gsa_1784[4207] = "Some error in object operation";
      gsa_1784[4299] = "Error code is out of range";
      return;
   }
   gsa_1784[0] = "Íåò îøèáêè";
   gsa_1784[1] = "Íåò îøèáêè, íî ðåçóëüòàò íåèçâåñòåí";
   gsa_1784[2] = "Îáùàÿ îøèáêà";
   gsa_1784[3] = "Íåïðàâèëüíûå ïàðàìåòðû";
   gsa_1784[4] = "Òîðãîâûé ñåðâåð çàíÿò";
   gsa_1784[5] = "Ñòàðàÿ âåðñèÿ êëèåíòñêîãî òåðìèíàëà";
   gsa_1784[6] = "Íåò ñâÿçè ñ òîðãîâûì ñåðâåðîì";
   gsa_1784[7] = "Íåäîñòàòî÷íî ïðàâ";
   gsa_1784[8] = "Ñëèøêîì ÷àñòûå çàïðîñû";
   gsa_1784[9] = "Íåäîïóñòèìàÿ îïåðàöèÿ íàðóøàþùàÿ ôóíêöèîíèðîâàíèå ñåðâåðà";
   gsa_1784[64] = "Ñ÷åò çàáëîêèðîâàí";
   gsa_1784[65] = "Íåïðàâèëüíûé íîìåð ñ÷åòà";
   gsa_1784[128] = "Èñòåê ñðîê îæèäàíèÿ ñîâåðøåíèÿ ñäåëêè";
   gsa_1784[129] = "Íåïðàâèëüíàÿ öåíà";
   gsa_1784[130] = "Íåïðàâèëüíûå ñòîïû";
   gsa_1784[131] = "Íåïðàâèëüíûé îáúåì";
   gsa_1784[132] = "Ðûíîê çàêðûò";
   gsa_1784[133] = "Òîðãîâëÿ çàïðåùåíà";
   gsa_1784[134] = "Íåäîñòàòî÷íî äåíåã äëÿ ñîâåðøåíèÿ îïåðàöèè";
   gsa_1784[135] = "Öåíà èçìåíèëàñü";
   gsa_1784[136] = "Íåò öåí";
   gsa_1784[137] = "Áðîêåð çàíÿò";
   gsa_1784[138] = "Íîâûå öåíû";
   gsa_1784[139] = "Îðäåð çàáëîêèðîâàí è óæå îáðàáàòûâàåòñÿ";
   gsa_1784[140] = "Ðàçðåøåíà òîëüêî ïîêóïêà";
   gsa_1784[141] = "Ñëèøêîì ìíîãî çàïðîñîâ";
   gsa_1784[145] = "Ìîäèôèêàöèÿ çàïðåùåíà, òàê êàê îðäåð ñëèøêîì áëèçîê ê ðûíêó";
   gsa_1784[146] = "Ïîäñèñòåìà òîðãîâëè çàíÿòà";
   gsa_1784[147] = "Èñïîëüçîâàíèå äàòû èñòå÷åíèÿ îðäåðà çàïðåùåíî áðîêåðîì";
   gsa_1784[148] = "Êîëè÷åñòâî îòêðûòûõ è îòëîæåííûõ îðäåðîâ äîñòèãëî ïðåäåëà, óñòàíîâëåííîãî áðîêåðîì";
   gsa_1784[4000] = "Íåò îøèáêè";
   gsa_1784[4001] = "Íåïðàâèëüíûé óêàçàòåëü ôóíêöèè";
   gsa_1784[4002] = "Èíäåêñ ìàññèâà - âíå äèàïàçîíà";
   gsa_1784[4003] = "Íåò ïàìÿòè äëÿ ñòåêà ôóíêöèé";
   gsa_1784[4004] = "Ïåðåïîëíåíèå ñòåêà ïîñëå ðåêóðñèâíîãî âûçîâà";
   gsa_1784[4005] = "Íà ñòåêå íåò ïàìÿòè äëÿ ïåðåäà÷è ïàðàìåòðîâ";
   gsa_1784[4006] = "Íåò ïàìÿòè äëÿ ñòðîêîâîãî ïàðàìåòðà";
   gsa_1784[4007] = "Íåò ïàìÿòè äëÿ âðåìåííîé ñòðîêè";
   gsa_1784[4008] = "Íåèíèöèàëèçèðîâàííàÿ ñòðîêà";
   gsa_1784[4009] = "Íåèíèöèàëèçèðîâàííàÿ ñòðîêà â ìàññèâå";
   gsa_1784[4010] = "Íåò ïàìÿòè äëÿ ñòðîêîâîãî ìàññèâà";
   gsa_1784[4011] = "Ñëèøêîì äëèííàÿ ñòðîêà";
   gsa_1784[4012] = "Îñòàòîê îò äåëåíèÿ íà íîëü";
   gsa_1784[4013] = "Äåëåíèå íà íîëü";
   gsa_1784[4014] = "Íåèçâåñòíàÿ êîìàíäà";
   gsa_1784[4015] = "Íåïðàâèëüíûé ïåðåõîä";
   gsa_1784[4016] = "Íåèíèöèàëèçèðîâàííûé ìàññèâ";
   gsa_1784[4017] = "Âûçîâû DLL íå ðàçðåøåíû";
   gsa_1784[4018] = "Íåâîçìîæíî çàãðóçèòü áèáëèîòåêó";
   gsa_1784[4019] = "Íåâîçìîæíî âûçâàòü ôóíêöèþ";
   gsa_1784[4020] = "Âûçîâû âíåøíèõ áèáëèîòå÷íûõ ôóíêöèé íå ðàçðåøåíû";
   gsa_1784[4021] = "Íåäîñòàòî÷íî ïàìÿòè äëÿ ñòðîêè, âîçâðàùàåìîé èç ôóíêöèè";
   gsa_1784[4022] = "Ñèñòåìà çàíÿòà";
   gsa_1784[4050] = "Íåïðàâèëüíîå êîëè÷åñòâî ïàðàìåòðîâ ôóíêöèè";
   gsa_1784[4051] = "Íåäîïóñòèìîå çíà÷åíèå ïàðàìåòðà ôóíêöèè";
   gsa_1784[4052] = "Âíóòðåííÿÿ îøèáêà ñòðîêîâîé ôóíêöèè";
   gsa_1784[4053] = "Îøèáêà ìàññèâà";
   gsa_1784[4054] = "Íåïðàâèëüíîå èñïîëüçîâàíèå ìàññèâà-òàéìñåðèè";
   gsa_1784[4055] = "Îøèáêà ïîëüçîâàòåëüñêîãî èíäèêàòîðà";
   gsa_1784[4056] = "Ìàññèâû íåñîâìåñòèìû";
   gsa_1784[4057] = "Îøèáêà îáðàáîòêè ãëîáàëüíûåõ ïåðåìåííûõ";
   gsa_1784[4058] = "Ãëîáàëüíàÿ ïåðåìåííàÿ íå îáíàðóæåíà";
   gsa_1784[4059] = "Ôóíêöèÿ íå ðàçðåøåíà â òåñòîâîì ðåæèìå";
   gsa_1784[4060] = "Ôóíêöèÿ íå ðàçðåøåíà";
   gsa_1784[4061] = "Îøèáêà îòïðàâêè ïî÷òû";
   gsa_1784[4062] = "Îæèäàåòñÿ ïàðàìåòð òèïà string";
   gsa_1784[4063] = "Îæèäàåòñÿ ïàðàìåòð òèïà integer";
   gsa_1784[4064] = "Îæèäàåòñÿ ïàðàìåòð òèïà double";
   gsa_1784[4065] = "Â êà÷åñòâå ïàðàìåòðà îæèäàåòñÿ ìàññèâ";
   gsa_1784[4066] = "Çàïðîøåííûå èñòîðè÷åñêèå äàííûå â ñîñòîÿíèè îáíîâëåíèÿ";
   gsa_1784[4067] = "Îøèáêà ïðè âûïîëíåíèè òîðãîâîé îïåðàöèè";
   gsa_1784[4099] = "Êîíåö ôàéëà";
   gsa_1784[4100] = "Îøèáêà ïðè ðàáîòå ñ ôàéëîì";
   gsa_1784[4101] = "Íåïðàâèëüíîå èìÿ ôàéëà";
   gsa_1784[4102] = "Ñëèøêîì ìíîãî îòêðûòûõ ôàéëîâ";
   gsa_1784[4103] = "Íåâîçìîæíî îòêðûòü ôàéë";
   gsa_1784[4104] = "Íåñîâìåñòèìûé ðåæèì äîñòóïà ê ôàéëó";
   gsa_1784[4105] = "Íè îäèí îðäåð íå âûáðàí";
   gsa_1784[4106] = "Íåèçâåñòíûé ñèìâîë";
   gsa_1784[4107] = "Íåïðàâèëüíûé ïàðàìåòð öåíû äëÿ òîðãîâîé ôóíêöèè";
   gsa_1784[4108] = "Íåâåðíûé íîìåð òèêåòà";
   gsa_1784[4109] = "Òîðãîâëÿ íå ðàçðåøåíà. Íåîáõîäèìî âêëþ÷èòü îïöèþ Ðàçðåøèòü ñîâåòíèêó òîðãîâàòü â ñâîéñòâàõ ýêñïåðòà";
   gsa_1784[4110] = "Äëèííûå ïîçèöèè íå ðàçðåøåíû. Íåîáõîäèìî ïðîâåðèòü ñâîéñòâà ýêñïåðòà";
   gsa_1784[4111] = "Êîðîòêèå ïîçèöèè íå ðàçðåøåíû. Íåîáõîäèìî ïðîâåðèòü ñâîéñòâà ýêñïåðòà";
   gsa_1784[4200] = "Îáúåêò óæå ñóùåñòâóåò";
   gsa_1784[4201] = "Çàïðîøåíî íåèçâåñòíîå ñâîéñòâî îáúåêòà";
   gsa_1784[4202] = "Îáúåêò íå ñóùåñòâóåò";
   gsa_1784[4203] = "Íåèçâåñòíûé òèï îáúåêòà";
   gsa_1784[4204] = "Íåò èìåíè îáúåêòà";
   gsa_1784[4205] = "Îøèáêà êîîðäèíàò îáúåêòà";
   gsa_1784[4206] = "Íå íàéäåíî óêàçàííîå ïîäîêíî";
   gsa_1784[4207] = "Îøèáêà ïðè ðàáîòå ñ îáúåêòîì";
   gsa_1784[4299] = "Êîä îøèáêè âíå äèàïàçîíà";
}

int InitTimeArray() {
   int lia_0[500][10] = {0, 0, 0, 0, 0, 0, 0, 0, 23, 24,
   0, 0, 0, 0, 0, 0, 0, 0, 23, 24,
   0, 0, 0, 0, 0, 0, 0, 0, 23, 24,
   0, 0, 0, 0, 0, 0, 0, 0, 23, 24,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 23, 24,
   0, 2, 0, 0, 0, 0, 0, 0, 23, 24,
   0, 2, 0, 0, 0, 0, 0, 0, 23, 24,
   0, 2, 0, 0, 0, 0, 0, 0, 23, 24,
   0, 2, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 21, 24,
   0, 2, 0, 0, 0, 0, 0, 0, 21, 24,
   0, 2, 0, 0, 0, 0, 0, 0, 21, 24,
   0, 2, 0, 0, 0, 0, 0, 0, 21, 24,
   0, 2, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 23, 24,
   0, 6, 0, 0, 0, 0, 0, 0, 23, 24,
   0, 6, 0, 0, 0, 0, 0, 0, 23, 24,
   0, 6, 0, 0, 0, 0, 0, 0, 23, 24,
   0, 6, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 21, 24,
   0, 7, 0, 0, 0, 0, 0, 0, 21, 24,
   0, 7, 0, 0, 0, 0, 0, 0, 21, 24,
   0, 7, 0, 0, 0, 0, 0, 0, 21, 24,
   0, 7, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 7, 17, 17, 21, 24, 24,
   0, 0, 0, 0, 7, 17, 17, 21, 24, 24,
   0, 0, 0, 0, 7, 17, 17, 21, 24, 24,
   0, 0, 0, 0, 7, 17, 17, 21, 24, 24,
   0, 0, 0, 0, 7, 17, 17, 20, 0, 0,
   0, 0, 0, 0, 10, 17, 17, 21, 24, 24,
   0, 0, 0, 0, 10, 17, 17, 21, 24, 24,
   0, 0, 0, 0, 10, 17, 17, 21, 24, 24,
   0, 0, 0, 0, 10, 17, 17, 21, 24, 24,
   0, 0, 0, 0, 10, 17, 17, 20, 0, 0,
   0, 0, 0, 0, 7, 14, 17, 21, 24, 24,
   0, 0, 0, 0, 7, 14, 17, 21, 24, 24,
   0, 0, 0, 0, 7, 14, 17, 21, 24, 24,
   0, 0, 0, 0, 7, 14, 17, 21, 24, 24,
   0, 0, 0, 0, 7, 14, 17, 20, 0, 0,
   0, 0, 0, 0, 10, 13, 17, 21, 24, 24,
   0, 0, 0, 0, 10, 13, 17, 21, 24, 24,
   0, 0, 0, 0, 10, 13, 17, 21, 24, 24,
   0, 0, 0, 0, 10, 13, 17, 21, 24, 24,
   0, 0, 0, 0, 10, 13, 17, 20, 0, 0,
   0, 0, 0, 0, 10, 12, 17, 19, 24, 24,
   0, 0, 0, 0, 10, 12, 17, 19, 24, 24,
   0, 0, 0, 0, 10, 12, 17, 19, 24, 24,
   0, 0, 0, 0, 10, 12, 17, 19, 24, 24,
   0, 0, 0, 0, 10, 12, 17, 19, 0, 0,
   0, 0, 0, 0, 0, 0, 17, 19, 24, 24,
   0, 0, 0, 0, 0, 0, 17, 19, 24, 24,
   0, 0, 0, 0, 0, 0, 17, 19, 24, 24,
   0, 0, 0, 0, 0, 0, 17, 19, 24, 24,
   0, 0, 0, 0, 0, 0, 17, 19, 0, 0};
   ArrayCopy(gia_1368, lia_0, 0, 0, WHOLE_ARRAY);
   return (0);
}

bool SaveFileOrder(int ai_4, int ai_8, double ad_12, double ad_20, double ad_28, double ad_36) {
   bool li_ret_48 = FALSE;
   string l_name_52 = gs_1752 + ".csv";
   int l_file_44 = FileOpen(l_name_52, FILE_CSV|FILE_WRITE, ';');
   if (l_file_44 < 1) {
      Comments(9, "SaveFileOrder()", "Ôàéë " + l_name_52 + " íå ñîçäàí, îøèáêà :" + PrintError(GetLastError()), "Can not create file " + l_name_52 + ", error :" + PrintError(GetLastError()));
      return (li_ret_48);
   }
   FileWrite(l_file_44, ai_4, ad_12, ai_8, ad_20, DoubleToStr(ad_28, Digits), DoubleToStr(ad_36, Digits));
   FileClose(l_file_44);
   li_ret_48 = TRUE;
   if (ai_4 == 0) {
      Comments(9, "SaveFileOrder()", "BUY     " + ai_4 + " ; " + ad_12 + " ; " + ai_8 + " ; " + ad_20 + " ; " + ad_28 + " ; " + ad_36, "BUY     " + ai_4 + " ; " + ad_12 +
         " ; " + ai_8 + " ; " + ad_20 + " ; " + ad_28 + " ; " + ad_36);
   }
   if (ai_4 == 1) {
      Comments(9, "SaveFileOrder()", "SELL    " + ai_4 + " ; " + ad_12 + " ; " + ai_8 + " ; " + ad_20 + " ; " + ad_28 + " ; " + ad_36, "SELL    " + ai_4 + " ; " + ad_12 +
         " ; " + ai_8 + " ; " + ad_20 + " ; " + ad_28 + " ; " + ad_36);
   }
   if (ai_4 == 98) {
      Comments(9, "SaveFileOrder()", "CLOSE   " + ai_4 + " ; " + ad_12 + " ; " + ai_8 + " ; " + ad_20 + " ; " + ad_28 + " ; " + ad_36, "CLOSE   " + ai_4 + " ; " + ad_12 +
         " ; " + ai_8 + " ; " + ad_20 + " ; " + ad_28 + " ; " + ad_36);
   }
   if (ai_4 == 99) {
      Comments(9, "SaveFileOrder()", "NONE    " + ai_4 + " ; " + ad_12 + " ; " + ai_8 + " ; " + ad_20 + " ; " + ad_28 + " ; " + ad_36, "NONE    " + ai_4 + " ; " + ad_12 +
         " ; " + ai_8 + " ; " + ad_20 + " ; " + ad_28 + " ; " + ad_36);
   }
   g_count_1204++;
   if (g_count_1204 > gi_1260) g_count_1204 = 0;
   int l_datetime_60 = TimeLocal();
   if (gi_864) {
      li_ret_48 = FALSE;
      while (TimeLocal() - l_datetime_60 < gi_868) {
         if (!isFile(gs_1752 + ".csv")) {
            li_ret_48 = TRUE;
            break;
         }
         Sleep(25);
      }
      if (!li_ret_48) {
         if (gi_880) {
            if (FileErase(l_name_52)) Comments(9, "SaveFileOrder()", "Èñòåê òàéìàóò ïåðåäà÷è ôàéëà, ôàéë ïåðåäà÷è î÷èùåí", "Èñòåê òàéìàóò ïåðåäà÷è ôàéëà, ôàéë ïåðåäà÷è î÷èùåí");
            else Comments(9, "SaveFileOrder()", "Èñòåê òàéìàóò ïåðåäà÷è ôàéëà, ôàéë ïåðåäà÷è íå óäàëîñü î÷èñòèòü", "Èñòåê òàéìàóò ïåðåäà÷è ôàéëà, ôàéë ïåðåäà÷è íå óäàëîñü î÷èñòèòü");
         } else Comments(9, "SaveFileOrder()", "Èñòåê òàéìàóò ïåðåäà÷è ôàéëà", "Èñòåê òàéìàóò ïåðåäà÷è ôàéëà");
      }
   }
   l_datetime_60 = TimeLocal();
   if (gi_872) {
      li_ret_48 = FALSE;
      while (TimeLocal() - l_datetime_60 < gi_876) {
         if (ai_4 == 1 && isOrderSell()) {
            li_ret_48 = TRUE;
            break;
         }
         if (ai_4 == 0 && isOrderBuy()) {
            li_ret_48 = TRUE;
            break;
         }
         if (ai_4 == 98 && !isOrderSell() && !isOrderBuy()) {
            li_ret_48 = TRUE;
            break;
         }
         if (ai_4 == 99) {
            li_ret_48 = TRUE;
            break;
         }
         Sleep(25);
      }
      if (!li_ret_48) {
         if (gi_880) {
            if (FileErase(l_name_52)) Comments(9, "SaveFileOrder()", "Èñòåê òàéìàóò óñòàíîâêè îðäåðà, ôàéë ïåðåäà÷è î÷èùåí", "Èñòåê òàéìàóò óñòàíîâêè îðäåðà, ôàéë ïåðåäà÷è î÷èùåí");
            else Comments(9, "SaveFileOrder()", "Èñòåê òàéìàóò óñòàíîâêè îðäåðà, ôàéë ïåðåäà÷è íå óäàëîñü î÷èñòèòü", "Èñòåê òàéìàóò óñòàíîâêè îðäåðà, ôàéë ïåðåäà÷è íå óäàëîñü î÷èñòèòü");
         } else Comments(9, "SaveFileOrder()", "Èñòåê òàéìàóò óñòàíîâêè îðäåðà", "Èñòåê òàéìàóò óñòàíîâêè îðäåðà");
      }
   }
   return (li_ret_48);
}

bool isFile(string a_name_0) {
   bool li_ret_12 = FALSE;
   int l_file_8 = FileOpen(a_name_0, FILE_CSV|FILE_READ);
   if (l_file_8 > 0) {
      FileClose(l_file_8);
      li_ret_12 = TRUE;
   }
   return (li_ret_12);
}

bool FileErase(string a_name_0) {
   bool li_ret_12 = FALSE;
   int l_file_8 = FileOpen(a_name_0, FILE_CSV|FILE_WRITE);
   if (l_file_8 > 0) {
      FileClose(l_file_8);
      li_ret_12 = TRUE;
   }
   return (li_ret_12);
}

bool ReadFileOrder() {
   int l_file_0;
   string ls_8;
   string l_name_16;
   bool li_ret_24 = FALSE;
   if (gi_1544) {
      for (int l_count_4 = 0; l_count_4 < gi_1260 + 1; l_count_4++) {
         l_name_16 = gs_1752 + ((PersonalMagicNumber + Period())) + "_" + l_count_4 + ".csv";
         l_file_0 = FileOpen(l_name_16, FILE_CSV|FILE_READ);
         if (!(l_file_0 < 0)) {
            g_count_1200 = l_count_4;
            gi_1544 = FALSE;
            FileClose(l_file_0);
            break;
         }
      }
   }
   if (gi_1544) return (li_ret_24);
   l_name_16 = gs_1752 + ((PersonalMagicNumber + Period())) + "_" + g_count_1200 + ".csv";
   l_file_0 = FileOpen(l_name_16, FILE_CSV|FILE_READ);
   if (l_file_0 > 0) {
      ls_8 = FileReadString(l_file_0);
      gda_1504[0][0] = StrToInteger(ls_8);
      ls_8 = FileReadString(l_file_0);
      gda_1504[0][1] = StrToInteger(ls_8);
      ls_8 = FileReadString(l_file_0);
      gda_1504[0][2] = StrToInteger(ls_8);
      ls_8 = FileReadString(l_file_0);
      gda_1504[0][3] = StrToDouble(ls_8);
      ls_8 = FileReadString(l_file_0);
      gda_1504[0][4] = StrToDouble(ls_8);
      ls_8 = FileReadString(l_file_0);
      gda_1504[0][5] = StrToDouble(ls_8);
      FileClose(l_file_0);
      FileDelete(l_name_16);
      g_count_1200++;
      if (g_count_1200 > gi_1260) g_count_1200 = 0;
      Comments(9, "ReadFileOrder()", "Ïîñëåäíèé çàãðóæåííûé ôàéë " + l_name_16, "Ïîñëåäíèé çàãðóæåííûé ôàéë " + l_name_16);
      li_ret_24 = TRUE;
   }
   return (TRUE);
}

int CheckReceiveBuffer() {
   bool li_ret_0 = FALSE;
   if (gda_1504[0][1] != 99.0) {
      if (gda_1504[0][1] == 98.0) {
         if (gda_1508[0][3] != 0.0 && gda_1504[0][2] == gda_1508[0][2]) {
            gda_1508[0][1] = 98;
            gda_1508[0][5] = gda_1504[0][3];
            li_ret_0 = TRUE;
         }
      }
      if (gda_1504[0][1] == 0.0 || gda_1504[0][1] == 1.0 && gda_1508[0][1] == 99.0) {
         gda_1508[0][0] = gda_1504[0][0];
         gda_1508[0][1] = gda_1504[0][1];
         gda_1508[0][2] = gda_1504[0][2];
         gda_1508[0][4] = gda_1504[0][3];
         gda_1508[0][6] = gda_1504[0][4];
         gda_1508[0][7] = gda_1504[0][5];
         li_ret_0 = TRUE;
      }
   }
   ClearBuffer("ReceiveBuffer");
   return (li_ret_0);
}

int CheckCommandBuffer() {
   bool li_ret_0 = FALSE;
   if (gda_1508[0][1] != 99.0) {
      if (gda_1508[0][0] + gi_1104 * (60 * Period()) <= Time[0]) {
         if (gda_1508[0][1] == 0.0 && gda_1508[0][4] >= Ask)
            if (SendBuyOrder(gda_1508[0][6], gda_1508[0][7])) li_ret_0 = TRUE;
         if (gda_1508[0][1] == 1.0 && gda_1508[0][4] <= Bid)
            if (SendSellOrder(gda_1508[0][6], gda_1508[0][7])) li_ret_0 = TRUE;
      }
      if (gda_1508[0][0] + gi_1104 * (60 * Period()) <= Time[0]) {
      }
   }
   return (li_ret_0);
}

int CheckLastOptTime() {
   double l_global_var_12;
   bool li_ret_0 = FALSE;
   double ld_4 = MathRound(GetTickCount() / 100);
   if (IsOptimization() || IsTesting()) {
      if (GlobalVariableCheck("LastOptTime")) {
         l_global_var_12 = GlobalVariableGet("LastOptTime");
         GlobalVariableSet("LastOptTime", ld_4);
         if (l_global_var_12 > ld_4) ld_4 += 86400.0;
         if (ld_4 - l_global_var_12 > gd_1024) li_ret_0 = TRUE;
      } else {
         GlobalVariableSet("LastOptTime", ld_4);
         li_ret_0 = TRUE;
      }
      if (!GlobalVariableCheck("OptCounter")) GlobalVariableSet("OptCounter", 0.0);
   }
   return (li_ret_0);
}

int CheckBlockByStopsDate() {
   bool li_ret_0 = FALSE;
   if (GlobalVariableGet(g_var_name_1856) == 1.0 * gi_1316 && g_hour_1308 < 16 && !gi_1636 && !gi_1560) gi_1560 = TRUE;
   return (li_ret_0);
}

int SaveCommentsFile(string as_0) {
   string l_name_16;
   int l_file_24;
   bool li_ret_8 = FALSE;
   int l_index_12 = 0;
   if (!gi_988) return (li_ret_8);
   if (gsa_1788[0] != "" || as_0 == "deinit") {
      l_name_16 = gs_1792 + "_";
      if (gi_1316 < 10) l_name_16 = l_name_16 + "0";
      l_name_16 = l_name_16 + gi_1316;
      if (g_month_1320 < 10) l_name_16 = l_name_16 + "0";
      l_name_16 = l_name_16 + g_month_1320 + g_year_1324 + ".log";
      l_file_24 = FileOpen(l_name_16, FILE_CSV|FILE_WRITE|FILE_READ, ';');
      if (l_file_24 < 1) {
         Print("Íåâîçìîæíî çàïèñàòü äàííûå â ôàéë " + l_name_16 + ", îøèáêà: ", GetLastError());
         return (li_ret_8);
      }
      FileSeek(l_file_24, 0, SEEK_END);
      if (as_0 == "deinit") FileWrite(l_file_24, TimeToStr(TimeCurrent(), TIME_SECONDS) + " : ----------------------------deinit------------------------------");
      else {
         for (l_index_12 = 0; l_index_12 < 20; l_index_12++) {
            if (gsa_1788[l_index_12] == "") break;
            FileWrite(l_file_24, gsa_1788[l_index_12]);
            gsa_1788[l_index_12] = "";
         }
      }
      FileClose(l_file_24);
      li_ret_8 = TRUE;
   }
   return (li_ret_8);
}

int CheckPointDifference() {
   if (Point == 0.00001 || Point == 0.001) gi_1136 = 10;
   else gi_1136 = 1;
   gi_180 *= gi_1136;
   gi_184 *= gi_1136;
   AverageTradeProfit *= gi_1136;
   gi_280 *= gi_1136;
   gi_288 *= gi_1136;
   gd_308 *= gi_1136;
   gd_332 *= gi_1136;
   gd_344 *= gi_1136;
   gi_396 *= gi_1136;
   gi_400 *= gi_1136;
   gi_404 *= gi_1136;
   gi_408 *= gi_1136;
   gd_452 *= gi_1136;
   gd_484 *= gi_1136;
   gd_512 *= gi_1136;
   gd_528 *= gi_1136;
   gd_652 *= gi_1136;
   gi_256 *= gi_1136;
   MaxSpreadValue *= gi_1136;
   gd_732 *= gi_1136;
   gd_740 *= gi_1136;
   gd_748 *= gi_1136;
   gi_240 *= gi_1136;
   gi_244 *= gi_1136;
   gi_560 *= gi_1136;
   gi_568 *= gi_1136;
   gi_576 *= gi_1136;
   gi_584 *= gi_1136;
   gi_592 *= gi_1136;
   OrderOpenSlippage *= gi_1136;
   OrderCloseSlippage *= gi_1136;
   return (0);
}

int CheckMarketInfo() {
   gs_1752 = GetSymbol();
   if (gs_1752 == "") {
      Comments(9, "CheckMarketInfo()", "Òîðãîâëÿ çàáëîêèðîâàíà: íåèçâåñòíàÿ âàëþòíàÿ ïàðà " + Symbol(), "Trade is disable: Unknown symbol " + Symbol());
      gi_1660 = TRUE;
   }
   if (gs_1880 != "" || gs_1888 != "") Comments(9, "CheckMarketInfo()", "Îáíàðóæåíû äîáàâî÷íûå ñèìâîëû ê íàçâàíèþ âàëþòíîé ïàðû " + Symbol(), "Found additive to the Symbol name " + Symbol());
   gs_1760 = StringSubstr(AccountCompany(), 0, StringFind(AccountCompany(), " ", 0));
   gi_1220 = PersonalMagicNumber;
   g_magic_1196 = PersonalMagicNumber + StringGetChar(Symbol(), 0) + StringGetChar(Symbol(), 1) + StringGetChar(Symbol(), 2) + StringGetChar(Symbol(), 3) + StringGetChar(Symbol(), 4) + StringGetChar(Symbol(), 5) + Period();
   gd_1400 = NormalizeDouble(MarketInfo(Symbol(), MODE_LOTSTEP), 2);
   gd_1408 = NormalizeDouble(MarketInfo(Symbol(), MODE_MINLOT), 2);
   gd_100 = NormalizeDouble(MarketInfo(Symbol(), MODE_MAXLOT), 2);
   
   for (gi_1684 = StrToTime(Year() + ".10.31"); TimeDayOfWeek(gi_1684) != 0; gi_1684 -= 86400) {
   }
   gi_1696 = gi_1684 + 604800;
   for (gi_1688 = StrToTime(Year() + ".03.31"); TimeDayOfWeek(gi_1688) != 0; gi_1688 -= 86400) {
   }
   for (gi_1692 = StrToTime((Year() + 1) + ".03.31"); TimeDayOfWeek(gi_1692) != 0; gi_1692 -= 86400) {
   }
   gi_1700 = gi_1688 - 1814400;
   gs_1792 = gs_1760 + AccountNumber() + "TradeComments" + "_Magic" + g_magic_1196;
   gs_1800 = gs_1760 + AccountNumber() + "TestReport";
   gs_1808 = gs_1760 + AccountNumber() + "TradeReport_Magic" + g_magic_1196;
   gi_1236 = 3;
   gi_1232 = 1;
   if (gs_1752 == "EURCHF") gi_1232 = 2;
   if (gs_1752 == "AUDNZD") gi_1232 = 3;
   if (Lots != 0.0) {
      UseBalanceControl = FALSE;
      Comments(9, "CheckMarketInfo()", "Ðåæèì BalanceControl âûêëþ÷åí: Lots íå ðàâåí 0", "BalanceControl is disabled: Lots is not zero");
   }
   gs_1832 = 756;
   return (0);
}

int SetGlobalVariableNames() {
   g_var_name_1856 = gs_1752 + "StopDay" + AccountNumber();
   g_var_name_1864 = "MailReportLB" + AccountNumber();
   g_var_name_1872 = "MailReportLD" + AccountNumber();
   g_var_name_1840 = "MaxBalance";
   g_var_name_1848 = "LB";
   if (IsTesting() || IsOptimization()) {
      g_var_name_1856 = "Test" + g_var_name_1856;
      g_var_name_1864 = "Test" + g_var_name_1864;
      g_var_name_1872 = "Test" + g_var_name_1872;
      g_var_name_1840 = "Test" + g_var_name_1840;
      g_var_name_1848 = "Test" + g_var_name_1848;
   } else {
      g_var_name_1840 = g_var_name_1840 + AccountNumber();
      g_var_name_1848 = g_var_name_1848 + AccountNumber();
   }
   return (0);
}

double GetPointPrice(string as_0) {
   string l_symbol_32;
   string ls_40;
   string ls_48;
   string l_symbol_64;
   string ls_72;
   string ls_80;
   double ld_ret_8 = 0.0;
   string ls_16 = StringSubstr(gs_1752, 0, 3);
   string ls_24 = StringSubstr(gs_1752, 3, 0);
   double ld_88 = 1.0;
   double ld_96 = 1.0;
 
   if (as_0 != "LotDepo") {
      if (ls_24 != "USD") {
         ls_40 = "USD" + ls_24;
         ls_48 = ls_24 + "USD";
         l_symbol_32 = gs_1880 + ls_40 + gs_1888;
         ld_88 = iClose(l_symbol_32, PERIOD_H1, 0);
         if (ld_88 > 0.0) ld_88 = 1 / ld_88;
         else {
            l_symbol_32 = gs_1880 + ls_48 + gs_1888;
            ld_88 = iClose(l_symbol_32, PERIOD_H1, 0);
         }
      } else {
         l_symbol_32 = gs_1880 + ls_16 + "USD" + gs_1888;
         ld_88 = iClose(l_symbol_32, PERIOD_H1, 0);
      }
      ld_88 = CheckGlobalRateValue(ls_40, ls_48, l_symbol_32, ld_88);
      if (AccountCurrency() != "USD") {
         ls_72 = "USD" + AccountCurrency();
         ls_80 = AccountCurrency() + "USD";
         l_symbol_64 = gs_1880 + ls_72 + gs_1888;
         ld_96 = iClose(l_symbol_64, PERIOD_H1, 0);
         if (ld_96 <= 0.0) {
            l_symbol_64 = gs_1880 + ls_80 + gs_1888;
            ld_96 = iClose(l_symbol_64, PERIOD_H1, 0);
            if (ld_96 > 0.0) ld_96 = 1 / ld_96;
         }
         ld_96 = CheckGlobalRateValue(ls_72, ls_80, l_symbol_64, ld_96);
      }
   } else {
      if (ls_16 != "USD") {
         ls_40 = "USD" + ls_16;
         ls_48 = ls_16 + "USD";
         l_symbol_32 = gs_1880 + ls_40 + gs_1888;
         ld_88 = iClose(l_symbol_32, PERIOD_H1, 0);
         if (ld_88 > 0.0) ld_88 = 1 / ld_88;
         else {
            l_symbol_32 = gs_1880 + ls_48 + gs_1888;
            ld_88 = iClose(l_symbol_32, PERIOD_H1, 0);
         }
         ld_88 = CheckGlobalRateValue(ls_40, ls_48, l_symbol_32, ld_88);
      }
      if (AccountCurrency() != "USD") {
         ls_72 = "USD" + AccountCurrency();
         ls_80 = AccountCurrency() + "USD";
         l_symbol_64 = gs_1880 + ls_72 + gs_1888;
         ld_96 = iClose(l_symbol_64, PERIOD_H1, 0);
         if (ld_96 <= 0.0) {
            l_symbol_64 = gs_1880 + ls_80 + gs_1888;
            ld_96 = iClose(l_symbol_64, PERIOD_H1, 0);
            if (ld_96 > 0.0) ld_96 = 1 / ld_96;
         }
         ld_96 = CheckGlobalRateValue(ls_72, ls_80, l_symbol_64, ld_96);
      }
   }
   if (as_0 == "Symbol") ld_ret_8 = MarketInfo(Symbol(), MODE_LOTSIZE) * Point * ld_88 * ld_96;
   if (as_0 == "LotDepo") ld_ret_8 = 1.0;
   if (as_0 == "DepoUSD") ld_ret_8 = ld_96;
   return (ld_ret_8);
}

double CheckGlobalRateValue(string as_0, string as_8, string as_16, double ad_24) {
   double ld_ret_32 = ad_24;
   if (!IsOptimization() && !IsTesting()) {
      if (ad_24 > 0.0) GlobalVariableSet("z" + as_16, ad_24);
   } else {
      if (ad_24 <= 0.0) {
         if (GlobalVariableGet("z" + as_0) > 0.0) ld_ret_32 = GlobalVariableGet("z" + as_8);
         if (GlobalVariableGet("z" + as_8) > 0.0) ld_ret_32 = GlobalVariableGet("z" + as_8);
      }
   }
   return (ld_ret_32);
}

int DrawDownAction(int ai_0) {
   bool li_ret_4 = FALSE;
   if (UseBalanceControl) {
      if (gi_1580) {
         if (gi_1224 != gi_788) {
            gi_1224 = gi_788;
            SetTimeSettings(gi_788);
            MakeTimeString();
            gi_1280--;
            Comments(9, "DrawDownAction()", "Óñòàíîâëåíî òîðãîâîå âðåìÿ ñ ìèí. ðèñêàìè", "Low risk trade time");
         }
      } else {
         if (gi_1224 != gi_784) {
            gi_1224 = gi_784;
            SetTimeSettings(gi_784);
            MakeTimeString();
            gi_1280--;
            Comments(9, "DrawDownAction()", "Óñòàíîâëåíî òîðãîâîå âðåìÿ ñ ìàêñ. ðèñêàìè", "High risk trade time");
         }
      }
      gi_1652 = FALSE;
      if (!gi_1636 && ai_0 == g_str2int_832 || ai_0 == g_str2int_836) {
         gi_1652 = TRUE;
         if (gi_1228 != DDSettingsNumber && DDSettingsNumber != 0) {
            gi_1228 = DDSettingsNumber;
            SetSettings(DDSettingsNumber, 1);
            MakeInitString();
         }
      } else {
         if (gi_1228 != SettingsNumber) {
            gi_1228 = SettingsNumber;
            SetSettings(SettingsNumber, 1);
            MakeInitString();
         }
      }
   }
   return (li_ret_4);
}


int GetMaxLotsPercent(int ai_0) {
   int li_ret_4 = 0;
   li_ret_4 = AccountStopoutLevel() * MarketInfo(Symbol(), MODE_MARGINREQUIRED) / 100.0 + ai_0 * GetPointPrice("Symbol");
   if (li_ret_4 < MarketInfo(Symbol(), MODE_MARGINREQUIRED)) li_ret_4 = MarketInfo(Symbol(), MODE_MARGINREQUIRED);
   if (li_ret_4 > 0) li_ret_4 = MathFloor(MarketInfo(Symbol(), MODE_LOTSIZE) * GetPointPrice("LotDepo") / li_ret_4);
   return (li_ret_4);
}

int SetMaxLots() {
   int li_4;
   SetSettings(SettingsNumber, 0);
   int li_ret_0 = GetMaxLotsPercent(gi_180);
   if (UseBalanceControl && DDSettingsNumber != SettingsNumber) {
      SetSettings(DDSettingsNumber, 0);
      li_4 = GetMaxLotsPercent(gi_180);
      if (li_ret_0 > li_4) li_ret_0 = li_4;
   }
   if (li_ret_0 == 0) {
      Comments(9, "SetMaxLots()", "Íåâîçìîæíî ïîñ÷èòàòü ìàêñèìàëüíî-âîçìîæíîå çíà÷åíèå ëîòà MaxLotsPercent", "Unable to calculate the MaxLotsPercent");
      return (li_ret_0);
   }
   gd_1416 = li_ret_0;
   if (MaxLotsPercent == 0) {
      MaxLotsPercent = li_ret_0;
      Comments(9, "SetMaxLots()", "Óñòàíîâëåíî çíà÷åíèå ïåðåìåííîé MaxLotsPercent=" + MaxLotsPercent, "New value of MaxLotsPercent=" + MaxLotsPercent);
      if (LotsPercent > li_ret_0) {
         LotsPercent = li_ret_0;
         Comments(9, "SetMaxLots()", "Èçìåíåíî çíà÷åíèå ïåðåìåííîé LotsPercent=" + LotsPercent, "Changed value of LotsPercent=" + LotsPercent);
      }
   } else {
      Comments(9, "SetMaxLots()", "Ìàêñèìàëüíûé ëîò äëÿ ïðàâèëüíîé ðàáîòû ñîâåòíèêà â äàííîì ðåæèìå äîëæåí áûòü íå áîëåå " + li_ret_0 + " % îò äåïîçèòà", "Maximal lot value to work in this mode must be not more then " +
         li_ret_0 + " % from depo");
   }
   LotsPercent = 100000 * LotsPercent / MarketInfo(Symbol(), MODE_LOTSIZE);
   MaxLotsPercent = 100000 * MaxLotsPercent / MarketInfo(Symbol(), MODE_LOTSIZE);
   gd_1416 = 100000.0 * gd_1416 / MarketInfo(Symbol(), MODE_LOTSIZE);
   if (gd_1416 <= 0.0) gd_1416 = MaxLotsPercent;
   return (li_ret_0);
}

string GetSymbol() {
   int li_8;
   string ls_ret_0 = "";
   string lsa_20[20] = {"EUR", "USD", "CHF", "GBP", "CAD", "JPY", "AUD", "NZD", "NOK", "RUB", "RUR", "SEK", "SGD", "DKK", "ZAR", "UAH", "MXN", "HKD", "TRY", "PLN"};
   for (int li_16 = 0; li_16 < StringLen(Symbol()) - 3; li_16++) {
      for (int l_index_12 = 0; l_index_12 < 20; l_index_12++) {
         li_8 = StringFind(Symbol(), lsa_20[l_index_12], li_16);
         if (li_8 == li_16) {
            ls_ret_0 = StringSubstr(Symbol(), li_8, 6);
            if (StringFind(Symbol(), ls_ret_0, 0) != 0) gs_1880 = StringSubstr(Symbol(), 0, StringFind(Symbol(), ls_ret_0, 0));
            if (StringLen(Symbol()) == StringLen(gs_1880) + StringLen(ls_ret_0)) break;
            gs_1888 = StringSubstr(Symbol(), StringLen(gs_1880) + StringLen(ls_ret_0), 0);
            break;
         }
      }
      if (ls_ret_0 != "") break;
   }
   return (ls_ret_0);
}

int EncodeSettings(int ai_0) {
   double l_str2int_20 = 0.0;
   int li_28 = 0;
   ArrayCopy(gsa_1776, gsa_1780, 0, 0, WHOLE_ARRAY);
   for (int li_12 = 0; li_12 < StringLen(gs_1832); li_12++) li_28 += StrToInteger(StringSubstr(gs_1832, li_12, 1));
   for (int l_count_8 = 0; l_count_8 <= ai_0; l_count_8++) for (int l_index_4 = 0; l_index_4 < 150; l_index_4++) gsa_1776[l_index_4][l_count_8] = StrToInteger(gsa_1776[l_index_4][l_count_8]) - l_index_4 - l_count_8;
   for (li_12 = 0; li_12 < StringLen(gs_1832); li_12++) {
      l_str2int_20 = StrToInteger(StringSubstr(gs_1832, li_12, 1));
      if (l_str2int_20 != 0.0) {
         if (l_str2int_20 / 2.0 != MathFloor(l_str2int_20 / 2.0)) {
            if (l_str2int_20 < 4.0) {
               for (int l_count_16 = 0; l_count_16 < li_28; l_count_16++) {
                  ArrayCopy(gsa_1780, gsa_1776, 0, 0, WHOLE_ARRAY);
                  for (l_index_4 = 148; l_index_4 >= 0; l_index_4--) for (l_count_8 = 0; l_count_8 <= ai_0; l_count_8++) gsa_1776[l_index_4 + 1][l_count_8] = gsa_1776[l_index_4][l_count_8];
                  for (l_count_8 = 0; l_count_8 <= ai_0; l_count_8++) gsa_1776[0][l_count_8] = gsa_1780[149][l_count_8];
               }
            } else {
               for (l_count_16 = 0; l_count_16 < li_28; l_count_16++) {
                  ArrayCopy(gsa_1780, gsa_1776, 0, 0, WHOLE_ARRAY);
                  for (l_index_4 = 1; l_index_4 < 150; l_index_4++) for (l_count_8 = 0; l_count_8 <= ai_0; l_count_8++) gsa_1776[l_index_4 - 1][l_count_8] = gsa_1776[l_index_4][l_count_8];
                  for (l_count_8 = 0; l_count_8 <= ai_0; l_count_8++) gsa_1776[149][l_count_8] = gsa_1780[0][l_count_8];
               }
            }
         } else {
            if (l_str2int_20 > 5.0) {
               for (l_count_16 = 0; l_count_16 < li_28; l_count_16++) {
                  ArrayCopy(gsa_1780, gsa_1776, 0, 0, WHOLE_ARRAY);
                  for (l_count_8 = ai_0 - 1; l_count_8 >= 0; l_count_8--) for (l_index_4 = 0; l_index_4 < 150; l_index_4++) gsa_1776[l_index_4][l_count_8 + 1] = gsa_1776[l_index_4][l_count_8];
                  for (l_index_4 = 0; l_index_4 <= 150; l_index_4++) gsa_1776[l_index_4][0] = gsa_1780[l_index_4][ai_0];
               }
            } else {
               for (l_count_16 = 0; l_count_16 < li_28; l_count_16++) {
                  ArrayCopy(gsa_1780, gsa_1776, 0, 0, WHOLE_ARRAY);
                  for (l_count_8 = 1; l_count_8 <= ai_0; l_count_8++) for (l_index_4 = 0; l_index_4 < 150; l_index_4++) gsa_1776[l_index_4][l_count_8 - 1] = gsa_1776[l_index_4][l_count_8];
                  for (l_index_4 = 0; l_index_4 <= 150; l_index_4++) gsa_1776[l_index_4][ai_0] = gsa_1780[l_index_4][0];
               }
            }
         }
      }
   }
   ArrayCopy(gsa_1780, gsa_1776, 0, 0, WHOLE_ARRAY);
   if (StrToInteger(gsa_1780[0][0]) > 0) ai_0 = 0;
   return (ai_0);
}

int LoadSettingsFile() {
   int l_file_12;
   string ls_16;
   string l_name_24;
   bool li_ret_0 = FALSE;
   int li_4;
   l_name_24 = "euronis3052_cracked_by_qzar.key";
   l_file_12 = FileOpen(l_name_24, FILE_CSV|FILE_READ, ';');

   if (l_file_12 < 1) {
      Comments(9, "LoadSettings()", "Êëþ÷åâîé ôàéë íå çàãðóæåí, îøèáêà: " + PrintError(GetLastError()), "Can not load the key file, error: " + PrintError(GetLastError()));
      return (0);
   }
   Comments(9, "LoadSettings()", "Çàãðóæåí êëþ÷åâîé ôàéë (" + l_name_24 + ")", "Loaded the key file (" + l_name_24 + ")");
   int li_8 = -1;
   while (!FileIsLineEnding(l_file_12)) {
      li_8++;
      gsa_1776[0][li_8] = FileReadString(l_file_12);
   }
   li_ret_0 = li_8;
   li_4 = 1;
   li_8 = -1;
   while (!FileIsEnding(l_file_12)) {
      li_8++;
      gsa_1776[li_4][li_8] = FileReadString(l_file_12);
      if (li_8 == li_ret_0) {
         li_8 = -1;
         li_4++;
      }
   }
   FileClose(l_file_12);
   ArrayCopy(gsa_1780, gsa_1776, 0, 0, WHOLE_ARRAY);
   return (li_ret_0);
}

bool CheckHystory() {
   bool li_ret_0 = TRUE;
   for (int li_4 = 1; li_4 < 20; li_4++)
      if (TimeMinute(Time[li_4] - (Time[li_4 - 1])) > Period()) li_ret_0 = FALSE;
   return (li_ret_0);
}

int InitVariables() {
   gi_1112 = 0;
   gi_1116 = 0;
   gi_1120 = FALSE;
   gi_1124 = FALSE;
   gi_1128 = FALSE;
   gi_1132 = FALSE;
   gi_1136 = 0;
   gi_1140 = 0;
   gi_1144 = 0;
   g_bars_1152 = 0;
   g_hour_1164 = 25;
   g_bars_1168 = 0;
   g_ticket_1172 = 0;
   g_ticket_1176 = 0;
   gi_1184 = 0;
   g_ticket_1188 = FALSE;
   g_bars_1192 = FALSE;
   g_magic_1196 = 0;
   g_count_1200 = 0;
   g_count_1204 = 0;
   gi_1208 = 0;
   g_count_1212 = 0;
   g_minute_1216 = 0;
   gi_1220 = 0;
   gi_1224 = -1;
   gi_1228 = FALSE;
   gi_1232 = 0;
   gi_1236 = 0;
   gi_1260 = 10;
   gi_1264 = 0;
   g_day_of_week_1268 = -1;
   gi_1280 = -1;
   g_time_1284 = -1;
   gi_1288 = 0;
   gi_1292 = 0;
   gi_1296 = 0;
   gi_1300 = 0;
   gi_1304 = 0;
   g_hour_1308 = 0;
   g_day_of_week_1312 = 0;
   gi_1316 = 0;
   g_month_1320 = 0;
   g_year_1324 = 0;
   g_count_1328 = 0;
   gi_1332 = 999;
   gi_1336 = 0;
   g_count_1340 = 0;
   gi_1344 = FALSE;
   gi_1348 = 99;
   gi_1352 = 0;
   gi_1356 = 0;
   g_bars_1360 = FALSE;
   g_str2int_1372 = 0;
   g_str2int_1376 = 0;
   g_str2int_1380 = 0;
   gd_1384 = 0.0;
   gd_1392 = 0.0;
   gd_1400 = 0.0;
   gd_1408 = 0.0;
   gd_1416 = 0.0;
   gd_1424 = 0.0;
   gd_1432 = 0.0;
   g_price_1440 = 0.0;
   g_ord_profit_1456 = 0.0;
   g_global_var_1464 = 0.0;
   g_price_1472 = 0.0;

   gi_1516 = FALSE;
   gi_1520 = FALSE;

   gi_1532 = FALSE;
   gi_1536 = FALSE;
   gi_1540 = FALSE;
   gi_1544 = TRUE;
   gi_1548 = FALSE;
   gi_1552 = FALSE;

   gi_1560 = FALSE;
   gi_1564 = FALSE;
 
   gi_1572 = FALSE;
   gi_1576 = FALSE;
   gi_1580 = FALSE;
   gi_1584 = FALSE;

   gi_1592 = TRUE;
 
   gi_1600 = TRUE;

   gi_1612 = FALSE;
   gi_1616 = FALSE;
   gi_1620 = FALSE;
   gi_1624 = FALSE;
   gi_1628 = FALSE;
   gi_1632 = FALSE;
   gi_1636 = FALSE;

   gi_1648 = FALSE;
   gi_1652 = FALSE;

   gi_1660 = FALSE;
   gi_1664 = FALSE;
   gi_1668 = 0;
   gi_1672 = 0;
   g_datetime_1676 = 0;
   g_time_1680 = 0;
   gi_1684 = 0;
   gi_1688 = 0;
   gi_1692 = 0;
   gi_1696 = 0;
   gi_1700 = 0;
   gs_1704 = "";
   gs_1712 = "";

   gs_1736 = "";
   gs_1744 = "";
   gs_1752 = "";
   gs_1760 = "";
   gs_1792 = "";
   gs_1800 = "";
   gs_1808 = "";
   gs_1824 = "";
   gs_1832 = "";
   g_var_name_1840 = "";
   g_var_name_1848 = "";
   g_var_name_1856 = "";
   g_var_name_1864 = "";
   g_var_name_1872 = "";
   gs_1880 = "";
   gs_1888 = "";
   gs_1896 = "";
   gs_1904 = "";
   return (1);
}