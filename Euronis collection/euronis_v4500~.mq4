/*
   Generated by EX4-TO-MQ4 decompiler V4.0.224.1 []
   Website: http://purebeam.biz
   E-mail : purebeam@gmail.com
*/
#property copyright "Copyright © 2008-2010, Sotnikov Denis (fxexpert@freemail.ru)"
#property link      "www.euronis.ru  www.forexover.com"

#include <WinUser32.mqh>

#import "wininet.dll"
   int InternetAttemptConnect(int a0);
   int InternetOpenA(string a0, int a1, string a2, string a3, int a4);
   int InternetReadFile(int a0, int& a1[], int a2, int& a3[]);
   int InternetConnectA(int a0, string a1, int a2, string a3, string a4, int a5, int a6, int a7);
   int HttpOpenRequestA(int a0, string a1, string a2, string a3, string a4, string a5, int a6, int a7);
   int HttpSendRequestA(int a0, string a1, int a2, int& a3[], int a4);
   int InternetCloseHandle(int a0);
#import

extern bool MarketInfoMode = TRUE;
extern string OrderOptions = "--------   Orders options  --------";
extern double Lots = 0.0;
extern int LotsPercent = 35;
extern int MaxLotsPercent = 35;
double gd_104 = 0.0;
bool gi_112 = FALSE;
double gd_116 = 0.0;
extern string BalanceControlOptions = "------ BalanceControl options -----";
extern bool UseBalanceControl = FALSE;
extern bool SaveLotsValueAfterDD = FALSE;
extern int RestoreDepoMode = 1;
extern int RestoreOrderMode = 0;
extern bool AlwaysUseMaxLot = FALSE;
extern bool RestoreLostProfit = FALSE;
double gd_156 = 0.0;
int gi_164 = 2;
bool gi_168 = FALSE;
extern string TradeOptions = "--------   Trade  options  --------";
bool gi_180 = FALSE;
extern bool CrossOverMode = TRUE;
bool gi_188 = FALSE;
bool gi_192 = FALSE;
int gi_196 = 3000;
int gi_200 = 250;
int gi_204 = 30000;
string gs_208 = "";
string gs_216 = "";
extern int SettingsNumber = 1;
extern int FletFilterLevel = 0;
extern int TrendFilterLevel = 0;
extern int ProfitSensLevel = 0;
int gi_240 = 0;
int gi_244 = 0;
int gi_248 = 8;
int gi_252 = 1;
bool gi_256 = FALSE;
int g_str2int_260 = 1;
extern bool InvisibleStopLoss = TRUE;
extern bool TrailingTakeProfit = TRUE;
int gi_272 = 0;
int gi_276 = 0;
bool g_str2int_280 = TRUE;
int g_str2int_284 = 0;
int g_str2int_288 = 20;
string gs_unused_292 = "--------";
int gi_300 = 0;
bool g_str2int_304 = FALSE;
bool g_str2int_308 = FALSE;
int g_str2int_312 = 300;
bool g_str2int_316 = TRUE;
int g_str2int_320 = 60;
int gi_324 = 0;
int gi_328 = 0;
int g_slippage_332 = 2;
int g_slippage_336 = 2;
bool g_str2int_340 = FALSE;
bool g_str2int_344 = TRUE;
int gi_348 = 0;
bool g_str2int_352 = FALSE;
bool g_str2int_356 = TRUE;
string gs_unused_360 = "--------";
bool g_str2int_368 = FALSE;
int gi_372 = 0;
bool g_str2int_376 = FALSE;
int gi_380 = 5;
bool g_str2int_384 = FALSE;
int gi_388 = -1;
int gi_392 = WHOLE_ARRAY;
int g_str2int_396 = 70;
bool g_str2int_400 = TRUE;
string gs_unused_404 = "--------";
double gd_412 = 0.0;
int g_str2int_420 = 0;
int g_str2int_424 = 0;
string gs_unused_428 = "--------";
double gd_436 = 0.0;
int g_str2int_444 = 0;
double gd_448 = 0.0;
int g_str2int_456 = 0;
int g_str2int_460 = 0;
int g_str2int_464 = 0;
string gs_unused_468 = "--------";
bool g_str2int_476 = TRUE;
int g_str2int_480 = 0;
int g_str2int_484 = 5;
int g_str2int_488 = 0;
int g_str2int_492 = 3;
int g_str2int_496 = 0;
int gi_500 = 0;
int gi_504 = 0;
int gi_508 = 0;
int gi_512 = 0;
int g_str2int_516 = 0;
bool g_str2int_520 = FALSE;
bool g_str2int_524 = FALSE;
bool g_str2int_528 = FALSE;
bool gi_532 = TRUE;
bool g_str2int_536 = FALSE;
bool g_str2int_540 = FALSE;
bool g_str2int_544 = FALSE;
string gs_unused_548 = "--------";
int g_period_556 = 0;
double gd_560 = 0.0;
int g_ma_method_568 = MODE_SMA;
int g_applied_price_572 = PRICE_CLOSE;
int g_str2int_576 = 0;
string gs_unused_580 = "--------";
int g_str2int_588 = 0;
double gd_592 = 0.0;
int g_str2int_600 = 0;
int g_str2int_604 = 0;
int g_str2int_608 = 0;
string gs_unused_612 = "--------";
double gd_620 = 0.0;
int g_str2int_628 = 0;
int g_str2int_632 = 0;
double gd_636 = 0.0;
int g_str2int_644 = 0;
int g_str2int_648 = 0;
string gs_unused_652 = "--------";
bool g_str2int_660 = FALSE;
int g_str2int_664;
int gi_668;
int g_str2int_672;
int gi_676;
int g_str2int_680;
int gi_684;
int g_str2int_688;
int gi_692;
int g_str2int_696;
int gi_700;
string gs_unused_704 = "--------";
bool g_str2int_712 = FALSE;
int g_timeframe_716 = 0;
int g_period_720 = 0;
int g_applied_price_724 = PRICE_CLOSE;
int g_timeframe_728 = 0;
int g_period_732 = 0;
int g_applied_price_736 = PRICE_CLOSE;
int gi_740 = 0;
int g_timeframe_744 = 0;
int g_period_748 = 0;
int g_applied_price_752 = PRICE_CLOSE;
int g_period_756 = 0;
double gd_760 = 0.0;
int g_ma_method_768 = MODE_SMA;
int g_applied_price_772 = PRICE_CLOSE;
int gi_776 = 0;
int g_str2int_780 = 0;
double g_str2dbl_784 = 0.0;
double g_str2dbl_792 = 0.0;
double g_str2dbl_800 = 0.0;
double g_str2dbl_808 = 0.0;
int g_str2int_816 = 0;
int g_str2int_820 = 0;
string gs_unused_824 = "--------";
bool gi_832 = FALSE;
double gd_836 = 0.0;
double gd_844 = 0.0;
double gd_852 = 0.0;
bool gi_860 = TRUE;
bool gi_864 = FALSE;
extern string TimeOptions = "--------   Time   options  --------";
extern bool UseAutoTimeSettings = TRUE;
extern int TimeZone = 2;
extern int SWChangeMode = 0;
bool gi_888 = FALSE;
int g_str2int_892 = -2;
int gi_896 = 0;
int gi_900 = 0;
extern bool BlockWeekBegin = TRUE;
extern bool BlockWeekEnd = TRUE;
bool gi_912 = FALSE;
int gi_916 = 0;
int gi_920 = 0;
extern bool TradeHourOptimization = FALSE;
extern int OpenHourAM = 0;
extern int CloseHourAM = 0;
extern int OpenHourPM = 22;
extern int CloseHourPM = 24;
int g_str2int_944 = -1;
int g_str2int_948 = -1;
extern int MailReportTimeHour = -1;
bool gi_956 = FALSE;
bool gi_960 = FALSE;
bool gi_unused_964 = FALSE;
int gi_unused_968 = 10;
bool gi_unused_972 = TRUE;
int gi_unused_976 = 10;
bool gi_unused_980 = FALSE;
bool gi_unused_984 = FALSE;
int gi_unused_988 = 5;
int gi_unused_992 = 30;
int gi_unused_996 = 60;
bool gi_unused_1000 = TRUE;
bool gi_unused_1004 = TRUE;
bool gi_unused_1008 = TRUE;
bool gi_unused_1012 = TRUE;
bool gi_unused_1016 = TRUE;
bool gi_unused_1020 = TRUE;
bool gi_unused_1024 = TRUE;
bool gi_unused_1028 = TRUE;
bool gi_unused_1032 = TRUE;
extern string OtherOptions = "--------   Other  options  --------";
int gi_1044 = 0;
bool gi_1048 = TRUE;
extern bool ShowTimes = FALSE;
extern bool ShowInformation = TRUE;
bool gi_1060 = FALSE;
extern int InformationStringNumber = 30;
extern bool ShowSpreadsMeasurement = FALSE;
bool gi_1072 = FALSE;
bool gi_1076 = FALSE;
bool gi_1080 = TRUE;
bool gi_1084 = TRUE;
bool gi_1088 = TRUE;
bool gi_1092 = TRUE;
extern bool ShowOrderComments = TRUE;
bool gi_1100 = FALSE;
bool gi_1104 = FALSE;
bool gi_1108 = TRUE;
bool gi_1112 = FALSE;
double gd_1116 = 5.0;
bool gi_1124 = TRUE;
extern string Language = "rus";
extern string AdvancedOptions = "-------- Advanced options  --------";
extern bool CheckFreeMargin = FALSE;
bool gi_1148 = TRUE;
bool gi_1152 = TRUE;
bool gi_1156 = FALSE;
bool gi_unused_1160 = TRUE;
bool gi_unused_1164 = TRUE;
bool gi_1168 = TRUE;
bool gi_1172 = FALSE;
bool gi_1176 = FALSE;
bool gi_1180 = TRUE;
bool gi_1184 = TRUE;
bool gi_1188 = FALSE;
extern bool BlockAfterHandClose = TRUE;
extern bool BlockAfterLostOrder = TRUE;
bool gi_1200 = TRUE;
extern int MaxSpreadValue = 0;
extern double MinLotValue = 0.0;
extern double LotStepValue = 0.0;
double gd_1224 = 0.0;
string gs_1232 = "www.forexover.com";
string gs_1240 = "/key/get_key.php?";
int gi_1248 = 80;
int gi_unused_1252 = 2;
bool gi_1256 = TRUE;
int gi_1260;
int gi_1264;
int gi_unused_1268;
bool gi_1272;
int gi_unused_1276;
int gi_unused_1280;
int gi_unused_1284;
int gi_1288;
int gi_1292;
int gi_1296;
int gi_unused_1300;
int gi_unused_1304;
int gi_unused_1308;
int gi_unused_1312;
int gi_unused_1316;
int gi_unused_1320;
int gi_1324;
int gi_1328;
int gi_unused_1332;
int gi_unused_1336;
int gi_unused_1340;
int gi_unused_1344;
int gi_unused_1348;
int gi_unused_1352;
int g_magic_1356;
int gi_unused_1360;
int gi_unused_1364;
int gi_unused_1368;
int g_minute_1372;
int g_str2int_1376;
int gi_1380;
int gi_1384;
int gi_1388;
bool gi_1392;
int gi_1396;
int gi_1400;
int gi_1404;
int gi_1408;
int gi_1412;
int gi_1416;
int gi_unused_1420 = 0;
int gi_unused_1424 = 0;
int gi_unused_1428 = 10;
int gi_unused_1432;
int g_day_of_week_1436;
int g_day_of_week_1440;
int gi_unused_1444;
int gi_unused_1448;
int gi_1452;
datetime g_time_1456;
int gi_1460;
int g_hour_1464;
int g_day_of_week_1468;
int gi_1472;
int g_month_1476;
int g_year_1480;
int g_count_1484;
int gi_1488;
int gi_1492;
int g_count_1496;
int gi_1500;
bool gi_1504;
bool gi_1508;
int gi_1512;
int gi_1516;
bool g_bars_1520;
int gia_1524[5][10];
int gia_1528[500][10];
int g_str2int_1532;
int g_str2int_1536;
int g_str2int_1540;
int g_count_1544;
int gi_1548;
int gi_1552;
double gd_1556;
double gd_unused_1564;
double gd_1572;
double gd_1580;
double gd_1588;
double gd_1596;
double gd_1604;
double gd_unused_1612;
double gd_unused_1620;
double gd_unused_1628;
double gd_1636;
double gd_unused_1644;
double gd_1652;
double gd_unused_1660;
double gd_unused_1668;
double gd_unused_1676;
double gd_unused_1684;
double gda_1692[1][6];
double gda_1696[1][8];
double gda_1700[30];
double gd_1704;
double gd_1712;
int gi_unused_1720;
int gi_unused_1728;
int gi_unused_1732;
int gi_unused_1736;
bool gi_1740;
bool gi_1744;
int gi_unused_1748;
int gi_unused_1756;
bool gi_1760;
bool gi_1764;
int gi_unused_1768;
bool gi_1772;
bool gi_1776;
int gi_unused_1780;
int gi_unused_1784;
int gi_unused_1788;
bool gi_1792;
int gi_unused_1796;
bool gi_1800;
int gi_unused_1804;
bool gi_1808;
int gi_unused_1812;
int gi_unused_1816;
bool gi_1820;
bool gi_1824;
bool gi_1828;
bool gi_1836;
bool gi_1840;
bool gi_1844;
bool gi_1848;
bool g_bool_1852;
bool gi_1856;
bool gi_1860;
bool gi_1864;
int gi_unused_1868;
bool gi_1872;
bool gi_1876;
int g_bool_1880;
int gi_1884;
int gi_unused_1888;
int gi_unused_1892;
int gi_1896;
int gi_1900;
int gi_1904;
int gi_1908;
int gi_1912;
string gs_1916;
string gs_1924;
string gs_unused_1932;
string gs_unused_1940;
string gs_1948;
string gs_1956;
string gs_1964;
string gs_1972;
string gsa_1980[7];
string gsa_1984[50];
string gsa_1988[170][21];
string gsa_1992[170][21];
string gsa_1996[4300];
string gsa_2000[20];
string gs_2004;
string gs_2012;
string gs_2020;
string g_name_2028;
string gs_2036;
string gs_2044;
string g_var_name_2052;
string g_var_name_2060;
string g_var_name_2068;
string g_var_name_2076;
string g_var_name_2084;
string g_var_name_2092;
string gs_2100;
string gs_2108;
string gs_2116;
string gs_2124;
double gd_2132;
double gd_2140;
double gd_2148;
double g_point_2156;
int gi_2164;
string g_symbol_2168;
string g_symbol_2176;
string gs_2184;
string gs_2192;
int gi_2200;
int gi_2204;
int gi_2208;
int gi_2212;
int gi_2216;
double g_point_2220;
double g_point_2228;
double g_digits_2236;
double g_digits_2244;
double gd_2252;
double gd_2260;
double gd_2268;
double gd_2276;
double g_bid_2284;
double g_ask_2292;
double g_bid_2300;
double g_ask_2308;
double g_spread_2316;
double g_spread_2324;
double gd_2332;
double gd_2340;
double gd_2348;
double gd_2356;
double gda_2364[48][5];
int g_count_2368;
double gda_2380[7][60];
int gia_2384[7][60];
int gia_2388[7][60];
string gsa_2392[7][60];
double gda_2396[50];
double gda_2400[50];
double gda_2404[50];
double gda_2408[50];
double gda_2412[50];
int gia_2416[50];
int gia_2420[50];
int g_datetime_2424;
datetime g_time_2428;
int gi_2432;
int gi_2436;
int gi_2440;
bool gi_2444;
bool gi_2452;
bool gi_2456;
int gi_unused_2460;
string gs_2464;
string gs_2472;
string gs_2480;
int gi_2488;
bool g_bars_2492;
int gi_2496;
double gda_2500[50];
double g_global_var_2504;
int gia_2512[6];
string gs_2516;
int gi_2524;
int gi_2528;
int gi_2532;

int funct_001(int ai_0) {
   bool li_ret_4 = FALSE;
   for (int l_count_8 = 0; l_count_8 < 10; l_count_8++) {
      gia_1524[0][l_count_8] = 0;
      gia_1524[1][l_count_8] = 0;
      gia_1524[2][l_count_8] = 0;
      gia_1524[3][l_count_8] = 0;
      gia_1524[4][l_count_8] = 0;
   }
   if (gi_888 && ai_0 >= 0) {
      funct_051(9, "funct_001()", "Àâòîóñòàíîâêà âðåìåíè", "Auto time settings");
      if (ai_0 > 99) ai_0 = 99;
      li_ret_4 = TRUE;
      if (li_ret_4) {
         for (l_count_8 = 0; l_count_8 < 10; l_count_8++) {
            gia_1524[0][l_count_8] = gia_1528[5 * ai_0 + 0][l_count_8];
            gia_1524[1][l_count_8] = gia_1528[5 * ai_0 + 1][l_count_8];
            gia_1524[2][l_count_8] = gia_1528[5 * ai_0 + 2][l_count_8];
            gia_1524[3][l_count_8] = gia_1528[5 * ai_0 + 3][l_count_8];
            gia_1524[4][l_count_8] = gia_1528[5 * ai_0 + 4][l_count_8];
         }
      }
   } else {
      funct_051(9, "funct_001()", "Ðó÷íàÿ óñòàíîâêà âðåìåíè", "Manual time settings");
      gia_1524[0][0] = OpenHourAM;
      gia_1524[0][1] = CloseHourAM;
      gia_1524[0][2] = OpenHourPM;
      gia_1524[0][3] = CloseHourPM;
      gia_1524[1][0] = OpenHourAM;
      gia_1524[1][1] = CloseHourAM;
      gia_1524[1][2] = OpenHourPM;
      gia_1524[1][3] = CloseHourPM;
      gia_1524[2][0] = OpenHourAM;
      gia_1524[2][1] = CloseHourAM;
      gia_1524[2][2] = OpenHourPM;
      gia_1524[2][3] = CloseHourPM;
      gia_1524[3][0] = OpenHourAM;
      gia_1524[3][1] = CloseHourAM;
      gia_1524[3][2] = OpenHourPM;
      gia_1524[3][3] = CloseHourPM;
      gia_1524[4][0] = OpenHourAM;
      gia_1524[4][1] = CloseHourAM;
      gia_1524[4][2] = OpenHourPM;
      gia_1524[4][3] = CloseHourPM;
   }
   return (li_ret_4);
}

int init() {
   Comment("");
   funct_072();
   funct_033("ReceiveBuffer", 0);
   funct_033("CommandBuffer", 0);
   funct_033("VariablesBuffer", 0);
   funct_033("InformationBuffer", 0);
   funct_033("LogFileBuffer", 0);
   funct_033("ErrorArray", 0);
   funct_033("LoadSettingsArray", 0);
   funct_033("SettingsArray", 0);
   funct_033("SpreadArray", 0);
   funct_033("OSbuffer", 0);
   funct_033("OSbuffer", 1);
   funct_033("OSbuffer", 2);
   funct_033("OSbuffer", 3);
   funct_033("OSbuffer", 4);
   funct_033("OSbuffer", 5);
   funct_033("OSbuffer", 6);
   gia_2388[0][2] = Time[0];
   gia_2388[1][2] = Time[0];
   gia_2388[2][2] = Time[0];
   gia_2388[3][2] = Time[0];
   gia_2388[4][2] = Time[0];
   gia_2388[5][2] = Time[0];
   gia_2388[6][2] = Time[0];
   if (gi_1256) HideTestIndicators(TRUE);
   g_bool_1852 = IsTradeAllowed();
   g_bool_1880 = IsConnected();
   g_time_2428 = 0;
   if (!g_str2int_476) {
      g_str2int_484 = g_str2int_480;
      g_str2int_492 = g_str2int_480;
      g_str2int_496 = g_str2int_480;
   }
   funct_059();
   if (IsOptimization() || IsTesting()) {
      gi_1084 = FALSE;
      if (!IsVisualMode()) {
         gi_1048 = FALSE;
         gi_1088 = FALSE;
      }
      if (TradeHourOptimization) {
         if (OpenHourAM > 23) OpenHourAM = 23;
         CloseHourAM = OpenHourAM + 1;
         OpenHourPM = 24;
         CloseHourPM = 24;
      }
   } else TradeHourOptimization = FALSE;
   funct_060();
   funct_081();
   gd_1712 = funct_062("Symbol");
   gd_1596 = NormalizeDouble(100000.0 * (0.95 * funct_066(0)) / MarketInfo(Symbol(), MODE_LOTSIZE), 2);
   funct_061();
   gi_1860 = funct_055();
   InitErrorArray();
   funct_053();
   funct_048();
   funct_067();
   funct_002(SettingsNumber, 1);
   funct_001(gi_896);
   funct_045();
   funct_022();
   gi_1856 = funct_065();
   funct_090(0, 0);
   if (g_str2int_340) {
      if (LotsPercent > 30 && Lots == 0.0) {
         g_str2int_340 = FALSE;
         funct_051(8, "Init()", "Íåâîçìîæíî óñòàíîâèòü ContinueAfterClose: LotsPercent>30", "Unable to set ContinueAfterClose: LotsPercent>30");
      }
   }
   funct_050();
   funct_049();
   if (gi_1856) funct_051(8, "Init()", "Èíèöèàëèçàöèÿ çàâåðøåíà (Ëèöåíçèÿ-ÍÅÒ - îáðàòèòåñü â òåõ. ïîääåðæêó admin@forexover.com)", "Initialization completed (License-NO - contact support admin@forexover.com)");
   else funct_051(8, "Init()", "Èíèöèàëèçàöèÿ çàâåðøåíà (Ëèöåíçèÿ-ÎÊ)", "Initialization completed (License-OK)");
   funct_058(" ");
   return (0);
}

int start() {
   int li_4;
   bool li_0 = TRUE;
   while (li_0) {
      li_4 = AccountNumber() + StringLen(AccountCompany()) + StringLen(AccountName()) + StringLen(AccountServer());
      if (gi_2496 != li_4) {
         gi_1872 = TRUE;
         gi_2496 = li_4;
         funct_051(8, "Start()", "Òîðãîâëÿ çàáëîêèðîâàíà - èçìåíèëèñü ïàðàìåòðû òîðãîâîãî ñ÷åòà", "Trade is disabled - account details changed");
      }
      if (gi_1872 && !IsTesting() && !IsOptimization()) return (0);
      gi_1460 = GetTickCount();
      funct_081();
      funct_022();
      if (!MarketInfoMode) funct_004();
      funct_099();
      if (gi_180 && IsExpertEnabled()) Sleep(gi_200);
      else li_0 = FALSE;
      funct_058(" ");
   }
   return (0);
}

bool funct_003(string as_0, int ai_8) {
   if (as_0 == "") return (FALSE);
   if (!IsDllsAllowed()) return (FALSE);
   if (gi_2528 > 0 || gi_2532 > 0) funct_102();
   if (InternetAttemptConnect(0) != 0) return (FALSE);
   string ls_12 = "Mozilla";
   string ls_20 = "";
   gi_2528 = InternetOpenA(ls_12, 0, ls_20, ls_20, 0);
   if (gi_2528 <= 0) {
      funct_102();
      return (FALSE);
   }
   gi_2532 = InternetConnectA(gi_2528, as_0, ai_8, ls_20, ls_20, 3, 0, 0);
   if (gi_2532 <= 0) {
      funct_102();
      return (FALSE);
   }
   gs_2516 = as_0;
   gi_2524 = ai_8;
   return (TRUE);
}

int funct_004() {
   bool li_4 = FALSE;
   bool li_8 = FALSE;
   if (!gi_2452) {
      gi_2452 = TRUE;
      funct_018();
   }
   for (int l_count_12 = 0; l_count_12 < 7; l_count_12++)
      if (funct_080(l_count_12)) funct_075(l_count_12);
   int li_0 = 1;
   li_4 = FALSE;
   li_8 = FALSE;
   if (RestoreOrderMode != 0 && gi_1864) {
      if (gia_2384[0][0] != 0) {
         if (RestoreOrderMode == 1) {
            li_4 = TRUE;
            li_8 = TRUE;
         }
         if (RestoreOrderMode == 2) {
            if (gia_2384[0][1] == 0) li_8 = TRUE;
            if (gia_2384[0][1] == 1) li_4 = TRUE;
         }
         if (RestoreOrderMode == 3) {
            if (gia_2384[0][1] == 0) li_4 = TRUE;
            if (gia_2384[0][1] == 1) li_8 = TRUE;
         }
      }
   }
   funct_073(li_0, li_4, li_8);
   li_0 = 0;
   li_4 = FALSE;
   li_8 = FALSE;
   if (gia_2384[1][0] == 0) {
      li_4 = TRUE;
      li_8 = TRUE;
   }
   funct_073(li_0, li_4, li_8);
   bool li_16 = FALSE;
   bool li_20 = FALSE;
   li_0 = 2;
   li_4 = FALSE;
   li_8 = FALSE;
   if (gi_244 != 0 && !gi_1864) {
      if (gia_2384[0][0] == 96 && gia_2384[1][0] == 0) {
         if (gia_2384[0][10] <= (-1 * gi_248) && gi_252 > 0) {
            li_16 = FALSE;
            li_20 = FALSE;
            if (gia_2384[0][1] == 0) li_20 = TRUE;
            if (gia_2384[0][1] == 1) li_16 = TRUE;
            if (gi_244 == 1) {
               if (!li_16) li_4 = TRUE;
               if (!li_20) li_8 = TRUE;
            }
            if (gi_244 == 2) {
               if (gia_2384[0][1] == 0 && !li_20) li_8 = TRUE;
               if (gia_2384[0][1] == 1 && !li_16) li_4 = TRUE;
            }
            if (gi_244 == 3) {
               if (gia_2384[0][1] == 0) li_4 = TRUE;
               if (gia_2384[0][1] == 1) li_8 = TRUE;
            }
         }
      }
   }
   funct_073(li_0, li_4, li_8);
   li_0 = 3;
   li_4 = FALSE;
   li_8 = FALSE;
   if (gi_244 != 0 && !gi_1864) {
      if (gia_2384[0][0] == 96 && gia_2384[1][0] == 0 && gia_2384[2][0] == 96) {
         if (gia_2384[0][10] <= (-2 * gi_248) && gi_252 > 1) {
            li_16 = FALSE;
            li_20 = FALSE;
            if (gia_2384[0][1] == 0) li_20 = TRUE;
            if (gia_2384[0][1] == 1) li_16 = TRUE;
            if (gi_244 == 1) {
               if (!li_16) li_4 = TRUE;
               if (!li_20) li_8 = TRUE;
            }
            if (gi_244 == 2) {
               if (gia_2384[0][1] == 0 && !li_20) li_8 = TRUE;
               if (gia_2384[0][1] == 1 && !li_16) li_4 = TRUE;
            }
            if (gi_244 == 3) {
               if (gia_2384[0][1] == 0) li_4 = TRUE;
               if (gia_2384[0][1] == 1) li_8 = TRUE;
            }
         }
      }
   }
   funct_073(li_0, li_4, li_8);
   li_0 = 4;
   li_4 = FALSE;
   li_8 = FALSE;
   if (gi_244 != 0 && !gi_1864) {
      if (gia_2384[0][0] == 96 && gia_2384[1][0] == 0 && gia_2384[3][0] == 96) {
         if (gia_2384[0][10] <= (-3 * gi_248) && gi_252 > 2) {
            li_16 = FALSE;
            li_20 = FALSE;
            if (gia_2384[0][1] == 0) li_20 = TRUE;
            if (gia_2384[0][1] == 1) li_16 = TRUE;
            if (gi_244 == 1) {
               if (!li_16) li_4 = TRUE;
               if (!li_20) li_8 = TRUE;
            }
            if (gi_244 == 2) {
               if (gia_2384[0][1] == 0 && !li_20) li_8 = TRUE;
               if (gia_2384[0][1] == 1 && !li_16) li_4 = TRUE;
            }
            if (gi_244 == 3) {
               if (gia_2384[0][1] == 0) li_4 = TRUE;
               if (gia_2384[0][1] == 1) li_8 = TRUE;
            }
         }
      }
   }
   funct_073(li_0, li_4, li_8);
   li_0 = 5;
   li_4 = FALSE;
   li_8 = FALSE;
   if (gi_244 != 0 && !gi_1864) {
      if (gia_2384[0][0] == 96 && gia_2384[1][0] == 0 && gia_2384[4][0] == 96) {
         if (gia_2384[0][10] <= (-4 * gi_248) && gi_252 > 3) {
            li_16 = FALSE;
            li_20 = FALSE;
            if (gia_2384[0][1] == 0) li_20 = TRUE;
            if (gia_2384[0][1] == 1) li_16 = TRUE;
            if (gi_244 == 1) {
               if (!li_16) li_4 = TRUE;
               if (!li_20) li_8 = TRUE;
            }
            if (gi_244 == 2) {
               if (gia_2384[0][1] == 0 && !li_20) li_8 = TRUE;
               if (gia_2384[0][1] == 1 && !li_16) li_4 = TRUE;
            }
            if (gi_244 == 3) {
               if (gia_2384[0][1] == 0) li_4 = TRUE;
               if (gia_2384[0][1] == 1) li_8 = TRUE;
            }
         }
      }
   }
   funct_073(li_0, li_4, li_8);
   li_0 = 6;
   li_4 = FALSE;
   li_8 = FALSE;
   if (gi_244 != 0 && !gi_1864) {
      if (gia_2384[0][0] == 96 && gia_2384[1][0] == 0 && gia_2384[5][0] == 96) {
         if (gia_2384[0][10] <= (-5 * gi_248) && gi_252 > 4) {
            li_16 = FALSE;
            li_20 = FALSE;
            if (gia_2384[0][1] == 0) li_20 = TRUE;
            if (gia_2384[0][1] == 1) li_16 = TRUE;
            if (gi_244 == 1) {
               if (!li_16) li_4 = TRUE;
               if (!li_20) li_8 = TRUE;
            }
            if (gi_244 == 2) {
               if (gia_2384[0][1] == 0 && !li_20) li_8 = TRUE;
               if (gia_2384[0][1] == 1 && !li_16) li_4 = TRUE;
            }
            if (gi_244 == 3) {
               if (gia_2384[0][1] == 0) li_4 = TRUE;
               if (gia_2384[0][1] == 1) li_8 = TRUE;
            }
         }
      }
   }
   funct_073(li_0, li_4, li_8);
   funct_007();
   return (1);
}

bool funct_005(int ai_0) {
   bool li_ret_4 = FALSE;
   if (gia_2384[ai_0][1] == 1 && !funct_011(g_str2int_524)) {
      if ((g_str2int_368 && funct_030(1, g_str2int_492, g_str2int_540, gi_508, "MinProfit") && funct_026(ai_0, gi_372 - gi_1264 + gi_1292 + gi_1260, "MinProfit")) || (!g_str2int_368 &&
         funct_030(1, g_str2int_492, g_str2int_540, gi_508, "ChannelClose")) || (funct_030(1, g_str2int_496, g_str2int_544, gi_512, "ChannelOff") && g_str2int_496 != 0) || (g_str2int_376 && funct_026(ai_0, funct_028(ai_0), "OptProfit")) ||
         (g_str2int_376 && gi_1848 && gi_388 >= 0 && funct_026(ai_0, gi_388, "NoTimeOptProfit")) || funct_027(1)) li_ret_4 = TRUE;
   }
   if (gia_2384[ai_0][1] == 0 && !funct_011(g_str2int_524)) {
      if ((g_str2int_368 && funct_030(0, g_str2int_492, g_str2int_540, gi_508, "MinProfit") && funct_026(ai_0, gi_372 - gi_1264 + gi_1292 + gi_1260, "MinProfit")) || (!g_str2int_368 &&
         funct_030(0, g_str2int_492, g_str2int_540, gi_508, "ChannelClose")) || (funct_030(0, g_str2int_496, g_str2int_544, gi_512, "ChannelOff") && g_str2int_496 != 0) || (g_str2int_376 && funct_026(ai_0, funct_028(ai_0), "OptProfit")) ||
         (g_str2int_376 && gi_1848 && gi_388 >= 0 && funct_026(ai_0, gi_388, "NoTimeOptProfit")) || funct_027(0)) li_ret_4 = TRUE;
   }
   return (li_ret_4);
}

int funct_006(int ai_0, int ai_unused_4, int ai_8, int ai_unused_12, double a_pips_16, int ai_24) {
   double ld_32;
   bool li_ret_28 = TRUE;
   if (ai_8 != 0) {
      ld_32 = gda_2500[1];
      if (ai_24 == 1) ld_32 = MathRound(ld_32 / Point) * Point;
      if (ai_24 == 2 && ai_0 == 1) ld_32 = MathFloor(ld_32 / Point) * Point;
      if (ai_24 == 2 && ai_0 == 0) ld_32 = MathCeil(ld_32 / Point) * Point;
      if (ai_24 == 3 && ai_0 == 0) ld_32 = MathFloor(ld_32 / Point) * Point;
      if (ai_24 == 3 && ai_0 == 1) ld_32 = MathCeil(ld_32 / Point) * Point;
      if (MathAbs(Bid - ld_32 + gi_2216 * gi_2488) <= a_pips_16 * Point) li_ret_28 = FALSE;
   }
   return (li_ret_28);
}

int funct_007() {
   string ls_unused_12;
   bool li_0 = FALSE;
   string l_name_4 = gs_2472;
   if (IsOptimization() || IsTesting()) return (0);
   for (int l_index_24 = 0; l_index_24 < 7; l_index_24++)
      if (gia_2512[l_index_24] != gia_2384[l_index_24][0]) li_0 = TRUE;
   if (!li_0) return (0);
   int l_file_20 = FileOpen(l_name_4, FILE_CSV|FILE_WRITE, ';');
   if (l_file_20 < 1) return (0);
   for (l_index_24 = 0; l_index_24 < 7; l_index_24++) {
      FileWrite(l_file_20, gia_2384[l_index_24][0], gia_2384[l_index_24][1], gsa_2392[l_index_24][0], gsa_2392[l_index_24][1], gsa_2392[l_index_24][2], gda_2380[l_index_24][7], gia_2384[l_index_24][4], gia_2384[l_index_24][5], gia_2384[l_index_24][6], gia_2384[l_index_24][7], gia_2384[l_index_24][8], gia_2384[l_index_24][9], gia_2384[l_index_24][11], gia_2384[l_index_24][12], gia_2384[l_index_24][13], gia_2384[l_index_24][14], gda_2380[l_index_24][6], gda_2380[l_index_24][5], TimeToStr(gia_2388[l_index_24][2], TIME_DATE|TIME_SECONDS), TimeToStr(gia_2388[l_index_24][3], TIME_DATE|TIME_SECONDS), TimeToStr(gia_2388[l_index_24][4], TIME_DATE|TIME_SECONDS), TimeToStr(gia_2388[l_index_24][5], TIME_DATE|TIME_SECONDS));
      gia_2512[l_index_24] = gia_2384[l_index_24][0];
   }
   FileClose(l_file_20);
   return (1);
}

int funct_008(int ai_0) {
   bool li_ret_4 = FALSE;
   gs_2480 = "";
   if (!funct_011(g_str2int_520) && !funct_011(g_str2int_528) && !funct_096(gi_532) && !gi_1824 && !gi_1772 && !gi_1836 && !gi_1828 && !gi_1840 && !gi_1844 && !gi_1876 &&
      !gi_1856) {
      if (ai_0 == 1) {
         if (!gi_1848) {
            if ((g_str2int_260 == 0 || g_str2int_260 == 1 && funct_006(1, g_ma_method_568, g_period_556, g_applied_price_572, gd_560, g_str2int_576) && funct_029(1, g_str2int_484, g_str2int_536, gi_500)) ||
               (g_str2int_260 == 0 || g_str2int_260 == 2 && funct_006(1, g_str2int_644, g_str2int_632, g_str2int_648, gd_636, g_str2int_576) && funct_029(1, g_str2int_488, g_str2int_536, gi_504)) ||
               (g_str2int_260 == 4 && funct_040(1))) li_ret_4 = TRUE;
         }
      }
      if (ai_0 == 0) {
         if (!gi_1848) {
            if ((g_str2int_260 == 0 || g_str2int_260 == 1 && funct_006(0, g_ma_method_568, g_period_556, g_applied_price_572, gd_560, g_str2int_576) && funct_029(0, g_str2int_484, g_str2int_536, gi_500)) ||
               (g_str2int_260 == 0 || g_str2int_260 == 2 && funct_006(0, g_str2int_644, g_str2int_632, g_str2int_648, gd_636, g_str2int_576) && funct_029(0, g_str2int_488, g_str2int_536, gi_504)) ||
               (g_str2int_260 == 4 && funct_040(0))) li_ret_4 = TRUE;
         }
      }
   }
   return (li_ret_4);
}

int funct_009() {
   bool li_ret_0 = FALSE;
   int li_4 = MathRound(gd_2132);
   if (gi_1504 != li_4 && gi_1072) {
      funct_051(8, "funct_009()", "Èçìåíèëîñü çíà÷åíèå ñïðåäà ñ " + gi_1504 + " íà " + li_4, "Spread value change from " + gi_1504 + " to " + li_4);
      gi_1504 = li_4;
   }
   if (li_4 <= MaxSpreadValue) li_ret_0 = TRUE;
   return (li_ret_0);
}

int funct_010() {
   bool li_ret_0 = FALSE;
   if (CrossOverMode) return (li_ret_0);
   if (gi_1324 != gi_1552) {
      funct_051(8, "funct_010()", "Èçìåíèëîñü çíà÷åíèå FreezeLevel ñ " + gi_1324 + " íà " + gi_1552, "FreezeLevel value change from " + gi_1324 + " to " + gi_1552);
      gi_1324 = gi_1552;
   }
   if (gi_1328 != gi_1548) {
      funct_051(8, "funct_010()", "Èçìåíèëîñü çíà÷åíèå StopLevel ñ " + gi_1328 + " íà " + gi_1548, "StopLevel value change from " + gi_1328 + " to " + gi_1548);
      gi_1328 = gi_1548;
   }
   return (li_ret_0);
}

bool funct_011(int ai_unused_0) {
   bool li_ret_4 = FALSE;
   return (li_ret_4);
}

int funct_012(int ai_0, int a_cmd_4) {
   int l_bool_28;
   int li_32;
   string ls_44;
   double l_price_52;
   double l_ord_open_price_60;
   double l_ord_open_price_68;
   double l_ord_profit_76;
   double l_ord_profit_84;
   string ls_92;
   string ls_100;
   int l_datetime_108;
   int l_datetime_112;
   int l_cmd_116;
   int l_cmd_120;
   double l_ord_lots_124;
   double l_ord_lots_132;
   color l_color_140;
   bool li_144;
   bool li_148;
   bool li_ret_8 = FALSE;
   int li_unused_12 = 0;
   int li_unused_16 = 0;
   int li_unused_20 = 1;
   int l_pos_24 = 0;
   int l_error_40 = -1;
   if (TimeCurrent() - gia_2388[ai_0][5] < gi_196 * gia_2384[ai_0][14] / 1000) return (li_ret_8);
   li_unused_16 = 1;
   int li_36 = GetTickCount();
   if (a_cmd_4 == OP_BUY) ls_44 = "Buy";
   if (a_cmd_4 == OP_SELL) ls_44 = "Sell";
   if (CrossOverMode) ls_44 = "cross-" + ls_44;
   if (!CrossOverMode) {
      li_32 = OrdersTotal() - 1;
      for (l_pos_24 = li_32; l_pos_24 >= 0; l_pos_24--) {
         l_bool_28 = OrderSelect(l_pos_24, SELECT_BY_POS, MODE_TRADES);
         if (l_bool_28 > FALSE && OrderMagicNumber() == g_magic_1356 && OrderSymbol() == Symbol() && StringFind(OrderComment(), gsa_2392[ai_0][4]) >= 0) break;
      }
      if (l_bool_28 <= FALSE) {
         funct_051(9, "funct_012()", "Close ticket=0 (" + l_bool_28 + "): " + funct_052(GetLastError()), "Close ticket=0 (" + l_bool_28 + "): " + funct_052(GetLastError()));
         return (li_ret_8);
      }
      if (funct_014()) return (li_ret_8);
      a_cmd_4 = OrderType();
      if (a_cmd_4 == OP_BUY) {
         if (gd_2148 >= gda_2380[ai_0][3] && gda_2380[ai_0][3] > 0.0) return (li_ret_8);
         funct_081();
         li_ret_8 = FALSE;
         if ((gd_2148 >= gda_2380[ai_0][5] && gi_1168) || !gi_1168) li_ret_8 = TRUE;
         if (li_ret_8) gia_2384[ai_0][14]++;
         if (li_ret_8 && gia_2384[ai_0][3] < gi_300 && gi_300 > 0) {
            li_ret_8 = FALSE;
            l_error_40 = 4300;
         }
         if (li_ret_8 && !IsTradeAllowed()) {
            l_error_40 = 4;
            li_ret_8 = FALSE;
         }
         if (li_ret_8) {
            if (gia_2384[ai_0][14] > 1) {
               funct_051(8, "funct_012()", "Ïîâòîð çàêðûòèÿ îðäåðà " + ls_44 + gsa_2392[ai_0][4] + " (" + DoubleToStr(gd_2148, gi_2164) + "/" + DoubleToStr(gda_2380[ai_0][5], gi_2164) +
                  "), ïîïûòêà " + gia_2384[ai_0][14], "Try to reclose " + ls_44 + gsa_2392[ai_0][4] + " (" + DoubleToStr(gda_2380[ai_0][5], gi_2164) + "), trial " + gia_2384[ai_0][14]);
            }
            if (!OrderClose(OrderTicket(), OrderLots(), Bid, g_slippage_336, Blue)) {
               l_error_40 = GetLastError();
               li_ret_8 = FALSE;
            }
         }
      }
      if (a_cmd_4 == OP_SELL) {
         if (gd_2140 <= gda_2380[ai_0][3] && gda_2380[ai_0][3] > 0.0) return (li_ret_8);
         funct_081();
         li_ret_8 = FALSE;
         if ((gd_2140 <= gda_2380[ai_0][5] && gi_1168) || !gi_1168) li_ret_8 = TRUE;
         if (li_ret_8) gia_2384[ai_0][14]++;
         if (li_ret_8 && gia_2384[ai_0][3] < gi_300 && gi_300 > 0) {
            li_ret_8 = FALSE;
            l_error_40 = 4300;
         }
         if (li_ret_8 && !IsTradeAllowed()) {
            l_error_40 = 4;
            li_ret_8 = FALSE;
         }
         if (li_ret_8) {
            if (gia_2384[ai_0][14] > 1) {
               funct_051(8, "funct_012()", "Ïîâòîð çàêðûòèÿ îðäåðà " + ls_44 + gsa_2392[ai_0][4] + " (" + DoubleToStr(gd_2140, gi_2164) + "/" + DoubleToStr(gda_2380[ai_0][5], gi_2164) +
                  "), ïîïûòêà " + gia_2384[ai_0][14], "Try to reclose " + ls_44 + gsa_2392[ai_0][4] + " (" + DoubleToStr(gda_2380[ai_0][5], gi_2164) + "), trial " + gia_2384[ai_0][14]);
            }
            if (!OrderClose(OrderTicket(), OrderLots(), Ask, g_slippage_336, Red)) {
               l_error_40 = GetLastError();
               li_ret_8 = FALSE;
            }
         }
      }
   } else {
      ls_92 = "";
      ls_100 = "";
      li_144 = FALSE;
      li_148 = FALSE;
      li_32 = OrdersTotal() - 1;
      for (l_pos_24 = li_32; l_pos_24 >= 0; l_pos_24--) {
         l_bool_28 = OrderSelect(l_pos_24, SELECT_BY_POS, MODE_TRADES);
         if (l_bool_28 > FALSE && OrderMagicNumber() == g_magic_1356 && OrderSymbol() == g_symbol_2168 && StringFind(OrderComment(), gsa_2392[ai_0][4]) >= 0) {
            l_ord_profit_76 = OrderProfit();
            ls_92 = OrderTicket();
            li_144 = TRUE;
            li_ret_8 = FALSE;
            break;
         }
      }
      if (l_bool_28 <= FALSE) funct_051(9, "funct_012()", "crL Close OrderSelect=0", "crL Close OrderSelect=0");
      if (ls_92 != "") {
         li_36 = GetTickCount();
         funct_100(0);
         while (!li_ret_8) {
            funct_081();
            if (OrderType() == OP_SELL) l_price_52 = g_ask_2292;
            else l_price_52 = g_bid_2284;
            if (OrderType() == OP_SELL) l_color_140 = Red;
            else l_color_140 = Blue;
            funct_051(9, "", ls_44 + gsa_2392[ai_0][4] + " çàêðûâàåì îðäåð ïî " + gs_2184 + " " + OrderType() + "(" + OrderTicket() + "," + OrderLots() + "," + l_price_52 + ")", ls_44 +
               gsa_2392[ai_0][4] + " close cross orders " + gs_2184 + " " + OrderType() + "(" + OrderTicket() + "," + OrderLots() + "," + l_price_52 + ")");
            if (IsTradeAllowed()) {
               if (OrderClose(OrderTicket(), OrderLots(), NormalizeDouble(l_price_52, g_digits_2236), g_slippage_336 / gi_1288 * gi_2208, l_color_140)) li_ret_8 = TRUE;
               l_error_40 = GetLastError();
            }
            if (li_ret_8) {
               l_ord_open_price_60 = OrderOpenPrice();
               l_ord_profit_76 = OrderProfit();
               l_datetime_108 = OrderOpenTime();
               l_cmd_116 = OrderType();
               l_ord_lots_124 = OrderLots();
               break;
            }
            if (funct_100(gi_204)) return (0);
            gia_2384[ai_0][14]++;
            Sleep(gi_196);
            if (gia_2384[ai_0][14] > 0) {
               funct_051(8, "funct_012()", "Ïîâòîð çàêðûòèÿ îðäåðà  " + g_symbol_2168 + " (" + DoubleToStr(gda_2380[ai_0][5], gi_2164) + "), ïîïûòêà " + gia_2384[ai_0][14], "Try to reclose  " +
                  g_symbol_2168 + " (" + DoubleToStr(gda_2380[ai_0][5], gi_2164) + "), trial " + gia_2384[ai_0][14]);
            }
         }
      }
      for (l_pos_24 = li_32; l_pos_24 >= 0; l_pos_24--) {
         l_bool_28 = OrderSelect(l_pos_24, SELECT_BY_POS, MODE_TRADES);
         if (l_bool_28 > FALSE && OrderMagicNumber() == g_magic_1356 && OrderSymbol() == g_symbol_2176 && StringFind(OrderComment(), gsa_2392[ai_0][4]) >= 0) {
            l_ord_profit_84 = OrderProfit();
            ls_100 = OrderTicket();
            li_ret_8 = FALSE;
            li_148 = TRUE;
            break;
         }
      }
      if (l_bool_28 <= FALSE) funct_051(9, "funct_012()", "crR Close ticket=0", "crR Close ticket=0");
      if (ls_100 != "") {
         funct_100(0);
         while (!li_ret_8) {
            funct_081();
            ls_100 = OrderTicket();
            if (OrderType() == OP_SELL) l_price_52 = g_ask_2308;
            else l_price_52 = g_bid_2300;
            if (OrderType() == OP_SELL) l_color_140 = Red;
            else l_color_140 = Blue;
            funct_051(9, "", ls_44 + gsa_2392[ai_0][4] + " çàêðûâàåì îðäåð ïî " + gs_2192 + " " + OrderType() + "(" + OrderTicket() + "," + OrderLots() + "," + l_price_52 + ")", ls_44 +
               gsa_2392[ai_0][4] + " close cross orders " + gs_2192 + " " + OrderType() + "(" + OrderTicket() + "," + OrderLots() + "," + l_price_52 + ")");
            if (IsTradeAllowed()) {
               if (OrderClose(OrderTicket(), OrderLots(), NormalizeDouble(l_price_52, g_digits_2244), g_slippage_336 / gi_1288 * gi_2212, l_color_140)) li_ret_8 = TRUE;
               l_error_40 = GetLastError();
            }
            if (li_ret_8) {
               l_ord_open_price_68 = OrderOpenPrice();
               l_ord_profit_84 = OrderProfit();
               l_datetime_112 = OrderOpenTime();
               l_cmd_120 = OrderType();
               l_ord_lots_132 = OrderLots();
               li_148 = TRUE;
               break;
            }
            if (funct_100(gi_204)) return (0);
            gia_2384[ai_0][14]++;
            Sleep(gi_196);
            if (gia_2384[ai_0][14] > 0) {
               funct_051(8, "funct_012()", "Ïîâòîð çàêðûòèÿ îðäåðà  " + g_symbol_2176 + " (" + DoubleToStr(gda_2380[ai_0][5], gi_2164) + "), ïîïûòêà " + gia_2384[ai_0][14], "Try to reclose  " +
                  g_symbol_2176 + " (" + DoubleToStr(gda_2380[ai_0][5], gi_2164) + "), trial " + gia_2384[ai_0][14]);
            }
         }
      }
   }
   gia_2384[ai_0][12] = GetTickCount() - li_36;
   if (li_ret_8) {
      if (CrossOverMode) {
         if (li_144 && li_148) {
            gda_2380[ai_0][1] = funct_076(l_ord_open_price_60, l_ord_open_price_68);
            gda_2380[ai_0][2] = 0.0;
            gda_2380[ai_0][3] = 0.0;
            gda_2380[ai_0][4] = l_ord_profit_76 + l_ord_profit_84;
            gia_2388[ai_0][0] = 0;
            if (l_datetime_108 > l_datetime_112) gia_2388[ai_0][1] = l_datetime_108;
            else gia_2388[ai_0][1] = l_datetime_112;
            gia_2384[ai_0][1] = funct_077(l_cmd_116, l_cmd_120);
            gia_2384[ai_0][2] = OrderMagicNumber();
            gsa_2392[ai_0][0] = ls_92 + "/" + ls_100;
            gsa_2392[ai_0][1] = g_symbol_2168 + "/" + g_symbol_2176;
            gsa_2392[ai_0][2] = gs_2184 + "/" + gs_2192;
            gda_2380[ai_0][7] = l_ord_lots_124;
            gia_2384[ai_0][3] = TimeCurrent() - gia_2388[ai_0][1];
            if (gia_2384[ai_0][1] == 1) gia_2384[ai_0][4] = MathRound((gda_2380[ai_0][1] - gda_2380[ai_0][6]) / g_point_2156);
            if (gia_2384[ai_0][1] == 0) gia_2384[ai_0][4] = MathRound((gda_2380[ai_0][6] - gda_2380[ai_0][1]) / g_point_2156);
            gia_2388[ai_0][3] = Time[0];
            gia_2384[ai_0][7] = gd_2132;
            gia_2384[ai_0][8] = gi_1296;
            gia_2384[ai_0][12] = GetTickCount() - li_36;
            li_ret_8 = TRUE;
         }
      } else {
         gda_2380[ai_0][1] = OrderOpenPrice();
         gda_2380[ai_0][2] = OrderStopLoss();
         gda_2380[ai_0][3] = OrderTakeProfit();
         gda_2380[ai_0][4] = OrderProfit();
         gia_2388[ai_0][1] = OrderOpenTime();
         gia_2384[ai_0][1] = OrderType();
         gia_2384[ai_0][2] = OrderMagicNumber();
         gsa_2392[ai_0][0] = OrderTicket();
         gsa_2392[ai_0][1] = OrderSymbol();
         gsa_2392[ai_0][2] = gs_1964;
         gda_2380[ai_0][7] = OrderLots();
         if (gia_2384[ai_0][1] == 1) gia_2384[ai_0][4] = MathRound((gda_2380[ai_0][1] - gda_2380[ai_0][6]) / g_point_2156);
         if (gia_2384[ai_0][1] == 0) gia_2384[ai_0][4] = MathRound((gda_2380[ai_0][6] - gda_2380[ai_0][1]) / g_point_2156);
         gia_2388[ai_0][3] = Time[0];
         gia_2384[ai_0][7] = gd_2132;
         gia_2384[ai_0][8] = gi_1296;
         gia_2384[ai_0][12] = GetTickCount() - li_36;
         li_ret_8 = TRUE;
         gi_unused_1748 = 0;
      }
   } else {
      if (!gi_1820) {
         if (l_error_40 > -1) {
            if (l_error_40 == 4/* SERVER_BUSY */) {
               if (!gi_1112) {
                  funct_051(8, "funct_012()", "Îøèáêà çàêðûòèÿ îðäåðà " + ls_44 + gsa_2392[ai_0][4] + " (" + DoubleToStr(gda_2380[ai_0][5], gi_2164) + "): òîðãîâûé ïîòîê çàíÿò", "Error to close " +
                     ls_44 + gsa_2392[ai_0][4] + " order" + " (" + DoubleToStr(gda_2380[ai_0][5], gi_2164) + "): Trade context busy");
               } else {
                  funct_051(9, "funct_012()", "Îøèáêà çàêðûòèÿ îðäåðà " + ls_44 + gsa_2392[ai_0][4] + " (" + DoubleToStr(gda_2380[ai_0][5], gi_2164) + "): òîðãîâûé ïîòîê çàíÿò", "Error to close " +
                     ls_44 + gsa_2392[ai_0][4] + " order" + " (" + DoubleToStr(gda_2380[ai_0][5], gi_2164) + "): Trade context busy");
               }
            } else {
               if (l_error_40 == 4300) {
                  funct_051(8, "funct_012()", "Îøèáêà çàêðûòèÿ îðäåðà " + ls_44 + gsa_2392[ai_0][4] + " (" + DoubleToStr(gda_2380[ai_0][5], gi_2164) + "): ïðîäîëæèòåëüíîñòü ñäåëêè ìåíåå " +
                     gi_300 + "ñ", "Error to close " + ls_44 + gsa_2392[ai_0][4] + " order" + " (" + DoubleToStr(gda_2380[ai_0][5], gi_2164) + "): order lifetime is less then " + gi_300 + "c");
               } else {
                  funct_051(8, "funct_012()", "Îøèáêà çàêðûòèÿ îðäåðà " + ls_44 + gsa_2392[ai_0][4] + " (" + DoubleToStr(gda_2380[ai_0][5], gi_2164) + "): " + funct_052(l_error_40), "Error to close " +
                     ls_44 + gsa_2392[ai_0][4] + " order" + " (" + DoubleToStr(gda_2380[ai_0][5], gi_2164) + "): " + funct_052(l_error_40));
               }
            }
         }
      }
   }
   return (li_ret_8);
}

bool funct_013(int ai_0, int a_cmd_4, int ai_8, int ai_12) {
   int li_28;
   string ls_92;
   string ls_108;
   int l_cmd_116;
   int l_cmd_120;
   double l_lots_124;
   double l_lots_132;
   double l_ord_open_price_140;
   double l_ord_open_price_148;
   int l_ticket_156;
   int l_ticket_160;
   color l_color_164;
   int l_ticket_16 = 0;
   int l_error_24 = 9999;
   bool li_ret_32 = FALSE;
   bool li_36 = TRUE;
   bool li_40 = TRUE;
   if (TimeCurrent() - gia_2388[ai_0][4] < gi_196 * gia_2384[ai_0][13] / 1000) return (li_ret_32);
   double ld_unused_52 = gd_2140;
   double ld_unused_60 = gd_2148;
   double l_price_68 = ai_8 / 10.0;
   double l_price_76 = ai_12 / 10.0;
   string ls_84 = "";
   string ls_100 = "";
   if (gi_1864) ls_100 = "(res)";
   if (a_cmd_4 == OP_BUY) ls_92 = "Buy";
   if (a_cmd_4 == OP_SELL) ls_92 = "Sell";
   if (CrossOverMode) ls_92 = "cross-" + ls_92;
   double l_lots_44 = funct_037(gs_1964);
   if (!CrossOverMode) {
      if (l_price_68 != 0.0 && !InvisibleStopLoss) {
         if (l_price_68 < gi_1548) l_price_68 = gi_1548;
         if (a_cmd_4 == OP_BUY) l_price_68 = NormalizeDouble(gd_2148 + l_price_68 * g_point_2156, gi_2164);
         if (a_cmd_4 == OP_SELL) l_price_68 = NormalizeDouble(gd_2148 + l_price_68 * g_point_2156, gi_2164);
      }
      if (l_price_76 != 0.0) {
         if (l_price_76 < gi_1548) l_price_76 = gi_1548;
         if (a_cmd_4 == OP_BUY) l_price_76 = NormalizeDouble(gd_2148 - l_price_76 * g_point_2156, gi_2164);
         if (a_cmd_4 == OP_SELL) l_price_76 = NormalizeDouble(gd_2148 - l_price_76 * g_point_2156, gi_2164);
      }
      if (g_str2int_280 && !gi_960) {
         l_price_68 = 0;
         l_price_76 = 0;
      }
   }
   if ((TimeCurrent() - gia_2388[ai_0][4]) / 60 > g_str2int_320) {
      funct_051(8, "funct_013()", "Íå óäàëîñü ïîâòîðèòü îòêðûòèå îðäåðà " + ls_92 + gsa_2392[ai_0][4] + ", èñòåêëî âðåìÿ îæèäàíèÿ ïîâòîðà", "Unable to reopen " + ls_92 +
         gsa_2392[ai_0][4] + " order, time is over");
      funct_033("OSbuffer", ai_0);
      return (li_ret_32);
   }
   if (a_cmd_4 == OP_BUY) li_28 = MathRound((gd_2148 - gda_2380[ai_0][6]) / g_point_2156);
   if (a_cmd_4 == OP_SELL) li_28 = MathRound((gda_2380[ai_0][6] - gd_2140) / g_point_2156);
   if (li_28 >= gi_380 && gi_380 > 0) {
      funct_051(8, "funct_013()", "Íå óäàëîñü ïîâòîðèòü îòêðûòèå îðäåðà " + ls_92 + gsa_2392[ai_0][4] + ", ïðîôèò îòðàáîòàí (" + DoubleToStr(gda_2380[ai_0][6], gi_2164) +
         ")", "Unable to reopen " + ls_92 + gsa_2392[ai_0][4] + " order, profit worked by (" + DoubleToStr(gda_2380[ai_0][6], gi_2164) + ")");
      funct_033("OSbuffer", ai_0);
      return (li_ret_32);
   }
   if (a_cmd_4 == OP_BUY)
      if (gd_2140 > gda_2380[ai_0][6]) return (li_ret_32);
   if (a_cmd_4 == OP_SELL)
      if (gd_2148 < gda_2380[ai_0][6]) return (li_ret_32);
   gia_2384[ai_0][13]++;
   if (gia_2384[ai_0][13] > 1) {
      if (a_cmd_4 == OP_BUY) {
         funct_051(8, "funct_013()", "Ïîâòîð îòêðûòèÿ îðäåðà " + ls_92 + gsa_2392[ai_0][4] + " (" + DoubleToStr(gd_2140, gi_2164) + "/" + DoubleToStr(gda_2380[ai_0][6], gi_2164) +
            "), ïîïûòêà " + gia_2384[ai_0][13], "Try to reopen " + ls_92 + gsa_2392[ai_0][4] + " (" + DoubleToStr(gda_2380[ai_0][6], gi_2164) + "), trial " + gia_2384[ai_0][13]);
      }
      if (a_cmd_4 == OP_SELL) {
         funct_051(8, "funct_013()", "Ïîâòîð îòêðûòèÿ îðäåðà " + ls_92 + gsa_2392[ai_0][4] + " (" + DoubleToStr(gd_2148, gi_2164) + "/" + DoubleToStr(gda_2380[ai_0][6], gi_2164) +
            "), ïîïûòêà " + gia_2384[ai_0][13], "Try to reopen " + ls_92 + gsa_2392[ai_0][4] + " (" + DoubleToStr(gda_2380[ai_0][6], gi_2164) + "), trial " + gia_2384[ai_0][13]);
      }
   }
   if (l_lots_44 <= 0.0) {
      funct_051(9, "funct_013()", "Îøèáêà îòêðûòèÿ îðäåðà " + ls_92 + gsa_2392[ai_0][4] + " : Íåäîñòàòî÷íî äåíåã", "Error open " + ls_92 + gsa_2392[ai_0][4] + " order : Not enough money");
      return (FALSE);
   }
   if (!IsTradeAllowed()) {
      if (!gi_1112) funct_051(8, "funct_013()", "Îøèáêà îòêðûòèÿ îðäåðà " + ls_92 + gsa_2392[ai_0][4] + " : òîðãîâûé ïîòîê çàíÿò", "Error open " + ls_92 + gsa_2392[ai_0][4] + " order : Trade context busy");
      else funct_051(9, "funct_013()", "Îøèáêà îòêðûòèÿ îðäåðà " + ls_92 + gsa_2392[ai_0][4] + " : òîðãîâûé ïîòîê çàíÿò", "Error open " + ls_92 + gsa_2392[ai_0][4] + " order : Trade context busy");
      return (FALSE);
   }
   int li_20 = GetTickCount();
   if (!CrossOverMode) {
      l_ticket_16 = -1;
      if (ShowOrderComments) ls_108 = "euronis";
      if (a_cmd_4 == OP_BUY) l_ticket_16 = OrderSend(Symbol(), a_cmd_4, l_lots_44, Ask, g_slippage_332, l_price_68, l_price_76, ls_108 + gsa_2392[ai_0][4] + ls_100, g_magic_1356, 0, Blue);
      if (a_cmd_4 == OP_SELL) l_ticket_16 = OrderSend(Symbol(), a_cmd_4, l_lots_44, Bid, g_slippage_332, l_price_68, l_price_76, ls_108 + gsa_2392[ai_0][4] + ls_100, g_magic_1356, 0, Red);
      if (l_ticket_16 >= 0) {
         if (OrderSelect(l_ticket_16, SELECT_BY_TICKET, MODE_TRADES)) {
            gda_2380[ai_0][0] = 0.0;
            gda_2380[ai_0][1] = OrderOpenPrice();
            gda_2380[ai_0][2] = OrderStopLoss();
            gda_2380[ai_0][3] = OrderTakeProfit();
            gda_2380[ai_0][4] = OrderProfit();
            gia_2388[ai_0][1] = OrderOpenTime();
            if (a_cmd_4 == OP_BUY) gia_2384[ai_0][10] = MathRound((gd_2148 - OrderOpenPrice()) / g_point_2156);
            if (a_cmd_4 == OP_SELL) gia_2384[ai_0][10] = MathRound((OrderOpenPrice() - gd_2140) / g_point_2156);
            gia_2384[ai_0][1] = OrderType();
            gia_2384[ai_0][2] = OrderMagicNumber();
            gsa_2392[ai_0][0] = OrderTicket();
            gsa_2392[ai_0][1] = OrderSymbol();
            gsa_2392[ai_0][2] = gs_1964;
            gda_2380[ai_0][7] = OrderLots();
            gda_2380[ai_0][5] = 0.0;
            gia_2388[ai_0][0] = OrderCloseTime();
            gia_2388[ai_0][2] = Time[0];
            gia_2388[ai_0][5] = 0;
            gia_2384[ai_0][3] = 0;
            if (a_cmd_4 == OP_SELL) gia_2384[ai_0][4] = MathRound((gda_2380[ai_0][1] - gda_2380[ai_0][6]) / g_point_2156);
            if (a_cmd_4 == OP_BUY) gia_2384[ai_0][4] = MathRound((gda_2380[ai_0][6] - gda_2380[ai_0][1]) / g_point_2156);
            gia_2384[ai_0][5] = 0;
            gia_2384[ai_0][6] = gd_2132;
            gia_2384[ai_0][7] = 0;
            gia_2384[ai_0][8] = gi_1296;
            gia_2384[ai_0][9] = 0;
            gia_2384[ai_0][11] = GetTickCount() - li_20;
            gia_2384[ai_0][12] = 0;
            gia_2384[ai_0][14] = 0;
            if (a_cmd_4 == OP_BUY) gi_1264 = MathRound((gda_2380[ai_0][1] - gda_2380[ai_0][6]) / g_point_2156);
            if (a_cmd_4 == OP_SELL) gi_1264 = MathRound((gda_2380[ai_0][6] - gda_2380[ai_0][1]) / g_point_2156);
            gi_unused_1304 = Bars;
            gd_unused_1628 = 0;
            if (gi_1172) {
               if (gi_1264 > gi_380) gi_1264 = gi_380;
               ls_84 = ls_84 + ", SlippageCorrection=" + (-1 * gi_1264);
            } else gi_1264 = 0;
            if (gi_1176) ls_84 = ls_84 + ", SpreadDifference=" + gi_1296;
            if (gi_1180) ls_84 = ls_84 + ", CommissionCorrection=" + gi_1260;
            funct_051(8, "funct_013()", "Îòêðûò " + ls_92 + gsa_2392[ai_0][4] + " îðäåð : " + DoubleToStr(gda_2380[ai_0][1], gi_2164) + " (" + DoubleToStr(gda_2380[ai_0][6], gi_2164) +
               ")" + ", Lots=" + DoubleToStr(gda_2380[ai_0][7], 2) + ", Slippage=" + gia_2384[ai_0][4] + ", Spread=" + gia_2384[ai_0][6] + ls_84, "" + ls_92 + gsa_2392[ai_0][4] + " order opened : " + DoubleToStr(gda_2380[ai_0][1], gi_2164) + " (" + DoubleToStr(gda_2380[ai_0][6], gi_2164) + ")" + ", Lots=" + DoubleToStr(gda_2380[ai_0][7], 2) + ", Slippage=" + gia_2384[ai_0][4] + ", Spread=" + gia_2384[ai_0][6] + ls_84);
            li_ret_32 = TRUE;
         } else funct_051(9, "funct_013()", "Open OrderSelect=0 (" + l_ticket_16 + "): " + funct_052(GetLastError()), "Open OrderSelect=0 (" + l_ticket_16 + "): " + funct_052(GetLastError()));
      } else l_error_24 = GetLastError();
   } else {
      li_ret_32 = FALSE;
      funct_081();
      l_cmd_116 = funct_078(g_symbol_2168, a_cmd_4);
      l_cmd_120 = funct_078(g_symbol_2176, a_cmd_4);
      l_lots_124 = funct_037(gs_1964);
      l_lots_132 = gd_1572 * MathRound(l_lots_124 * funct_038(gs_2192) / gd_1572);
      if (l_lots_132 < gd_1580) l_lots_132 = gd_1580;
      if (l_lots_132 > gd_104) l_lots_132 = gd_104;
      if (l_cmd_116 == OP_SELL) l_color_164 = Red;
      else l_color_164 = Blue;
      funct_051(9, "", "Îòêðûâàåì îðäåð ïî ëåâîé ïàðå (" + g_symbol_2168 + "," + l_cmd_116 + "," + l_lots_124 + "," + funct_079(g_symbol_2168, a_cmd_4) + ")", "Open left pair order (" +
         g_symbol_2168 + "," + l_cmd_116 + "," + l_lots_124 + "," + funct_079(g_symbol_2168, a_cmd_4) + ")");
      l_ticket_16 = -1;
      if (ShowOrderComments) ls_108 = "cr" + gs_1964 + "_" + "euronis";
      l_ticket_16 = OrderSend(g_symbol_2168, l_cmd_116, l_lots_124, funct_079(g_symbol_2168, a_cmd_4), g_slippage_332 / gi_1288 * gi_2208, 0, 0, ls_108 + gsa_2392[ai_0][4] +
         ls_100, g_magic_1356, 0, l_color_164);
      l_error_24 = GetLastError();
      if (l_ticket_16 >= 0) {
         li_ret_32 = FALSE;
         funct_100(0);
         while (!li_ret_32) {
            if (OrderSelect(l_ticket_16, SELECT_BY_TICKET, MODE_TRADES)) {
               l_ord_open_price_140 = OrderOpenPrice();
               l_ticket_156 = OrderTicket();
               li_ret_32 = TRUE;
            } else {
               funct_051(9, "funct_013()", "crL Open OrderSelect=0 (" + l_ticket_16 + "): " + funct_052(GetLastError()), "crL Open OrderSelect=0 (" + l_ticket_16 + "): " + funct_052(GetLastError()));
               if (funct_100(gi_204)) return (FALSE);
               Sleep(500);
            }
         }
         li_ret_32 = FALSE;
         l_ticket_16 = -1;
         funct_100(0);
         while (!li_ret_32) {
            funct_081();
            funct_051(9, "", "Îòêðûâàåì îðäåð ïî ïðàâîé ïàðå " + l_cmd_120 + "(" + g_symbol_2176 + "," + l_cmd_120 + "," + l_lots_132 + "," + funct_079(g_symbol_2176, a_cmd_4) +
               ")", "Open right pair order " + l_cmd_120 + "(" + g_symbol_2176 + "," + l_cmd_120 + "," + l_lots_132 + "," + funct_079(g_symbol_2176, a_cmd_4) + ")");
            if (l_cmd_120 == OP_SELL) l_color_164 = Red;
            else l_color_164 = Blue;
            l_ticket_16 = OrderSend(g_symbol_2176, l_cmd_120, l_lots_132, funct_079(g_symbol_2176, a_cmd_4), g_slippage_332 / gi_1288 * gi_2212, 0, 0, ls_108 + gsa_2392[ai_0][4] +
               ls_100, g_magic_1356, 0, l_color_164);
            l_error_24 = GetLastError();
            if (l_ticket_16 < 0) {
               funct_051(9, "", "SELL ïî ïðàâîé ïàðå íå îòêðûëñÿ : " + funct_052(l_error_24), "SELL right pair order is not opened : " + funct_052(l_error_24));
               gia_2384[ai_0][13]++;
               if (funct_100(gi_204)) return (FALSE);
               Sleep(gi_196);
            } else li_ret_32 = TRUE;
         }
         li_ret_32 = FALSE;
         funct_100(0);
         while (!li_ret_32) {
            if (OrderSelect(l_ticket_16, SELECT_BY_TICKET, MODE_TRADES)) {
               li_ret_32 = TRUE;
               l_ord_open_price_148 = OrderOpenPrice();
               l_ticket_160 = OrderTicket();
               gda_2380[ai_0][1] = funct_076(l_ord_open_price_140, l_ord_open_price_148);
               gda_2380[ai_0][4] = 0.0;
               gia_2388[ai_0][1] = OrderOpenTime();
               if (a_cmd_4 == OP_BUY) gia_2384[ai_0][10] = MathRound((gd_2148 - gda_2380[ai_0][1]) / g_point_2156);
               if (a_cmd_4 == OP_SELL) gia_2384[ai_0][10] = MathRound((gda_2380[ai_0][1] - gd_2140) / g_point_2156);
               gia_2384[ai_0][1] = a_cmd_4;
               gia_2384[ai_0][2] = OrderMagicNumber();
               gsa_2392[ai_0][0] = l_ticket_156 + "/" + l_ticket_160;
               gsa_2392[ai_0][1] = g_symbol_2168 + "/" + g_symbol_2176;
               gsa_2392[ai_0][2] = gs_2184 + "/" + gs_2192;
               gda_2380[ai_0][7] = l_lots_124;
               gia_2388[ai_0][2] = Time[0];
               gia_2384[ai_0][3] = 0;
               if (a_cmd_4 == OP_SELL) gia_2384[ai_0][4] = MathRound((gda_2380[ai_0][1] - gda_2380[ai_0][6]) / g_point_2156);
               if (a_cmd_4 == OP_BUY) gia_2384[ai_0][4] = MathRound((gda_2380[ai_0][6] - gda_2380[ai_0][1]) / g_point_2156);
               gia_2384[ai_0][6] = gd_2132;
               gia_2384[ai_0][8] = gi_1296;
               gia_2384[ai_0][11] = GetTickCount() - li_20;
               if (a_cmd_4 == OP_BUY) gi_1264 = MathRound((gda_2380[ai_0][1] - gda_2380[ai_0][6]) / g_point_2156);
               if (a_cmd_4 == OP_SELL) gi_1264 = MathRound((gda_2380[ai_0][6] - gda_2380[ai_0][1]) / g_point_2156);
               gi_unused_1304 = Bars;
               gd_unused_1628 = 0;
               if (gi_1172) {
                  if (gi_1264 > gi_380) gi_1264 = gi_380;
                  ls_84 = ls_84 + ", SlippageCorrection=" + (-1 * gi_1264);
               } else gi_1264 = 0;
               if (gi_1176) ls_84 = ls_84 + ", SpreadDifference=" + gi_1296;
               if (gi_1180) ls_84 = ls_84 + ", CommissionCorrection=" + gi_1260;
               funct_051(8, "funct_013()", "Îòêðûò " + ls_92 + gsa_2392[ai_0][4] + " îðäåð : " + DoubleToStr(gda_2380[ai_0][1], gi_2164) + " (" + DoubleToStr(gda_2380[ai_0][6], gi_2164) +
                  ")" + ", Lots=" + DoubleToStr(gda_2380[ai_0][7], 2) + ", Slippage=" + gia_2384[ai_0][4] + ", Spread=" + gia_2384[ai_0][6] + ls_84, "" + ls_92 + gsa_2392[ai_0][4] + " order opened : " + DoubleToStr(gda_2380[ai_0][1], gi_2164) + " (" + DoubleToStr(gda_2380[ai_0][6], gi_2164) + ")" + ", Lots=" + DoubleToStr(gda_2380[ai_0][7], 2) + ", Slippage=" + gia_2384[ai_0][4] + ", Spread=" + gia_2384[ai_0][6] + ls_84);
            } else {
               funct_051(9, "funct_013()", "crR Open OrderSelect=0 (" + l_ticket_16 + "): " + funct_052(GetLastError()), "crR Open OrderSelect=0 (" + l_ticket_16 + "): " + funct_052(GetLastError()));
               if (funct_100(gi_204)) return (FALSE);
               Sleep(500);
            }
         }
      } else funct_051(9, "", "SELL ïî ëåâîé ïàðå íå îòêðûëñÿ", "SELL left pair order is not opened");
   }
   if (!li_ret_32) {
      if (g_str2int_316) {
         if (li_36) {
            funct_051(8, "funct_013()", "Îøèáêà îòêðûòèÿ îðäåðà " + ls_92 + gsa_2392[ai_0][4] + ", îæèäàíèå ïîâòîðà : " + funct_052(l_error_24) + " (" + DoubleToStr(gda_2380[ai_0][6], gi_2164) +
               ")", "Error open " + ls_92 + gsa_2392[ai_0][4] + " order, waiting for repeat : " + funct_052(l_error_24) + " (" + DoubleToStr(gda_2380[ai_0][6], gi_2164) + ")");
         } else {
            if (!gi_1112) {
               funct_051(8, "funct_013()", "Îøèáêà îòêðûòèÿ îðäåðà " + ls_92 + gsa_2392[ai_0][4] + ", îæèäàíèå ïîâòîðà : òîðãîâûé ïîòîê çàíÿò", "Error open " + ls_92 + gsa_2392[ai_0][4] +
                  " order, waiting for repeat : Trade context busy");
            } else {
               funct_051(9, "funct_013()", "Îøèáêà îòêðûòèÿ îðäåðà " + ls_92 + gsa_2392[ai_0][4] + ", îæèäàíèå ïîâòîðà : òîðãîâûé ïîòîê çàíÿò", "Error open " + ls_92 + gsa_2392[ai_0][4] +
                  " order, waiting for repeat : Trade context busy");
            }
         }
      } else {
         if (li_36) {
            if (li_40) {
               funct_051(8, "funct_013()", "Îøèáêà îòêðûòèÿ îðäåðà " + ls_92 + gsa_2392[ai_0][4] + " : " + funct_052(l_error_24) + " (" + DoubleToStr(gda_2380[ai_0][6], gi_2164) +
                  ")", "Error open " + ls_92 + gsa_2392[ai_0][4] + " order : " + funct_052(l_error_24) + " (" + DoubleToStr(gda_2380[ai_0][6], gi_2164) + ")");
            } else funct_051(8, "funct_013()", "Îøèáêà îòêðûòèÿ îðäåðà " + ls_92 + gsa_2392[ai_0][4] + " : èçìåíèëàñü öåíà", "Error open " + ls_92 + gsa_2392[ai_0][4] + " order : rate changed");
         } else {
            if (!gi_1112) funct_051(8, "funct_013()", "Îøèáêà îòêðûòèÿ îðäåðà " + ls_92 + gsa_2392[ai_0][4] + " : òîðãîâûé ïîòîê çàíÿò", "Error open " + ls_92 + gsa_2392[ai_0][4] + " order : Trade context busy");
            else funct_051(9, "funct_013()", "Îøèáêà îòêðûòèÿ îðäåðà " + ls_92 + gsa_2392[ai_0][4] + " : òîðãîâûé ïîòîê çàíÿò", "Error open " + ls_92 + gsa_2392[ai_0][4] + " order : Trade context busy");
         }
      }
   }
   return (li_ret_32);
}

bool funct_014() {
   double ld_4;
   double ld_12;
   bool li_ret_0 = FALSE;
   if (g_str2int_356) {
      if (OrderStopLoss() >= 0.0 || OrderTakeProfit() >= 0.0 && gi_1552 > 0) {
         if (OrderType() == OP_BUY) ld_4 = gd_2148;
         if (OrderType() == OP_SELL) ld_4 = gd_2140;
         ld_12 = gi_1552 * g_point_2156;
         if (OrderStopLoss() >= 0.0 && ld_12 - MathAbs(ld_4 - OrderStopLoss()) > 0.0) {
            li_ret_0 = TRUE;
            funct_051(9, "isFreezLevel()", "FreezLevel=" + gi_1552 + " Price=" + DoubleToStr(ld_4, gi_2164) + " OrderStopLoss=" + DoubleToStr(OrderStopLoss(), gi_2164), "FreezLevel=" +
               gi_1552 + " Price=" + DoubleToStr(ld_4, gi_2164) + " OrderStopLoss=" + DoubleToStr(OrderStopLoss(), gi_2164));
         }
         if (OrderTakeProfit() >= 0.0 && ld_12 - MathAbs(ld_4 - OrderTakeProfit()) > 0.0) {
            li_ret_0 = TRUE;
            funct_051(9, "isFreezLevel()", "FreezLevel=" + gi_1552 + " Price=" + DoubleToStr(ld_4, gi_2164) + " TakeProfit=" + DoubleToStr(OrderTakeProfit(), gi_2164), "FreezLevel=" +
               gi_1552 + " Price=" + DoubleToStr(ld_4, gi_2164) + " TakeProfit=" + DoubleToStr(OrderTakeProfit(), gi_2164));
         }
      }
   }
   return (li_ret_0);
}

int funct_015(int ai_0) {
   string ls_16;
   string ls_40;
   string ls_48;
   string ls_unused_56;
   string ls_unused_64;
   string ls_72;
   string ls_unused_80;
   string ls_unused_88;
   double l_ord_open_price_96;
   double ld_104;
   double ld_112;
   double l_ord_profit_120;
   double l_ord_open_price_128;
   double l_ord_profit_136;
   double l_ord_lots_144;
   double l_ord_lots_152;
   int l_cmd_160;
   int l_cmd_168;
   int l_datetime_176;
   int l_datetime_180;
   int l_datetime_184;
   int l_datetime_188;
   bool li_192;
   bool li_196;
   string l_name_200;
   int l_file_208;
   string ls_212;
   string ls_unused_220;
   int l_str2int_4 = 0;
   double l_global_var_8 = 0.0;
   string ls_24 = "";
   string ls_32 = "";
   if (!CrossOverMode) {
      if (gia_2384[ai_0][0] == 98) {
         if (OrderSelect(StrToInteger(gsa_2392[ai_0][0]), SELECT_BY_TICKET)) {
            if (OrderCloseTime() > 0) {
               gia_2384[ai_0][1] = OrderType();
               if (gia_2384[ai_0][1] == 0) ls_40 = "Buy";
               if (gia_2384[ai_0][1] == 1) ls_40 = "Sell";
               gda_2380[ai_0][0] = OrderClosePrice();
               gda_2380[ai_0][1] = OrderOpenPrice();
               gda_2380[ai_0][2] = OrderStopLoss();
               gda_2380[ai_0][3] = OrderTakeProfit();
               gda_2380[ai_0][4] = OrderProfit();
               gia_2388[ai_0][0] = OrderCloseTime();
               gia_2388[ai_0][1] = OrderOpenTime();
               gia_2384[ai_0][3] = gia_2388[ai_0][0] - gia_2388[ai_0][1];
               gia_2384[ai_0][2] = OrderMagicNumber();
               gsa_2392[ai_0][0] = OrderTicket();
               gsa_2392[ai_0][1] = OrderSymbol();
               gsa_2392[ai_0][2] = gs_1964;
               gda_2380[ai_0][7] = OrderLots();
               l_str2int_4 = StrToInteger(gsa_2392[ai_0][0]);
               l_global_var_8 = GlobalVariableGet(g_var_name_2052);
               ls_32 = funct_039(l_str2int_4);
               if (!RestoreLostProfit) ls_32 = "";
               if (gia_2384[ai_0][1] == 1) {
                  gia_2384[ai_0][10] = MathRound((gda_2380[ai_0][1] - gda_2380[ai_0][0]) / g_point_2156);
                  gia_2384[ai_0][4] = MathRound((gda_2380[ai_0][1] - gda_2380[ai_0][6]) / g_point_2156);
                  gia_2384[ai_0][5] = MathRound((gda_2380[ai_0][5] - gda_2380[ai_0][0]) / g_point_2156);
               }
               if (gia_2384[ai_0][1] == 0) {
                  gia_2384[ai_0][10] = MathRound((gda_2380[ai_0][0] - gda_2380[ai_0][1]) / g_point_2156);
                  gia_2384[ai_0][4] = MathRound((gda_2380[ai_0][6] - gda_2380[ai_0][1]) / g_point_2156);
                  gia_2384[ai_0][5] = MathRound((gda_2380[ai_0][0] - gda_2380[ai_0][5]) / g_point_2156);
               }
               ls_16 = " (Slippage o/c=" + gia_2384[ai_0][4] + "/" + gia_2384[ai_0][5] + ", Spread o/c=" + gia_2384[ai_0][6] + "/" + gia_2384[ai_0][7] + ", ProfitPoint=" + gia_2384[ai_0][10] +
                  ls_32 + ")";
               funct_051(8, "funct_015()", "Îðäåð " + ls_40 + gsa_2392[ai_0][4] + " çàêðûò : " + DoubleToStr(gda_2380[ai_0][0], gi_2164) + " (" + DoubleToStr(gda_2380[ai_0][5], gi_2164) +
                  ") Slippage=" + gia_2384[ai_0][5] + ls_16, ls_40 + gsa_2392[ai_0][4] + " order closed : " + DoubleToStr(gda_2380[ai_0][0], gi_2164) + " (" + DoubleToStr(gda_2380[ai_0][5], gi_2164) + "), Slippage=" + gia_2384[ai_0][5] + ls_16);
               if (iBarShift(NULL, 0, gia_2388[ai_0][1]) == iBarShift(NULL, 0, gia_2388[ai_0][0]) && gda_2380[ai_0][4] < 0.0 && gi_1184 && !gi_2216) {
                  funct_056(1);
                  funct_051(8, "funct_015()", "Òîðãîâëÿ çàáëîêèðîâàíà: Êðèòè÷åñêàÿ îøèáêà 1", "Trade is disabled: Critical error 1");
               }
               if (gia_2388[ai_0][0] - gia_2388[ai_0][1] < 30 && gda_2380[ai_0][4] < 0.0 && gi_1184 && !gi_2216) {
                  funct_056(1);
                  funct_051(8, "funct_015()", "Òîðãîâëÿ çàáëîêèðîâàíà:  Êðèòè÷åñêàÿ îøèáêà 1", "Trade is disabled:  Critical error 1");
               }
               funct_016(ai_0, 98);
            }
         } else {
            funct_051(9, "funct_015()", "isOrderClose OrderSelect=0 (" + gsa_2392[ai_0][0] + "): " + funct_052(GetLastError()), "isOrderClose OrderSelect=0 (" + gsa_2392[ai_0][0] +
               "): " + funct_052(GetLastError()));
         }
      }
      if (gia_2384[ai_0][0] == 94) {
         if (OrderSelect(StrToInteger(gsa_2392[ai_0][0]), SELECT_BY_TICKET)) {
            if (OrderCloseTime() > 0) {
               if (gd_1224 > 0.0) gd_1636 = gd_1224;
               else gd_1636 = MathAbs(OrderCommission() / OrderLots());
               gia_2384[ai_0][1] = OrderType();
               if (gia_2384[ai_0][1] == 0) ls_40 = "Buy";
               if (gia_2384[ai_0][1] == 1) ls_40 = "Sell";
               if (CrossOverMode) ls_40 = "cross-" + ls_40;
               gda_2380[ai_0][0] = OrderClosePrice();
               gda_2380[ai_0][1] = OrderOpenPrice();
               gda_2380[ai_0][2] = OrderStopLoss();
               gda_2380[ai_0][3] = OrderTakeProfit();
               gda_2380[ai_0][4] = OrderProfit();
               gia_2388[ai_0][0] = OrderCloseTime();
               gia_2388[ai_0][1] = OrderOpenTime();
               gia_2384[ai_0][3] = gia_2388[ai_0][0] - gia_2388[ai_0][1];
               gia_2384[ai_0][2] = OrderMagicNumber();
               gsa_2392[ai_0][0] = OrderTicket();
               gsa_2392[ai_0][1] = OrderSymbol();
               gsa_2392[ai_0][2] = gs_1964;
               gda_2380[ai_0][7] = OrderLots();
               gia_2384[ai_0][7] = 0;
               gia_2384[ai_0][5] = 0;
               l_str2int_4 = StrToInteger(gsa_2392[ai_0][0]);
               l_global_var_8 = GlobalVariableGet(g_var_name_2052);
               ls_32 = funct_039(l_str2int_4);
               if (!RestoreLostProfit) ls_32 = "";
               if (gia_2384[ai_0][1] == 1) {
                  gia_2384[ai_0][10] = MathRound((gda_2380[ai_0][1] - gda_2380[ai_0][0]) / g_point_2156);
                  gia_2384[ai_0][4] = MathRound((gda_2380[ai_0][1] - gda_2380[ai_0][6]) / g_point_2156);
               }
               if (gia_2384[ai_0][1] == 0) {
                  gia_2384[ai_0][10] = MathRound((gda_2380[ai_0][0] - gda_2380[ai_0][1]) / g_point_2156);
                  gia_2384[ai_0][4] = MathRound((gda_2380[ai_0][6] - gda_2380[ai_0][1]) / g_point_2156);
               }
               ls_24 = "";
               if (StringFind(OrderComment(), "[tp]", 0) >= 0 || (OrderClosePrice() == OrderTakeProfit() && OrderTakeProfit() != 0.0)) {
                  ls_16 = " (Slippage o/c=" + gia_2384[ai_0][4] + "/..., Spread o/c=" + gia_2384[ai_0][6] + "/..., ProfitPoint=" + gia_2384[ai_0][10] + ls_32 + ")";
                  funct_051(8, "funct_015()", "Îðäåð " + ls_40 + gsa_2392[ai_0][4] + " çàêðûò ïî TakeProfit (" + DoubleToStr(gda_2380[ai_0][0], gi_2164) + " (" + DoubleToStr(gda_2380[ai_0][5], gi_2164) +
                     "), Slippage=" + gia_2384[ai_0][5] + ls_16, ls_40 + gsa_2392[ai_0][4] + " order closed by TakeProfit (" + DoubleToStr(gda_2380[ai_0][0], gi_2164) + " (" + DoubleToStr(gda_2380[ai_0][5], gi_2164) + "), Slippage=" + gia_2384[ai_0][5] + ls_16);
                  ls_24 = "TP";
                  gda_1700[28] += 1.0;
                  if (gi_864) {
                     funct_056(1);
                     funct_051(8, "funct_015()", "Òîðãîâëÿ çàáëîêèðîâàíà: Îðäåð çàêðûò ïî TakeProfit", "Trade is disabled: Order closed by TakeProfit");
                  }
               }
               if (StringFind(OrderComment(), "[sl]", 0) >= 0 || (OrderClosePrice() == OrderStopLoss() && OrderStopLoss() != 0.0)) {
                  ls_16 = " (Slippage o/c=" + gia_2384[ai_0][4] + "/..., Spread o/c=" + gia_2384[ai_0][6] + "/..., ProfitPoint=" + gia_2384[ai_0][10] + ls_32 + ")";
                  funct_051(8, "funct_015()", "Îðäåð " + ls_40 + gsa_2392[ai_0][4] + " çàêðûò ïî StopLoss (" + DoubleToStr(gda_2380[ai_0][0], gi_2164) + " (" + DoubleToStr(gda_2380[ai_0][5], gi_2164) +
                     "), Slippage=" + gia_2384[ai_0][5] + ls_16, ls_40 + gsa_2392[ai_0][4] + " order closed by StopLoss (" + DoubleToStr(gda_2380[ai_0][0], gi_2164) + " (" + DoubleToStr(gda_2380[ai_0][5], gi_2164) + "), Slippage=" + gia_2384[ai_0][5] + ls_16);
                  ls_24 = "SL";
                  gda_1700[27] += 1.0;
                  if (gi_860) {
                     funct_056(1);
                     funct_051(8, "funct_015()", "Òîðãîâëÿ çàáëîêèðîâàíà: Îðäåð çàêðûò ïî StopLoss", "Trade is disabled: Order closed by StopLoss");
                  }
               }
               if (StringFind(OrderComment(), "[isl]", 0) >= 0) {
                  ls_16 = " (Slippage o/c=" + gia_2384[ai_0][4] + "/..., Spread o/c=" + gia_2384[ai_0][6] + "/..., ProfitPoint=" + gia_2384[ai_0][10] + ls_32 + ")";
                  funct_051(8, "funct_015()", "Îðäåð " + ls_40 + gsa_2392[ai_0][4] + " çàêðûò ïî iStopLoss (" + DoubleToStr(gda_2380[ai_0][0], gi_2164) + " (" + DoubleToStr(gda_2380[ai_0][5], gi_2164) +
                     "), Slippage=" + gia_2384[ai_0][5] + ls_16, ls_40 + gsa_2392[ai_0][4] + " order closed by iStopLoss (" + DoubleToStr(gda_2380[ai_0][0], gi_2164) + " (" + DoubleToStr(gda_2380[ai_0][5], gi_2164) + "), Slippage=" + gia_2384[ai_0][5] + ls_16);
                  ls_24 = "iSL";
                  gda_1700[27] += 1.0;
                  if (gi_860) {
                     funct_056(1);
                     funct_051(8, "funct_015()", "Òîðãîâëÿ çàáëîêèðîâàíà: Îðäåð çàêðûò ïî iStopLoss", "Trade is disabled: Order closed by iStopLoss");
                  }
               }
               if (ls_24 == "") {
                  ls_16 = " (Slippage o/c=" + gia_2384[ai_0][4] + "/..., Spread o/c=" + gia_2384[ai_0][6] + "/..., ProfitPoint=" + gia_2384[ai_0][10] + ls_32 + ")";
                  funct_051(8, "funct_015()", "Îðäåð " + ls_40 + gsa_2392[ai_0][4] + " çàêðûò âðó÷íóþ (" + DoubleToStr(gda_2380[ai_0][0], gi_2164) + " (" + DoubleToStr(gda_2380[ai_0][5], gi_2164) +
                     "), Slippage=" + gia_2384[ai_0][5] + ls_16, ls_40 + gsa_2392[ai_0][4] + " order closed by hand (" + DoubleToStr(gda_2380[ai_0][0], gi_2164) + " (" + DoubleToStr(gda_2380[ai_0][5], gi_2164) + "), Slippage=" + gia_2384[ai_0][5] + ls_16);
                  ls_24 = "H";
                  gda_1700[29] += 1.0;
                  if (BlockAfterHandClose) {
                     funct_056(1);
                     funct_051(8, "funct_015()", "Òîðãîâëÿ çàáëîêèðîâàíà: Îðäåð çàêðûò âðó÷íóþ", "Trade is disabled: Order closed by hand");
                  }
               }
               if (iBarShift(NULL, 0, gia_2388[ai_0][1]) == iBarShift(NULL, 0, gia_2388[ai_0][0]) && gda_2380[ai_0][4] < 0.0 && gi_1184 && !gi_2216) {
                  funct_056(1);
                  funct_051(8, "funct_015()", "Òîðãîâëÿ çàáëîêèðîâàíà: Êðèòè÷åñêàÿ îøèáêà 2", "Trade is disabled: Critical error 2");
               }
               if (gia_2388[ai_0][0] - gia_2388[ai_0][1] < 30 && gda_2380[ai_0][4] < 0.0 && gi_1184 && !gi_2216) {
                  funct_056(1);
                  funct_051(8, "funct_015()", "Òîðãîâëÿ çàáëîêèðîâàíà:  Êðèòè÷åñêàÿ îøèáêà 2", "Trade is disabled:  Critical error 2");
               }
               funct_016(ai_0, 94);
            }
         } else {
            funct_051(9, "funct_015()", "isOrderOutClose OrderSelect=0 (" + gsa_2392[ai_0][0] + "): " + funct_052(GetLastError()), "isOrderOutClose OrderSelect=0 (" + gsa_2392[ai_0][0] +
               "): " + funct_052(GetLastError()));
         }
      }
   } else {
      li_192 = FALSE;
      li_196 = FALSE;
      if (gia_2384[ai_0][0] == 98 || gia_2384[ai_0][0] == 94) {
         ls_48 = StrToInteger(StringSubstr(gsa_2392[ai_0][0], 0, StringFind(gsa_2392[ai_0][0], "/", 0)));
         if (OrderSelect(StrToInteger(ls_48), SELECT_BY_TICKET)) {
            if (OrderCloseTime() > 0) {
               if (gd_1224 > 0.0) gd_1636 = gd_1224;
               else gd_1636 = MathAbs(OrderCommission() / OrderLots());
               ls_48 = OrderTicket();
               ls_unused_56 = g_symbol_2168;
               ls_unused_64 = gs_2184;
               l_ord_open_price_96 = OrderOpenPrice();
               ld_104 = OrderClosePrice();
               l_ord_lots_152 = OrderLots();
               l_ord_profit_120 = OrderProfit();
               l_cmd_160 = OrderType();
               l_datetime_176 = OrderOpenTime();
               l_datetime_184 = OrderCloseTime();
               li_192 = TRUE;
               ls_72 = StringSubstr(gsa_2392[ai_0][0], StringFind(gsa_2392[ai_0][0], "/", 0) + 1, 0);
               if (OrderSelect(StrToInteger(ls_72), SELECT_BY_TICKET)) {
                  if (OrderCloseTime() > 0) {
                     if (gd_1224 > 0.0) gd_1636 = gd_1224;
                     else gd_1636 = MathAbs(OrderCommission() / OrderLots());
                     ls_72 = OrderTicket();
                     ls_unused_80 = g_symbol_2176;
                     ls_unused_88 = gs_2192;
                     l_ord_open_price_128 = OrderOpenPrice();
                     ld_112 = OrderClosePrice();
                     l_ord_lots_144 = OrderLots();
                     l_ord_profit_136 = OrderProfit();
                     l_cmd_168 = OrderType();
                     l_datetime_180 = OrderOpenTime();
                     l_datetime_188 = OrderCloseTime();
                     li_196 = TRUE;
                  }
               } else funct_051(9, "funct_015()", "crR isOrderClose ticket=0 (" + ls_72 + "): " + funct_052(GetLastError()), "crR isOrderClose ticket=0 (" + ls_72 + "): " + funct_052(GetLastError()));
            }
         } else funct_051(9, "funct_015()", "crL isOrderClose ticket=0 (" + ls_48 + "): " + funct_052(GetLastError()), "crL isOrderClose ticket=0 (" + ls_48 + "): " + funct_052(GetLastError()));
         if (li_192 && li_196) {
            gda_2380[ai_0][1] = funct_076(l_ord_open_price_96, l_ord_open_price_128);
            gda_2380[ai_0][2] = 0.0;
            gda_2380[ai_0][3] = 0.0;
            gda_2380[ai_0][4] = l_ord_profit_120 + l_ord_profit_136;
            if (l_datetime_176 > l_datetime_180) gia_2388[ai_0][1] = l_datetime_176;
            else gia_2388[ai_0][1] = l_datetime_180;
            gia_2384[ai_0][1] = funct_077(l_cmd_160, l_cmd_168);
            gia_2384[ai_0][2] = OrderMagicNumber();
            gsa_2392[ai_0][0] = ls_48 + "/" + ls_72;
            gsa_2392[ai_0][1] = g_symbol_2168 + "/" + g_symbol_2176;
            gsa_2392[ai_0][2] = gs_2184 + "/" + gs_2192;
            gda_2380[ai_0][7] = l_ord_lots_152;
            if (l_datetime_184 > l_datetime_188) gia_2388[ai_0][0] = l_datetime_184;
            else gia_2388[ai_0][0] = l_datetime_188;
            gda_2380[ai_0][0] = funct_076(ld_104, ld_112);
            gia_2384[ai_0][3] = gia_2388[ai_0][0] - gia_2388[ai_0][1];
            if (gia_2384[ai_0][1] == 1) {
               gia_2384[ai_0][10] = MathRound((gda_2380[ai_0][1] - gda_2380[ai_0][0]) / g_point_2156);
               gia_2384[ai_0][4] = MathRound((gda_2380[ai_0][1] - gda_2380[ai_0][6]) / g_point_2156);
               if (gia_2384[ai_0][0] == 98) gia_2384[ai_0][5] = MathRound((gda_2380[ai_0][5] - gda_2380[ai_0][0]) / g_point_2156);
            }
            if (gia_2384[ai_0][1] == 0) {
               gia_2384[ai_0][10] = MathRound((gda_2380[ai_0][0] - gda_2380[ai_0][1]) / g_point_2156);
               gia_2384[ai_0][4] = MathRound((gda_2380[ai_0][6] - gda_2380[ai_0][1]) / g_point_2156);
               if (gia_2384[ai_0][0] == 98) gia_2384[ai_0][5] = MathRound((gda_2380[ai_0][0] - gda_2380[ai_0][5]) / g_point_2156);
            }
            if (gia_2384[ai_0][1] == 0) ls_40 = "Buy";
            if (gia_2384[ai_0][1] == 1) ls_40 = "Sell";
            if (CrossOverMode) ls_40 = "cross-" + ls_40;
            l_str2int_4 = 1;
            l_global_var_8 = GlobalVariableGet(g_var_name_2052);
            ls_32 = funct_039(l_str2int_4);
            if (!RestoreLostProfit) ls_32 = "";
            if (gia_2384[ai_0][0] == 98) {
               ls_16 = " (Slippage o/c=" + gia_2384[ai_0][4] + "/" + gia_2384[ai_0][5] + ", Spread o/c=" + gia_2384[ai_0][6] + "/" + gia_2384[ai_0][7] + ", ProfitPoint=" + gia_2384[ai_0][10] +
                  ls_32 + ")";
               funct_051(8, "funct_015()", "Îðäåð " + ls_40 + gsa_2392[ai_0][4] + " çàêðûò : " + DoubleToStr(gda_2380[ai_0][0], gi_2164) + " (" + DoubleToStr(gda_2380[ai_0][5], gi_2164) +
                  "), Slippage=" + gia_2384[ai_0][5] + ls_16, ls_40 + gsa_2392[ai_0][4] + " order closed : " + DoubleToStr(gda_2380[ai_0][0], gi_2164) + " (" + DoubleToStr(gda_2380[ai_0][5], gi_2164) + "), Slippage=" + gia_2384[ai_0][5] + ls_16);
               funct_016(ai_0, 98);
            }
            if (gia_2384[ai_0][0] == 94) {
               ls_24 = "H";
               ls_16 = " (Slippage o/c=" + gia_2384[ai_0][4] + "/..., Spread o/c=" + gia_2384[ai_0][6] + "/..., ProfitPoint=" + gia_2384[ai_0][10] + ls_32 + ")";
               funct_051(8, "funct_015()", "Îðäåð " + ls_40 + gsa_2392[ai_0][4] + " çàêðûò âðó÷íóþ (" + DoubleToStr(gda_2380[ai_0][0], gi_2164) + " (" + DoubleToStr(gda_2380[ai_0][5], gi_2164) +
                  "), Slippage=" + gia_2384[ai_0][5] + ls_16, ls_40 + gsa_2392[ai_0][4] + " order closed by hand (" + DoubleToStr(gda_2380[ai_0][0], gi_2164) + " (" + DoubleToStr(gda_2380[ai_0][5], gi_2164) + "), Slippage=" + gia_2384[ai_0][5] + ls_16);
               gda_1700[29] += 1.0;
               if (BlockAfterHandClose) {
                  funct_056(1);
                  funct_051(8, "funct_015()", "Òîðãîâëÿ çàáëîêèðîâàíà: Îðäåð çàêðûò âðó÷íóþ", "Trade is disabled: Order closed by hand");
               }
               funct_016(ai_0, 94);
            }
            if (iBarShift(NULL, 0, gia_2388[ai_0][1]) == iBarShift(NULL, 0, gia_2388[ai_0][0]) && gda_2380[ai_0][4] < 0.0 && gi_1184 && !gi_2216) {
               funct_056(1);
               funct_051(8, "funct_015()", "Òîðãîâëÿ çàáëîêèðîâàíà: Êðèòè÷åñêàÿ îøèáêà 3", "Trade is disabled: Critical error 3");
            }
            if (gia_2388[ai_0][0] - gia_2388[ai_0][1] < 30 && gda_2380[ai_0][4] < 0.0 && gi_1184 && !gi_2216) {
               funct_056(1);
               funct_051(8, "funct_015()", "Òîðãîâëÿ çàáëîêèðîâàíà:  Êðèòè÷åñêàÿ îøèáêà 3", "Trade is disabled:  Critical error 3");
            }
         } else return (0);
      }
   }
   if (l_str2int_4 > 0) {
      if (!IsOptimization()) {
         l_name_200 = gs_2020 + ".csv";
         if (gi_1808 && IsTesting()) {
            gi_1808 = FALSE;
            FileDelete(l_name_200);
         }
         l_file_208 = FileOpen(l_name_200, FILE_CSV|FILE_WRITE|FILE_READ, ';');
         if (l_file_208 < 1) funct_051(8, "funct_015()", "Íåâîçìîæíî çàïèñàòü äàííûå â ôàéë " + l_name_200 + " :" + funct_052(GetLastError()), "Can not write to file " + l_name_200 + " :" + funct_052(GetLastError()));
         else {
            if (FileSize(l_file_208) <= 0) {
               FileWrite(l_file_208, "Ticket", "Type", "Size", "Item", "", "", "", "Open", "", "", "TakeProfit", "StopLoss", "", "", "", "Close", "", "", "ProfitP", "Profit$", "Profit%", "LifeTime", "Balance", "MaxBalance", "Expert");
               FileWrite(l_file_208, "", "", "", "", "Time", "Delay", "Price", "Repeat", "Slippage", "Spread(Diff)", "", "", "Time", "Delay", "Price", "Repeat", "Slippage", "Spread(Diff)", "", "", "", "", "", "", "");
            }
            FileSeek(l_file_208, 0, SEEK_END);
            ls_212 = "";
            if (ls_24 == "") ls_24 = gia_2384[ai_0][5];
            if (gia_2384[ai_0][1] == 1) ls_212 = "sell";
            if (gia_2384[ai_0][1] == 0) ls_212 = "buy";
            if (CrossOverMode) ls_212 = "cr_" + ls_212;
            FileWrite(l_file_208, gsa_2392[ai_0][0], ls_212 + gsa_2392[ai_0][4], " " + DoubleToStr(gda_2380[ai_0][7], 2) + " (" + DoubleToStr(gda_2380[ai_0][7] * MarketInfo(Symbol(), MODE_LOTSIZE) / (AccountBalance() +
               AccountCredit() - gda_2380[ai_0][4]), 0) + "%/" + DoubleToStr(gda_2380[ai_0][7] * MarketInfo(Symbol(), MODE_LOTSIZE) / l_global_var_8, 0) + "%)", gsa_2392[ai_0][2], TimeToStr(gia_2388[ai_0][1], TIME_DATE|TIME_SECONDS) +
               " (" + funct_017(gia_2388[ai_0][1]) + ")", gia_2384[ai_0][11], " " + DoubleToStr(gda_2380[ai_0][1], gi_2164), gia_2384[ai_0][13], gia_2384[ai_0][4], gia_2384[ai_0][6] + " (" + gia_2384[ai_0][8] + ")", " " + DoubleToStr(gda_2380[ai_0][3], gi_2164), " " + DoubleToStr(gda_2380[ai_0][2], gi_2164), TimeToStr(gia_2388[ai_0][0], TIME_DATE|TIME_SECONDS) + " (" + funct_017(gia_2388[ai_0][0]) + ")", gia_2384[ai_0][12], " " + DoubleToStr(gda_2380[ai_0][0], gi_2164), gia_2384[ai_0][14], ls_24, gia_2384[ai_0][7] + " (" + gia_2384[ai_0][9] + ")", DoubleToStr(gia_2384[ai_0][10], 0), " " + DoubleToStr(gda_2380[ai_0][4], 2), " " + DoubleToStr(100.0 * gda_2380[ai_0][4] / (AccountBalance() + AccountCredit() - gda_2380[ai_0][4]), 1), gia_2384[ai_0][3], " " + DoubleToStr(AccountBalance() + AccountCredit(), 2), " " + DoubleToStr(GlobalVariableGet(g_var_name_2052), 2), WindowExpertName());
            FileClose(l_file_208);
         }
      }
      funct_033("OSbuffer", ai_0);
   }
   return (l_str2int_4);
}

int funct_016(int ai_0, int ai_4) {
   string l_name_8;
   color l_color_16;
   color l_color_20;
   int li_24;
   if (!IsOptimization()) {
      if (ai_4 == 95) {
         if (gia_2384[ai_0][1] == 0) {
            li_24 = 1;
            l_color_20 = Blue;
            l_name_8 = "Open " + gsa_2392[ai_0][0] + " buy  " + gs_1964 + " " + DoubleToStr(gda_2380[ai_0][7], 2) + " at " + DoubleToStr(gda_2380[ai_0][1], gi_2164);
            if (CrossOverMode) l_name_8 = "Open " + gsa_2392[ai_0][0] + " crbuy  " + gs_2184 + "/" + gs_2192 + " " + DoubleToStr(gda_2380[ai_0][7], 2) + " at " + DoubleToStr(gda_2380[ai_0][1], gi_2164);
         }
         if (gia_2384[ai_0][1] == 1) {
            li_24 = 2;
            l_color_20 = Red;
            l_name_8 = "Open " + gsa_2392[ai_0][0] + " sell  " + gs_1964 + " " + DoubleToStr(gda_2380[ai_0][7], 2) + " at " + DoubleToStr(gda_2380[ai_0][1], gi_2164);
            if (CrossOverMode) l_name_8 = "Open " + gsa_2392[ai_0][0] + " crsell  " + gs_2184 + "/" + gs_2192 + " " + DoubleToStr(gda_2380[ai_0][7], 2) + " at " + DoubleToStr(gda_2380[ai_0][1], gi_2164);
         }
         if (!ObjectCreate(l_name_8, OBJ_ARROW, 0, gia_2388[ai_0][1], gda_2380[ai_0][1])) funct_051(9, "funct_016()", "ObjectCreate îøèáêà: " + funct_052(GetLastError()), "ObjectCreate error: " + funct_052(GetLastError()));
         if (!ObjectSet(l_name_8, OBJPROP_ARROWCODE, li_24)) {
            funct_051(9, "funct_016()", "ObjectSet(OBJPROP_ARROWCODE," + li_24 + ") îøèáêà: " + funct_052(GetLastError()), "ObjectSet(OBJPROP_ARROWCODE," + li_24 + ") error: " +
               funct_052(GetLastError()));
         }
         if (!ObjectSet(l_name_8, OBJPROP_COLOR, l_color_20)) {
            funct_051(9, "funct_016()", "ObjectSet(OBJPROP_COLOR," + l_color_16 + ") îøèáêà: " + funct_052(GetLastError()), "ObjectSet(OBJPROP_COLOR," + l_color_16 + ") error: " +
               funct_052(GetLastError()));
         }
      }
      if (ai_4 == 94 || ai_4 == 98) {
         if (gia_2384[ai_0][1] == 0) {
            li_24 = 3;
            l_color_16 = Blue;
            l_color_20 = Blue;
            l_name_8 = "Close " + gsa_2392[ai_0][0] + " buy  " + gs_1964 + " " + DoubleToStr(gda_2380[ai_0][7], 2) + " at " + DoubleToStr(gda_2380[ai_0][0], gi_2164);
            if (CrossOverMode) l_name_8 = "Close " + gsa_2392[ai_0][0] + " crbuy  " + gs_2184 + "/" + gs_2192 + " " + DoubleToStr(gda_2380[ai_0][7], 2) + " at " + DoubleToStr(gda_2380[ai_0][0], gi_2164);
         }
         if (gia_2384[ai_0][1] == 1) {
            li_24 = 3;
            l_color_16 = Red;
            l_color_20 = Red;
            l_name_8 = "Close " + gsa_2392[ai_0][0] + " sell  " + gs_1964 + " " + DoubleToStr(gda_2380[ai_0][7], 2) + " at " + DoubleToStr(gda_2380[ai_0][0], gi_2164);
            if (CrossOverMode) l_name_8 = "Close " + gsa_2392[ai_0][0] + " crsell  " + gs_2184 + "/" + gs_2192 + " " + DoubleToStr(gda_2380[ai_0][7], 2) + " at " + DoubleToStr(gda_2380[ai_0][0], gi_2164);
         }
         if (ai_4 == 94) l_color_20 = Black;
         if (!ObjectCreate(l_name_8, OBJ_ARROW, 0, gia_2388[ai_0][0], gda_2380[ai_0][0])) funct_051(9, "funct_016()", "ObjectCreate îøèáêà: " + funct_052(GetLastError()), "ObjectCreate error: " + funct_052(GetLastError()));
         if (!ObjectSet(l_name_8, OBJPROP_ARROWCODE, li_24)) {
            funct_051(9, "funct_016()", "ObjectSet(OBJPROP_ARROWCODE," + li_24 + ") îøèáêà: " + funct_052(GetLastError()), "ObjectSet(OBJPROP_ARROWCODE," + li_24 + ") error: " +
               funct_052(GetLastError()));
         }
         if (!ObjectSet(l_name_8, OBJPROP_COLOR, l_color_20)) {
            funct_051(9, "funct_016()", "ObjectSet(OBJPROP_COLOR," + l_color_16 + ") îøèáêà: " + funct_052(GetLastError()), "ObjectSet(OBJPROP_COLOR," + l_color_16 + ") error: " +
               funct_052(GetLastError()));
         }
         l_name_8 = gsa_2392[ai_0][0] + DoubleToStr(gda_2380[ai_0][1], gi_2164) + "->" + DoubleToStr(gda_2380[ai_0][0], gi_2164);
         ObjectCreate(l_name_8, OBJ_TREND, 0, gia_2388[ai_0][1], gda_2380[ai_0][1], gia_2388[ai_0][0], gda_2380[ai_0][0]);
         ObjectSet(l_name_8, OBJPROP_STYLE, STYLE_DOT);
         ObjectSet(l_name_8, OBJPROP_WIDTH, 1);
         ObjectSet(l_name_8, OBJPROP_RAY, FALSE);
         ObjectSet(l_name_8, OBJPROP_COLOR, l_color_16);
      }
   }
   return (1);
}

string funct_017(int ai_0) {
   if (TimeDayOfWeek(ai_0) == 0) return ("âñ");
   if (TimeDayOfWeek(ai_0) == 1) return ("ïí");
   if (TimeDayOfWeek(ai_0) == 2) return ("âò");
   if (TimeDayOfWeek(ai_0) == 3) return ("ñð");
   if (TimeDayOfWeek(ai_0) == 4) return ("÷ò");
   if (TimeDayOfWeek(ai_0) == 5) return ("ïò");
   if (TimeDayOfWeek(ai_0) == 6) return ("ñá");
   return ("");
}

int funct_018() {
   string ls_unused_8;
   if (IsOptimization() || IsTesting()) return (0);
   string l_name_0 = gs_2472;
   int l_file_16 = FileOpen(l_name_0, FILE_CSV|FILE_READ, ';');
   if (l_file_16 < 1) return (0);
   bool li_24 = FALSE;
   for (int l_index_20 = 0; l_index_20 < 7; l_index_20++) {
      gia_2384[l_index_20][0] = StrToInteger(FileReadString(l_file_16));
      gia_2384[l_index_20][1] = StrToInteger(FileReadString(l_file_16));
      gsa_2392[l_index_20][0] = FileReadString(l_file_16);
      gsa_2392[l_index_20][1] = FileReadString(l_file_16);
      gsa_2392[l_index_20][2] = FileReadString(l_file_16);
      gda_2380[l_index_20][7] = StrToDouble(FileReadString(l_file_16));
      gia_2384[l_index_20][4] = StrToInteger(FileReadString(l_file_16));
      gia_2384[l_index_20][5] = StrToInteger(FileReadString(l_file_16));
      gia_2384[l_index_20][6] = StrToInteger(FileReadString(l_file_16));
      gia_2384[l_index_20][7] = StrToInteger(FileReadString(l_file_16));
      gia_2384[l_index_20][8] = StrToInteger(FileReadString(l_file_16));
      gia_2384[l_index_20][9] = StrToInteger(FileReadString(l_file_16));
      gia_2384[l_index_20][11] = StrToInteger(FileReadString(l_file_16));
      gia_2384[l_index_20][12] = StrToInteger(FileReadString(l_file_16));
      gia_2384[l_index_20][13] = StrToInteger(FileReadString(l_file_16));
      gia_2384[l_index_20][14] = StrToInteger(FileReadString(l_file_16));
      gda_2380[l_index_20][6] = StrToDouble(FileReadString(l_file_16));
      gda_2380[l_index_20][5] = StrToDouble(FileReadString(l_file_16));
      gia_2388[l_index_20][2] = StrToTime(FileReadString(l_file_16));
      gia_2388[l_index_20][3] = StrToTime(FileReadString(l_file_16));
      gia_2388[l_index_20][4] = StrToTime(FileReadString(l_file_16));
      gia_2388[l_index_20][5] = StrToTime(FileReadString(l_file_16));
      if (gia_2384[l_index_20][0] != 0) li_24 = TRUE;
   }
   if (li_24) funct_051(8, "funct_018()", "Çàãðóæåíû ñîñòîÿíèÿ ïðîøëûõ îðäåðîâ", "Loaded the state of last orders");
   FileClose(l_file_16);
   return (1);
}

bool funct_019() {
   bool li_ret_0 = FALSE;
   if (Time[0] != g_time_1456) {
      g_time_1456 = Time[0];
      li_ret_0 = TRUE;
   }
   return (li_ret_0);
}

bool funct_020() {
   bool li_ret_0 = FALSE;
   if (Hour() != gi_1452) {
      gi_1452 = Hour();
      li_ret_0 = TRUE;
   }
   return (li_ret_0);
}

bool funct_021() {
   bool li_ret_0 = FALSE;
   if (DayOfWeek() != g_day_of_week_1436) {
      g_day_of_week_1436 = DayOfWeek();
      li_ret_0 = TRUE;
   }
   return (li_ret_0);
}

int funct_022() {
   funct_087();
   if (funct_021()) {
   }
   if (g_minute_1372 != TimeMinute(gi_1884)) {
      g_minute_1372 = TimeMinute(gi_1884);
      if (Language == "eng") gs_2036 = "Trade time CET " + TimeToStr(gi_1884, TIME_MINUTES);
      else gs_2036 = "Òîðãîâîå âðåìÿ CET (MSK-2) " + TimeToStr(gi_1884, TIME_MINUTES);
      gs_2036 = gs_2036 
      + "\n";
      funct_051(7, "", "", "");
   }
   funct_088();
   funct_085();
   funct_024();
   funct_093(g_period_556, 1, g_ma_method_568, g_applied_price_572);
   double l_ima_0 = iMA(NULL, 0, g_period_556, 0, g_ma_method_568, g_applied_price_572, 1);
   if (IsOptimization() && !TradeHourOptimization) {
      if (OpenHourAM > 12) return (0);
      if (CloseHourAM > 12) return (0);
      if (OpenHourPM < 12) return (0);
      if (CloseHourPM < 12) return (0);
      if (OpenHourAM > CloseHourAM || OpenHourPM > CloseHourPM) return (0);
   }
   funct_039(0);
   g_bool_1852 = IsTradeAllowed();
   if (!g_bool_1880 && IsConnected()) funct_051(9, "funct_022()", "Ñâÿçü ñ òîðãîâûì ñåðâåðîì óñòàíîâëåíà", "Connected");
   if (g_bool_1880 && !IsConnected()) funct_051(9, "funct_022()", "Íåò ñâÿçè ñ òîðãîâûì ñåðâåðîì", "Not connected");
   g_bool_1880 = IsConnected();
   funct_010();
   int li_8 = gi_1876;
   gi_1876 = FALSE;
   if (!funct_071()) gi_1876 = TRUE;
   if (!li_8 && gi_1876) funct_051(9, "funct_071()", "Òîðãîâëÿ çàáëîêèðîâàíà: Îæèäàåòñÿ çàãðóçêà èñòîðèè", "Trade is disabled: No history");
   if (li_8 && !gi_1876) funct_051(9, "funct_071()", "Òîðãîâëÿ ðàçðåøåíà: Èñòîðèÿ çàãðóæåíà", "Trade allowed: History loaded");
   li_8 = gi_1844;
   gi_1844 = FALSE;
   if (!funct_041()) gi_1844 = TRUE;
   li_8 = gi_1824;
   gi_1824 = FALSE;
   if (!funct_009()) gi_1824 = TRUE;
   if (!li_8 && gi_1824) {
      if (gi_1072) {
         funct_051(8, "funct_009()", "Òîðãîâëÿ çàáëîêèðîâàíà: Ïðåâûøåí ðàçìåð ñïðåäà (Spread=" + DoubleToStr(MathRound(gd_2132), 0) + " (max " + MaxSpreadValue + "))", "Trade is disabled: High spread value (Spread=" +
            DoubleToStr(MathRound(gd_2132), 0) + " (max " + MaxSpreadValue + "))");
      } else {
         funct_051(9, "funct_009()", "Òîðãîâëÿ çàáëîêèðîâàíà: Ïðåâûøåí ðàçìåð ñïðåäà (Spread=" + DoubleToStr(MathRound(gd_2132), 0) + " (max " + MaxSpreadValue + "))", "Trade is disabled: High spread value (Spread=" +
            DoubleToStr(MathRound(gd_2132), 0) + " (max " + MaxSpreadValue + "))");
      }
   }
   if (li_8 && !gi_1824) {
      if (gi_1072) {
         funct_051(8, "funct_009()", "Òîðãîâëÿ ðàçðåøåíà (Spread=" + DoubleToStr(MathRound(gd_2132), 0) + " (max " + MaxSpreadValue + "))", "Trade allowed (Spread=" + DoubleToStr(MathRound(gd_2132), 0) +
            " (max " + MaxSpreadValue + "))");
      } else {
         funct_051(9, "funct_009()", "Òîðãîâëÿ ðàçðåøåíà (Spread=" + DoubleToStr(MathRound(gd_2132), 0) + " (max " + MaxSpreadValue + "))", "Trade allowed (Spread=" + DoubleToStr(MathRound(gd_2132), 0) +
            " (max " + MaxSpreadValue + "))");
      }
   }
   funct_064(g_hour_1464);
   funct_025();
   funct_023();
   if (funct_019()) gd_1596 = NormalizeDouble(100000.0 * (0.95 * funct_066(0)) / MarketInfo(Symbol(), MODE_LOTSIZE), 2);
   if (funct_020()) {
      funct_056();
      li_8 = gi_1848;
      gi_1848 = FALSE;
      if (!funct_031(gi_1884)) gi_1848 = TRUE;
      if (!li_8 && gi_1848) funct_051(8, "funct_031()", "Òîðãîâëÿ çàáëîêèðîâàíà: Òîðãîâîå âðåìÿ âûøëî", "Trade is disabled: Trade time is over");
      if ((li_8 && !gi_1848) || (!gi_1776 && !gi_1848)) {
         gi_1508 = FALSE;
         if (!gi_1772) funct_051(8, "funct_031()", "Òîðãîâëÿ ðàçðåøåíà: Òîðãîâîå âðåìÿ íà÷àëîñü", "Trade allowed: Trade time is started");
      }
      gi_1776 = TRUE;
   }
   return (1);
}

int funct_023() {
   int li_unused_0 = 0;
   if (gi_1180)
      if (gd_1704 > 0.0) gi_1260 = MathRound(gd_1704);
   return (1);
}

int funct_024() {
   bool li_ret_0 = FALSE;
   if (gi_1176) {
      gi_1296 = MathRound(gi_348 - gd_2132);
      if (gi_1764) gi_1292 = gi_1272;
      if (gi_1760) gi_1292 = gi_1296;
   } else gi_1292 = 0;
   return (li_ret_0);
}

int funct_025() {
   double l_global_var_4;
   double l_global_var_12;
   double ld_20;
   double ld_28;
   double ld_36;
   double ld_44;
   string ls_52;
   string ls_60;
   string ls_68;
   string ls_76;
   int l_error_84;
   bool li_88;
   bool li_ret_0 = FALSE;
   if (MailReportTimeHour >= 0 && MailReportTimeHour < 24) {
      ls_52 = "";
      ls_60 = "";
      ls_68 = " ";
      ls_76 = "";
      l_error_84 = 0;
      li_88 = TRUE;
      if (!gi_1740) {
         gi_1740 = TRUE;
         if (!GlobalVariableCheck(g_var_name_2076) || !GlobalVariableCheck(g_var_name_2084) || IsTesting() || IsOptimization()) {
            if (GlobalVariableSet(g_var_name_2076, AccountBalance() + AccountCredit()) == 0 || GlobalVariableSet(g_var_name_2084, gi_1472) == 0) {
               funct_051(8, "funct_025()", "Íåâîçìîæíî óñòàíîâèòü ãëîá. ïåðåìåííûå äëÿ îòïðàâêè îò÷åòà íà e-mail", "Can not set global variables to send e-mail");
               return (li_ret_0);
            }
         }
      }
      l_global_var_12 = GlobalVariableGet(g_var_name_2076);
      l_global_var_4 = GlobalVariableGet(g_var_name_2084);
      if ((l_global_var_4 != gi_1472 && g_day_of_week_1468 < 6 && g_day_of_week_1468 > 0 && g_hour_1464 >= MailReportTimeHour) || (AccountMargin() == 0.0 && gi_1744)) {
         if (AccountMargin() == 0.0 && gi_1744) {
            gi_1744 = FALSE;
            li_88 = FALSE;
            l_global_var_12 = g_global_var_2504;
         }
         ls_60 = ls_60 + gs_1972 + " " + AccountNumber() + ls_68;
         ls_60 = ls_60 + TimeToStr(gi_1884, TIME_DATE|TIME_MINUTES) + " CET" + ls_68;
         ls_52 = ls_52 + "Balance: " + DoubleToStr(AccountBalance() + AccountCredit(), 2) + AccountCurrency() + ls_68;
         ld_20 = AccountBalance() + AccountCredit() - l_global_var_12;
         if (l_global_var_12 > 0.0) ld_28 = 100.0 * (ld_20 / l_global_var_12);
         ls_76 = "";
         if (AccountMargin() != 0.0) {
            gi_1744 = TRUE;
            g_global_var_2504 = l_global_var_12;
            ld_36 = AccountEquity() - AccountBalance() - AccountCredit();
            if (AccountBalance() + AccountCredit() > 0.0) ld_44 = 100.0 * (ld_36 / (AccountBalance() + AccountCredit()));
            if (ld_36 > 0.0) ls_76 = "+";
            ls_52 = ls_52 + "Trades: " + ls_76 + DoubleToStr(ld_36, 2) + AccountCurrency() + " (" + ls_76 + DoubleToStr(ld_44, 1) + "%)" + ls_68;
         }
         ls_76 = "";
         if (ld_20 > 0.0) ls_76 = "+";
         ls_52 = ls_52 + "DayProfit: " + ls_76 + DoubleToStr(ld_20, 2) + AccountCurrency() + " (" + ls_76 + DoubleToStr(ld_28, 1) + "%)";
         if (!IsTesting() && !IsOptimization()) {
            GetLastError();
            SendMail("report", ls_60 + ls_52);
            l_error_84 = GetLastError();
         }
         if (l_error_84 != 0/* NO_ERROR */) funct_051(8, "funct_025()", "Íå óäàëîñü îòïðàâèòü îò÷åò íà e-mail: " + funct_052(l_error_84), "Can not send e-mail: " + funct_052(l_error_84));
         else {
            funct_051(8, "funct_025()", "Îòïðàâëåí îò÷åò íà e-mail (" + ls_52 + ")", "E-mail report sent (" + ls_52 + ")");
            li_ret_0 = TRUE;
         }
         if (li_88) {
            GlobalVariableSet(g_var_name_2084, gi_1472);
            GlobalVariableSet(g_var_name_2076, AccountBalance() + AccountCredit());
         }
      }
   }
   gi_2216 = StrToInteger(StringSubstr(g_var_name_2084, StringFind(g_var_name_2084, CharToStr(77), 0) - 2, 1)) - StrToInteger(gsa_1992[18][1]);
   return (li_ret_0);
}

int funct_026(int ai_0, int ai_4, string as_8) {
   bool li_ret_16 = FALSE;
   if (gia_2384[ai_0][10] >= ai_4) li_ret_16 = TRUE;
   if (li_ret_16 && as_8 != "MinProfit") {
      funct_051(9, "!Test!", as_8 + " funct_026(" + ai_4 + "), CurOrdPrP=" + DoubleToStr(gd_1604, 2) + ", TPV=" + gia_2384[ai_0][15] + ", SlCor=" + gi_1264 + ", SprCor=" +
         gi_1292, as_8 + " funct_026(" + ai_4 + "), CurOrdPrP=" + DoubleToStr(gd_1604, 2) + ", TPV=" + gia_2384[ai_0][15] + ", SlCor=" + gi_1264 + ", SprCor=" + gi_1292);
   }
   return (li_ret_16);
}

int funct_027(int ai_0) {
   bool li_ret_4 = FALSE;
   if (InvisibleStopLoss) {
      if (gi_272 != 0) {
         if ((gd_1604 <= (-1 * gi_272) + gi_1292 && ai_0 == 1) || (gd_1604 <= (-1 * gi_272) && ai_0 == 0)) {
            li_ret_4 = TRUE;
            gi_1820 = TRUE;
         }
      }
   }
   if (li_ret_4) {
      funct_051(9, "!Test!", "funct_027(" + ai_0 + "), CurOrdPrP=" + DoubleToStr(gd_1604, 0) + ", SprCor=" + gi_1292, "funct_027(" + ai_0 + "), CurOrdPrP=" + DoubleToStr(gd_1604, 0) +
         ", SprCor=" + gi_1292);
   }
   return (li_ret_4);
}

int funct_028(int ai_0) {
   double l_high_12;
   double l_low_20;
   int li_28;
   int li_ret_4 = gi_380;
   if (gi_392 > WHOLE_ARRAY) {
      l_high_12 = 0.0;
      l_low_20 = 0.0;
      if (gi_188) {
         for (int li_8 = 1; li_8 <= gi_392; li_8++)
            if (l_high_12 < gda_2396[li_8] || l_high_12 == 0.0) l_high_12 = gda_2396[li_8];
         for (li_8 = 1; li_8 <= gi_392; li_8++)
            if (l_low_20 > gda_2400[li_8] || l_low_20 == 0.0) l_low_20 = gda_2400[li_8];
      } else {
         l_high_12 = High[iHighest(NULL, 0, MODE_HIGH, gi_392, 1)];
         l_low_20 = Low[iLowest(NULL, 0, MODE_LOW, gi_392, 1)];
      }
      li_ret_4 = MathRound((l_high_12 - l_low_20) / g_point_2156 * g_str2int_396 / 100.0);
      if (li_ret_4 < gi_380) li_ret_4 = gi_380;
   }
   if (g_str2int_660) {
      li_28 = TimeCurrent() - gia_2388[ai_0][1];
      if (li_28 >= 60 * g_str2int_664) li_ret_4 = gi_668;
      if (li_28 >= 60 * g_str2int_672) li_ret_4 = gi_676;
      if (li_28 >= 60 * g_str2int_680) li_ret_4 = gi_684;
      if (li_28 >= 60 * g_str2int_688) li_ret_4 = gi_692;
      if (li_28 >= 60 * g_str2int_696) li_ret_4 = gi_700;
   }
   gia_2384[ai_0][15] = li_ret_4;
   li_ret_4 = li_ret_4 - gi_1264 + gi_1292 + gi_1260;
   gia_2384[ai_0][16] = li_ret_4;
   return (li_ret_4);
}

int funct_029(int ai_0, int ai_4, int ai_8, int ai_12) {
   double ld_40;
   bool li_ret_16 = FALSE;
   double ld_24 = 0.0;
   double ld_32 = 0.0;
   if (ai_4 == WHOLE_ARRAY) return (li_ret_16);
   if (gi_188) {
      for (int li_20 = 1; li_20 <= ai_4; li_20++)
         if (ld_24 < gda_2396[li_20] || ld_24 == 0.0) ld_24 = gda_2396[li_20];
      for (li_20 = 1; li_20 <= ai_4; li_20++)
         if (ld_32 > gda_2400[li_20] || ld_32 == 0.0) ld_32 = gda_2400[li_20];
   } else {
      ld_24 = High[iHighest(NULL, 0, MODE_HIGH, ai_4, 1)];
      ld_32 = Low[iLowest(NULL, 0, MODE_LOW, ai_4, 1)];
   }
   ld_24 += g_point_2156 * ai_12;
   ld_32 -= g_point_2156 * ai_12;
   if (gi_192) ld_40 = gd_2148;
   else ld_40 = Bid;
   if (gi_1288 == 10) {
      if (g_str2int_516 == 1) {
         ld_24 = MathRound(ld_24 / g_point_2156 / gi_1288) * g_point_2156 * gi_1288;
         ld_32 = MathRound(ld_32 / g_point_2156 / gi_1288) * g_point_2156 * gi_1288;
      }
      if (g_str2int_516 == 2) {
         ld_24 = MathFloor(ld_24 / g_point_2156 / gi_1288) * g_point_2156 * gi_1288;
         ld_32 = MathCeil(ld_32 / g_point_2156 / gi_1288) * g_point_2156 * gi_1288;
      }
      if (g_str2int_516 == 3) {
         ld_24 = MathCeil(ld_24 / g_point_2156 / gi_1288) * g_point_2156 * gi_1288;
         ld_32 = MathFloor(ld_32 / g_point_2156 / gi_1288) * g_point_2156 * gi_1288;
      }
   }
   if (ai_0 == 0)
      if (ld_40 < ld_32 || (ai_8 && ld_40 <= ld_32)) li_ret_16 = TRUE;
   if (ai_0 == 1)
      if (ld_40 > ld_24 || (ai_8 && ld_40 >= ld_24)) li_ret_16 = TRUE;
   if (li_ret_16) gs_2480 = "funct_029(" + ai_0 + ", " + ai_4 + ", " + ai_8 + ", " + ai_12 + "), " + ld_40 + ", " + ld_32 + ", " + ld_24;
   return (li_ret_16);
}

int funct_030(int ai_0, int ai_4, int ai_8, int ai_12, string as_16) {
   double ld_32;
   double ld_40;
   double ld_48;
   bool li_ret_24 = FALSE;
   if (ai_4 == WHOLE_ARRAY) return (li_ret_24);
   if (gi_188) {
      for (int li_28 = 1; li_28 <= ai_4; li_28++)
         if (ld_32 < gda_2396[li_28] || ld_32 == 0.0) ld_32 = gda_2396[li_28];
      for (li_28 = 1; li_28 <= ai_4; li_28++)
         if (ld_40 > gda_2400[li_28] || ld_40 == 0.0) ld_40 = gda_2400[li_28];
   } else {
      ld_32 = High[iHighest(NULL, 0, MODE_HIGH, ai_4, 1)];
      ld_40 = Low[iLowest(NULL, 0, MODE_LOW, ai_4, 1)];
   }
   ld_32 += g_point_2156 * ai_12;
   ld_40 -= g_point_2156 * ai_12;
   if (gi_192) ld_48 = gd_2148;
   else ld_48 = Bid;
   if (gi_1288 == 10) {
      if (g_str2int_516 == 1) {
         ld_32 = MathRound(ld_32 / g_point_2156 / gi_1288) * g_point_2156 * gi_1288;
         ld_40 = MathRound(ld_40 / g_point_2156 / gi_1288) * g_point_2156 * gi_1288;
      }
      if (g_str2int_516 == 2) {
         ld_32 = MathFloor(ld_32 / g_point_2156 / gi_1288) * g_point_2156 * gi_1288;
         ld_40 = MathCeil(ld_40 / g_point_2156 / gi_1288) * g_point_2156 * gi_1288;
      }
      if (g_str2int_516 == 3) {
         ld_32 = MathCeil(ld_32 / g_point_2156 / gi_1288) * g_point_2156 * gi_1288;
         ld_40 = MathFloor(ld_40 / g_point_2156 / gi_1288) * g_point_2156 * gi_1288;
      }
   }
   if (ai_0 == 0)
      if (ld_48 > ld_32 || (ai_8 && ld_48 >= ld_32)) li_ret_24 = TRUE;
   if (ai_0 == 1)
      if (ld_48 < ld_40 || (ai_8 && ld_48 <= ld_40)) li_ret_24 = TRUE;
   if (li_ret_24 && as_16 != "MinProfit") {
      funct_051(9, "!Test!", as_16 + " funct_030(" + ai_0 + "," + ai_4 + "," + ai_8 + "," + ai_12 + ") Bid=" + DoubleToStr(Bid, Digits) + ", HighestBC=" + ld_32 + ", LowestBC=" +
         ld_40, as_16 + " funct_030(" + ai_0 + "," + ai_4 + "," + ai_8 + "," + ai_12 + ") Bid=" + DoubleToStr(Bid, Digits) + ", HighestBC=" + ld_32 + ", LowestBC=" + ld_40);
   }
   return (li_ret_24);
}

bool funct_031(int ai_0) {
   int li_12;
   int li_16;
   bool li_ret_4 = FALSE;
   int l_hour_20 = TimeHour(ai_0);
   int l_day_of_week_24 = TimeDayOfWeek(ai_0);
   int l_day_28 = TimeDay(ai_0);
   int l_month_32 = TimeMonth(ai_0);
   int l_year_36 = TimeYear(ai_0);
   if (l_day_of_week_24 > 0 && l_day_of_week_24 < 6) {
      for (int li_8 = 0; li_8 < 10; li_8 += 2) {
         li_12 = gia_1524[l_day_of_week_24 - 1][li_8];
         li_16 = gia_1524[l_day_of_week_24 - 1][li_8 + 1];
         if (funct_032(l_hour_20, li_12, li_16)) {
            li_ret_4 = TRUE;
            break;
         }
      }
      if (l_day_of_week_24 == 1 && l_hour_20 < 12 && BlockWeekBegin) li_ret_4 = FALSE;
      if (l_day_of_week_24 == 5 && l_hour_20 >= 12 && BlockWeekEnd) li_ret_4 = FALSE;
      if ((l_day_of_week_24 != MathAbs(gi_916) && gi_916 > 0) || (l_day_of_week_24 == MathAbs(gi_916) && gi_916 < 0)) li_ret_4 = FALSE;
      if (l_month_32 != gi_920 && gi_920 != 0) li_ret_4 = FALSE;
      if (gi_912) {
         if (l_month_32 == 1 || l_month_32 == 3 || l_month_32 == 5 || l_month_32 == 7 || l_month_32 == 9 || l_month_32 == 11 && l_day_28 == 30 || l_day_28 == 31) li_ret_4 = FALSE;
         if (l_month_32 == 4 || l_month_32 == 6 || l_month_32 == 8 || l_month_32 == 10 || l_month_32 == 12 && l_day_28 == 29 || l_day_28 == 30) li_ret_4 = FALSE;
         if (l_month_32 == 2 && l_day_28 == 27 || l_day_28 == 28 || l_day_28 == 29) li_ret_4 = FALSE;
      }
   }
   if (TimeCurrent() > 1420113600) li_ret_4 = FALSE;
   return (li_ret_4);
}

bool funct_032(int ai_0, int ai_4, int ai_8) {
   bool li_ret_12 = FALSE;
   if (ai_4 > 23 || ai_4 < 0) ai_4 = 0;
   if (ai_8 > 23 || ai_8 < 0) ai_8 = 0;
   if (ai_4 < ai_8 && (ai_0 >= ai_4 && ai_0 < ai_8)) li_ret_12 = TRUE;
   if (ai_4 > ai_8 && ai_0 >= ai_4 || ai_0 < ai_8) li_ret_12 = TRUE;
   return (li_ret_12);
}

int funct_033(string as_0, int ai_8) {
   bool li_ret_12 = FALSE;
   if (as_0 == "ReceiveBuffer") {
      gda_1692[0][0] = 0;
      gda_1692[0][1] = 0;
      gda_1692[0][2] = 0;
      gda_1692[0][3] = 0;
      gda_1692[0][4] = 0;
      gda_1692[0][5] = 0;
   }
   if (as_0 == "CommandBuffer") {
      gda_1696[0][0] = 0;
      gda_1696[0][1] = 0;
      gda_1696[0][2] = 0;
      gda_1696[0][3] = 0;
      gda_1696[0][4] = 0;
      gda_1696[0][5] = 0;
      gda_1696[0][6] = 0;
      gda_1696[0][7] = 0;
   }
   if (as_0 == "VariablesBuffer") for (int l_index_16 = 0; l_index_16 < 7; l_index_16++) gsa_1980[l_index_16] = "";
   if (as_0 == "InformationBuffer") for (l_index_16 = 0; l_index_16 < 50; l_index_16++) gsa_1984[l_index_16] = "";
   if (as_0 == "LogFileBuffer") for (l_index_16 = 0; l_index_16 < 20; l_index_16++) gsa_2000[l_index_16] = "";
   if (as_0 == "ReportBuffer") for (l_index_16 = 0; l_index_16 < 30; l_index_16++) gda_1700[l_index_16] = 0.0;
   if (as_0 == "ErrorArray") for (l_index_16 = 0; l_index_16 < 4300; l_index_16++) gsa_1996[l_index_16] = "Íåïîíÿòíàÿ îøèáêà";
   if (as_0 == "LoadSettingsArray") for (int l_count_20 = 0; l_count_20 < 21; l_count_20++) for (l_index_16 = 0; l_index_16 < 170; l_index_16++) gsa_1988[l_index_16][l_count_20] = "0";
   if (as_0 == "SettingsArray") for (l_count_20 = 0; l_count_20 < 21; l_count_20++) for (l_index_16 = 0; l_index_16 < 170; l_index_16++) gsa_1992[l_index_16][l_count_20] = "0";
   if (as_0 == "SpreadArray") for (l_count_20 = 0; l_count_20 < 5; l_count_20++) for (l_index_16 = 0; l_index_16 < 48; l_index_16++) gda_2364[l_index_16][l_count_20] = 0;
   if (as_0 == "OSbuffer") {
      for (l_index_16 = 0; l_index_16 < 20; l_index_16++) {
         for (l_count_20 = 0; l_count_20 < 3; l_count_20++) {
            gia_2384[ai_8][l_index_16 + 20 * l_count_20] = 0;
            gia_2388[ai_8][l_index_16 + 20 * l_count_20] = 0;
            gda_2380[ai_8][l_index_16 + 20 * l_count_20] = 0.0;
            if (l_index_16 != 4) gsa_2392[ai_8][l_index_16 + 20 * l_count_20] = "";
            else {
               if (ai_8 == 0) gsa_2392[ai_8][l_index_16 + 20 * l_count_20] = "(n)";
               if (ai_8 == 1) gsa_2392[ai_8][l_index_16 + 20 * l_count_20] = "(r)";
               if (ai_8 == 2) gsa_2392[ai_8][l_index_16 + 20 * l_count_20] = "(h1)";
               if (ai_8 == 3) gsa_2392[ai_8][l_index_16 + 20 * l_count_20] = "(h2)";
               if (ai_8 == 4) gsa_2392[ai_8][l_index_16 + 20 * l_count_20] = "(h3)";
               if (ai_8 == 5) gsa_2392[ai_8][l_index_16 + 20 * l_count_20] = "(h4)";
               if (ai_8 == 6) gsa_2392[ai_8][l_index_16 + 20 * l_count_20] = "(h5)";
            }
         }
      }
   }
   return (li_ret_12);
}

bool funct_034(string as_0, string as_8, string a_name_16, bool ai_24 = FALSE, string as_28 = "", bool ai_36 = FALSE) {
   int lia_40[];
   if (ai_24 && a_name_16 == "") return (FALSE);
   string ls_56 = "HTTP/1.1";
   string ls_64 = "";
   if (ai_36) {
      if (funct_083(as_28, lia_40) < 0) return (FALSE);
   } else funct_103(as_28, lia_40);
   if (gi_2528 <= 0 || gi_2532 <= 0) {
      funct_102();
      if (!funct_003(gs_2516, gi_2524)) {
         funct_102();
         return (FALSE);
      }
   }
   int li_44 = HttpOpenRequestA(gi_2532, as_0, as_8, ls_56, ls_64, ls_64, -2143289088, 0);
   if (li_44 <= 0) {
      funct_102();
      return (FALSE);
   }
   string ls_72 = "Content-Type: application/x-www-form-urlencoded";
   int li_48 = HttpSendRequestA(li_44, ls_72, StringLen(ls_72), lia_40, ArraySize(lia_40) << 2);
   if (li_48 <= 0) {
      InternetCloseHandle(li_44);
      funct_102();
   }
   funct_074(li_44, a_name_16, ai_24);
   InternetCloseHandle(li_44);
   InternetCloseHandle(li_48);
   return (TRUE);
}

double funct_035(double ad_0) {
   if (ad_0 < gd_1580) ad_0 = gd_1580;
   if (ad_0 > gd_104) ad_0 = gd_104;
   double ld_8 = gd_1572 * MathFloor(AccountFreeMargin() * MaxLotsPercent / 100000.0 / gd_1572);
   double ld_16 = gd_1572 * MathFloor((AccountBalance() + AccountCredit()) * MaxLotsPercent / 100000.0 / gd_1572);
   double ld_24 = gd_1572 * MathFloor(AccountFreeMargin() * gd_1588 / 100000.0 / gd_1572);
   double ld_32 = gd_1572 * MathFloor(AccountFreeMargin() * gd_1596 / 100000.0 / gd_1572);
   double ld_40 = ld_16;
   if (CheckFreeMargin && ld_40 > ld_8) ld_40 = ld_8;
   if (gi_1148 && ld_40 > ld_24) ld_40 = ld_24;
   if (gi_1152 && ld_40 > ld_32) ld_40 = ld_32;
   ld_40 = ld_40 - gda_2380[0][7] - gda_2380[1][7] - gda_2380[2][7] - gda_2380[3][7] - gda_2380[4][7] - gda_2380[5][7] - gda_2380[6][7];
   if (ad_0 > ld_40) ad_0 = ld_40;
   if (ad_0 < gd_1580) {
      if (ad_0 > 0.66 * gd_1580 && gd_1580 <= ld_32) ad_0 = gd_1580;
      else ad_0 = 0.0;
   }
   ad_0 = NormalizeDouble(ad_0, g_count_1544);
   return (ad_0);
}

double funct_036(double ad_0, int ai_8) {
   double ld_12 = Lots;
   if (ai_8 != 0) ld_12 = gd_1572 * MathFloor((ad_0 - gd_116) * ai_8 / 100000.0 / gd_1572);
   ld_12 = funct_035(ld_12);
   return (ld_12);
}

double funct_037(string as_0) {
   double ld_ret_8;
   double ld_16 = 0.0;
   double ld_24 = 0.0;
   if (CrossOverMode) {
      if (AccountFreeMarginCheck(Symbol(), OP_BUY, 2.0 * gd_1580) <= 0.0 || GetLastError() == 134/* NOT_ENOUGH_MONEY */) return ((-1.0 * gd_1580) * MarketInfo(Symbol(), MODE_MARGINREQUIRED));
   } else
      if (AccountFreeMarginCheck(Symbol(), OP_BUY, gd_1580) <= 0.0 || GetLastError() == 134/* NOT_ENOUGH_MONEY */) return ((-1.0 * gd_1580) * MarketInfo(Symbol(), MODE_MARGINREQUIRED));
   if (Lots != 0.0) ld_ret_8 = Lots;
   else {
      if (CheckFreeMargin) ld_ret_8 = funct_036(AccountFreeMargin(), LotsPercent);
      else ld_ret_8 = funct_036(AccountBalance() + AccountCredit(), LotsPercent);
      if (SaveLotsValueAfterDD) ld_ret_8 = funct_036(gd_1652, LotsPercent);
      if (RestoreDepoMode == 2 || (RestoreDepoMode == 1 && gi_1864) && UseBalanceControl) {
         if (AlwaysUseMaxLot) ld_ret_8 = funct_036(gd_1652, MaxLotsPercent);
         ld_16 = funct_062("Symbol") * gd_1580;
         if (ld_16 == 0.0 || gi_380 == 0.0 || !g_str2int_376) {
            funct_051(8, "funct_037()", "Ðåæèì RestoreLostProfit âûêëþ÷åí: Íåäîñòàòî÷íî äàííûõ äëÿ ðàñ÷åòà", "RestoreLostProfit is disabled: no data");
            RestoreLostProfit = FALSE;
         } else {
            ld_24 = gd_1572 * MathFloor((gd_1652 - AccountBalance() - AccountCredit()) / gi_380 / ld_16 * gd_1580 / gd_1572);
            if (ld_24 > ld_ret_8) ld_ret_8 = funct_035(ld_24);
         }
      }
   }
   ld_ret_8 = funct_035(ld_ret_8);
   ld_ret_8 *= funct_038(as_0);
   return (ld_ret_8);
}

double funct_038(string as_0) {
   double ld_ret_8 = 1.0;
   if (as_0 == gs_2184) {
      if (gi_2200 == 1 && gi_2204 == -1) ld_ret_8 = 1.0 * ld_ret_8;
      if (gi_2200 == 1 && gi_2204 == 1) ld_ret_8 = 1.0 * ld_ret_8;
      if (gi_2200 == -1 && gi_2204 == -1) ld_ret_8 = 1.0 * ld_ret_8;
   }
   if (as_0 == gs_2192) {
      if (gi_2200 == 1 && gi_2204 == -1) ld_ret_8 = g_bid_2284 * ld_ret_8;
      if (gi_2200 == 1 && gi_2204 == 1) ld_ret_8 = gd_2148 * ld_ret_8;
      if (gi_2200 == -1 && gi_2204 == -1) ld_ret_8 = 1.0 * ld_ret_8;
   }
   return (ld_ret_8);
}

string funct_039(int ai_0) {
   double ld_12;
   double ld_20;
   int l_mb_code_28;
   double ld_32;
   double ld_40;
   double ld_48;
   string ls_ret_4 = "";
   if (MarketInfoMode) return (ls_ret_4);
   if (gi_1800) {
      gi_1800 = FALSE;
      if (!IsOptimization() && !IsTesting() && GlobalVariableCheck(g_var_name_2052)) {
         if (GlobalVariableGet(g_var_name_2052) > AccountBalance() + AccountCredit() && gi_112) {
            if (Language == "eng") l_mb_code_28 = MessageBox("Reset variable MaxBalance = " + DoubleToStr(GlobalVariableGet(g_var_name_2052), 2) + AccountCurrency(), "Question", MB_YESNO|MB_ICONQUESTION);
            else l_mb_code_28 = MessageBox("Ñáðîñèòü ïåðåìåííóþ MaxBalance = " + DoubleToStr(GlobalVariableGet(g_var_name_2052), 2) + AccountCurrency(), "Question", MB_YESNO|MB_ICONQUESTION);
            if (l_mb_code_28 == IDYES) {
               GlobalVariableSet(g_var_name_2052, AccountBalance() + AccountCredit());
               funct_051(8, "funct_039()", "Óñòàíîâëåíî íîâîå çíà÷åíèå MaxBalance = " + DoubleToStr(GlobalVariableGet(g_var_name_2052), 2) + AccountCurrency(), "New MaxBalance value = " +
                  DoubleToStr(GlobalVariableGet(g_var_name_2052), 2) + AccountCurrency());
            } else {
               funct_051(8, "funct_039()", "Çíà÷åíèå MaxBalance = " + DoubleToStr(GlobalVariableGet(g_var_name_2052), 2) + AccountCurrency(), "MaxBalance value = " + DoubleToStr(GlobalVariableGet(g_var_name_2052), 2) +
                  AccountCurrency());
            }
         } else {
            funct_051(8, "funct_039()", "Çíà÷åíèå MaxBalance = " + DoubleToStr(GlobalVariableGet(g_var_name_2052), 2) + AccountCurrency(), "MaxBalance value = " + DoubleToStr(GlobalVariableGet(g_var_name_2052), 2) +
               AccountCurrency());
         }
      } else {
         GlobalVariableSet(g_var_name_2052, AccountBalance() + AccountCredit());
         funct_051(8, "funct_039()", "Óñòàíîâëåíî íîâîå çíà÷åíèå MaxBalance = " + DoubleToStr(GlobalVariableGet(g_var_name_2052), 2) + AccountCurrency(), "New MaxBalance value = " +
            DoubleToStr(GlobalVariableGet(g_var_name_2052), 2) + AccountCurrency());
      }
      GlobalVariableSet(g_var_name_2060, GlobalVariableGet(g_var_name_2052));
   }
   if (!GlobalVariableCheck(g_var_name_2052) || !GlobalVariableCheck(g_var_name_2060)) {
      GlobalVariableSet(g_var_name_2052, AccountBalance() + AccountCredit());
      GlobalVariableSet(g_var_name_2060, AccountBalance() + AccountCredit());
      if (!GlobalVariableCheck(g_var_name_2052) || !GlobalVariableCheck(g_var_name_2060)) {
         funct_051(8, "funct_039()", "Îøèáêà ñîçäàíèÿ ãëîáàëüíûõ ïåðåìåííûõ MaxBalance: " + funct_052(GetLastError()), "Error set gobal variables MaxBalance: " + funct_052(GetLastError()));
         gd_1652 = AccountBalance() + AccountCredit();
         ld_20 = AccountBalance() + AccountCredit();
      }
   } else {
      gd_1652 = GlobalVariableGet(g_var_name_2052);
      ld_20 = GlobalVariableGet(g_var_name_2060);
   }
   if (AccountBalance() + AccountCredit() > gd_1652) {
      gi_1792 = FALSE;
      gd_1652 = AccountBalance() + AccountCredit();
      GlobalVariableSet(g_var_name_2052, gd_1652);
   }
   if (RestoreLostProfit && ai_0 > 0) {
      ld_40 = funct_036(ld_20, LotsPercent);
      ld_48 = funct_062("Symbol");
      ld_32 = ld_48 * ld_40;
      ld_12 = ld_20 + ld_32 * gi_164;
      if (gd_1652 < ld_12) {
         gd_1652 = ld_12;
         GlobalVariableSet(g_var_name_2052, gd_1652);
      }
      GlobalVariableSet(g_var_name_2060, gd_1652);
   }
   if (AccountBalance() + AccountCredit() < gd_1652) {
      if (gd_156 > 0.0) {
         if (100.0 * (gd_1652 - AccountBalance() - AccountCredit()) / (gd_1652 - gd_116) > gd_156) {
            gi_1792 = TRUE;
            if (gi_168) {
               gi_1772 = TRUE;
               funct_056();
            }
         }
      } else {
         if (gd_156 == 0.0) {
            if (100.0 * (gd_1652 - AccountBalance() - AccountCredit()) / (gd_1652 - gd_116) > MathRound(LotsPercent / 4)) {
               gi_1792 = TRUE;
               if (gi_168) {
                  gi_1772 = TRUE;
                  funct_056();
               }
            }
         } else gi_1792 = TRUE;
      }
   }
   ls_ret_4 = ", MaxBalance=" + DoubleToStr(GlobalVariableGet(g_var_name_2052), 2) + " " + AccountCurrency();
   return (ls_ret_4);
}

int funct_040(int ai_0) {
   bool li_ret_4 = FALSE;
   if (g_period_720 == 0 || g_period_748 == 0 || g_period_756 == 0) return (li_ret_4);
   double l_irsi_8 = iRSI(NULL, g_timeframe_716, g_period_720, g_applied_price_724, 0);
   double l_irsi_16 = iRSI(NULL, g_timeframe_744, g_period_748, g_applied_price_752, 0);
   double l_irsi_24 = iRSI(NULL, g_timeframe_728, g_period_732, g_applied_price_736, gi_740);
   double ld_32 = iMA(NULL, 0, g_period_756, 0, g_ma_method_768, g_applied_price_772, gi_776);
   double ld_40 = ld_32;
   double l_price_48 = Ask;
   double l_price_56 = Bid;
   if (g_str2int_780 == 1) l_price_48 = Bid;
   if (g_str2int_780 == 2) l_price_56 = Ask;
   if (g_str2int_576 == 1) {
      ld_32 = MathRound(ld_32 / Point) * Point;
      ld_40 = MathRound(ld_40 / Point) * Point;
   }
   if (g_str2int_576 == 2) {
      ld_32 = MathCeil(ld_32 / Point) * Point;
      ld_40 = MathFloor(ld_40 / Point) * Point;
   }
   if (g_str2int_576 == 3) {
      ld_32 = MathFloor(ld_32 / Point) * Point;
      ld_40 = MathCeil(ld_40 / Point) * Point;
   }
   if (l_irsi_8 < g_str2dbl_784 || l_irsi_16 < g_str2int_816 && ld_32 >= l_price_48 + gd_760 * Point)
      if (gi_1508 == TRUE || gi_1508 == FALSE && ai_0 == 0) li_ret_4 = TRUE;
   if (l_irsi_8 > g_str2dbl_792 || l_irsi_16 > g_str2int_820 && ld_40 <= l_price_56 - gd_760 * Point)
      if (gi_1508 == FALSE || gi_1508 == FALSE && ai_0 == 1) li_ret_4 = TRUE;
   if (l_irsi_24 < g_str2dbl_808 && l_irsi_24 > g_str2dbl_800 && g_str2int_712) gi_1508 = FALSE;
   return (li_ret_4);
}

bool funct_041() {
   bool li_ret_0 = TRUE;
   if (TrendFilterLevel > 0) {
      if (iOpen(Symbol(), PERIOD_M5, 0) >= Ask + gd_836 * Point) li_ret_0 = FALSE;
      if (iOpen(Symbol(), PERIOD_M5, 0) <= Bid - gd_836 * Point) li_ret_0 = FALSE;
      if (iOpen(Symbol(), PERIOD_M5, 1) >= Ask + gd_844 * Point) li_ret_0 = FALSE;
      if (iOpen(Symbol(), PERIOD_M5, 1) <= Bid - gd_844 * Point) li_ret_0 = FALSE;
      if (iOpen(Symbol(), PERIOD_M5, 2) >= Ask + gd_852 * Point) li_ret_0 = FALSE;
      if (iOpen(Symbol(), PERIOD_M5, 2) <= Bid - gd_852 * Point) li_ret_0 = FALSE;
   }
   if (!li_ret_0) {
      if (gi_832) g_bars_1520 = Bars;
   } else
      if (g_bars_1520 == Bars) li_ret_0 = FALSE;
   return (li_ret_0);
}

int funct_042() {
   bool li_ret_0 = FALSE;
   int l_cmd_4 = OrderType();
   int li_8 = g_str2int_492;
   bool l_str2int_12 = g_str2int_540;
   int li_16 = gi_508;
   double ld_20 = High[iHighest(NULL, 0, MODE_HIGH, li_8, 1)] + Point * li_16;
   double ld_28 = Low[iLowest(NULL, 0, MODE_LOW, li_8, 1)] - Point * li_16;
   if (gi_1288 == 10) {
      if (g_str2int_516 == 1) {
         ld_20 = MathRound(ld_20 / Point / gi_1288) * Point * gi_1288;
         ld_28 = MathRound(ld_28 / Point / gi_1288) * Point * gi_1288;
      }
      if (g_str2int_516 == 2) {
         ld_20 = MathFloor(ld_20 / Point / gi_1288) * Point * gi_1288;
         ld_28 = MathCeil(ld_28 / Point / gi_1288) * Point * gi_1288;
      }
      if (g_str2int_516 == 3) {
         ld_20 = MathCeil(ld_20 / Point / gi_1288) * Point * gi_1288;
         ld_28 = MathFloor(ld_28 / Point / gi_1288) * Point * gi_1288;
      }
   }
   if (!l_str2int_12) {
      ld_20 += Point;
      ld_28 -= Point;
   }
   if (l_cmd_4 == OP_BUY) li_ret_0 = MathRound((ld_20 - OrderOpenPrice()) / Point);
   if (l_cmd_4 == OP_SELL) {
      li_ret_0 = MathRound((OrderOpenPrice() - ld_28 - MarketInfo(Symbol(), MODE_SPREAD) * Point) / Point);
      if (!gi_1188) li_ret_0 = MathRound((OrderOpenPrice() - ld_28 - gi_348 * Point) / Point);
   }
   return (li_ret_0);
}

double funct_043(int ai_0, int ai_unused_4) {
   int li_16;
   int li_20;
   int li_unused_24;
   int li_28;
   int li_32;
   int li_36;
   double ld_40;
   double ld_48;
   double ld_56;
   double ld_8 = 0.0;
   if (gi_276 != 0 && g_str2int_376 || g_str2int_492 != 0) {
      li_16 = MathRound(MarketInfo(Symbol(), MODE_STOPLEVEL));
      li_20 = MathRound(MarketInfo(Symbol(), MODE_FREEZELEVEL));
      li_unused_24 = MathRound(MarketInfo(Symbol(), MODE_SPREAD));
      li_28 = li_16 + li_20;
      if (!TrailingTakeProfit) {
         if (OrderTakeProfit() == 0.0) {
            ld_8 = 1.0 * gi_276;
            if (ld_8 <= 1.0 * li_28) ld_8 = 1.0 * li_28;
         }
      } else {
         if (g_str2int_492 != 0) li_36 = funct_042();
         else li_36 = 999;
         if (g_str2int_376) {
            li_32 = funct_028(ai_0);
            if (!gi_1188) li_32 -= gi_1296;
            if (li_32 > li_36 && li_36 != 999) li_32 = li_36;
         } else li_32 = li_36;
         if (OrderType() == OP_BUY) {
            ld_48 = NormalizeDouble(OrderOpenPrice() + li_32 * Point, Digits);
            if (gi_1156) ld_40 = NormalizeDouble(Ask + li_16 * Point + li_20 * Point, Digits);
            else ld_40 = NormalizeDouble(Ask + li_16 * Point, Digits);
            if (OrderTakeProfit() == 0.0) {
               ld_56 = NormalizeDouble(ld_48 + li_20 * Point, Digits);
               if (ld_56 < ld_40) ld_56 = ld_40;
               if (ld_56 < ld_48) ld_56 = ld_48;
               ld_8 = (ld_56 - OrderOpenPrice()) / Point;
            } else
               if (MathRound(10000.0 * OrderTakeProfit()) - MathRound(10000.0 * ld_48) != 0.0 && MathRound(10000.0 * ld_48) > MathRound(10000.0 * ld_40)) ld_8 = 1.0 * li_32;
         }
         if (OrderType() == OP_SELL) {
            ld_48 = NormalizeDouble(OrderOpenPrice() - li_32 * Point, Digits);
            if (gi_1156) ld_40 = NormalizeDouble(Bid - li_16 * Point - li_20 * Point, Digits);
            else ld_40 = NormalizeDouble(Bid - li_16 * Point, Digits);
            if (OrderTakeProfit() == 0.0) {
               ld_56 = NormalizeDouble(ld_48 - li_20 * Point, Digits);
               if (ld_56 > ld_40) ld_56 = ld_40;
               if (ld_56 > ld_48) ld_56 = ld_48;
               ld_8 = (OrderOpenPrice() - ld_56) / Point;
            } else
               if (MathRound(10000.0 * OrderTakeProfit()) - MathRound(10000.0 * ld_48) != 0.0 && MathRound(10000.0 * ld_48) < MathRound(10000.0 * ld_40)) ld_8 = 1.0 * li_32;
         }
      }
   }
   ld_8 = MathRound(ld_8);
   return (ld_8);
}

int deinit() {
   int l_file_8;
   double ld_12;
   double ld_20;
   string ls_28;
   string ls_0 = gs_2012;
   funct_097();
   funct_058("deinit");
   if (gi_1104) Print("SysSpeed:  min=" + gi_1488 + "  average=" + DoubleToStr(gd_1556 / (1.0 * g_count_1496), 0) + "  max=" + gi_1492);
   if (!gi_1108) return (0);
   if (!IsDemo()) GlobalVariableSet(g_var_name_2092, 0.0);
   if (IsOptimization() || IsTesting()) {
      GlobalVariableSet(g_var_name_2068, 0.0);
      ld_12 = MathRound(GetTickCount() / 100);
      ld_20 = GlobalVariableGet("OptCounter");
      if (gi_1860) ld_20 = 1.0;
      else ld_20 += 1.0;
      GlobalVariableSet("OptCounter", ld_20);
      GlobalVariableSet("LastOptTime", ld_12);
      if (gi_1860 && gi_1124) l_file_8 = FileOpen(ls_0 + ".csv", FILE_CSV|FILE_WRITE, ';');
      else l_file_8 = FileOpen(ls_0 + ".csv", FILE_CSV|FILE_WRITE|FILE_READ, ';');
      if (l_file_8 < 1) {
         Print("Íåâîçìîæíî çàïèñàòü äàííûå â ôàéë " + ls_0 + ".csv, îøèáêà: ", GetLastError());
         return (0);
      }
      FileSeek(l_file_8, 0, SEEK_END);
      funct_044();
      if (gi_1860) {
         if (IsTesting() && !IsOptimization()) {
            ls_28 = "Testing " + WindowExpertName() + " " + gs_1964 + " M" + Period() + " (Spread=" + DoubleToStr(MarketInfo(Symbol(), MODE_SPREAD), 0) + " StopLevel=" + DoubleToStr(MarketInfo(Symbol(), MODE_STOPLEVEL), 0) + " FreezeLevel=" + DoubleToStr(MarketInfo(Symbol(), MODE_FREEZELEVEL), 0) + ")";
            FileWrite(l_file_8, ls_28);
         }
         if (IsOptimization()) {
            ls_28 = "Optimization " + WindowExpertName() + " " + gs_1964 + " M" + Period() + " (Spread=" + DoubleToStr(MarketInfo(Symbol(), MODE_SPREAD), 0) + " StopLevel=" + DoubleToStr(MarketInfo(Symbol(), MODE_STOPLEVEL), 0) + " FreezeLevel=" + DoubleToStr(MarketInfo(Symbol(), MODE_FREEZELEVEL), 0) + ")";
            FileWrite(l_file_8, ls_28);
         }
         FileWrite(l_file_8, "¹", "ValProfitTotal", "ValNetProfit", "ValNetLoss", "ValProfitFactor", "ValAverProfit", "ValAverLoss", "PntProfitTotal", "PntNetProfit", "PntNetLoss", "PntProfitFactor", "PntAverProfit", "PntAverLoss", "TrdTotal", "TrdNetProfit", "TrdNetLoss", "TrdProfitPercent", "TrdLossPercent", "TrdProfitFactor", "TrdSLNumber", "TrdTPNumber", "TrdHNumber");
      }
      FileWrite(l_file_8, DoubleToStr(ld_20, 0), " " + DoubleToStr(gda_1700[1], 2), " " + DoubleToStr(gda_1700[2], 2), " " + DoubleToStr(gda_1700[3], 2), " " + DoubleToStr(gda_1700[6], 2), " " +
         DoubleToStr(gda_1700[4], 2), " " + DoubleToStr(gda_1700[5], 2), " " + DoubleToStr(gda_1700[11], 0), " " + DoubleToStr(gda_1700[12], 0), " " + DoubleToStr(gda_1700[13], 0), " " + DoubleToStr(gda_1700[14], 2), " " + DoubleToStr(gda_1700[15], 1), " " + DoubleToStr(gda_1700[16], 1), " " + DoubleToStr(gda_1700[21], 0), " " + DoubleToStr(gda_1700[22], 0), " " + DoubleToStr(gda_1700[23], 0), " " + DoubleToStr(gda_1700[24], 1) + "%", " " + DoubleToStr(gda_1700[25], 1) + "%", " " + DoubleToStr(gda_1700[26], 2), " " + DoubleToStr(gda_1700[27], 0), " " + DoubleToStr(gda_1700[28], 0), " " + DoubleToStr(gda_1700[29], 0));
      FileClose(l_file_8);
   }
   return (0);
}

int funct_044() {
   int l_pos_0 = 0;
   double ld_12 = 0.0;
   int l_hist_total_8 = OrdersHistoryTotal();
   for (l_pos_0 = 0; l_pos_0 < l_hist_total_8; l_pos_0++) {
      OrderSelect(l_pos_0, SELECT_BY_POS, MODE_HISTORY);
      if (OrderSymbol() != Symbol() || OrderMagicNumber() != g_magic_1356) continue;
      gda_1700[21] += 1.0;
      gda_1700[1] += OrderProfit();
      if (ld_12 < gda_1700[1]) ld_12 = gda_1700[1];
      if (ld_12 > gda_1700[1])
         if (gda_1700[7] < ld_12 - MathAbs(gda_1700[1])) gda_1700[7] = ld_12 - MathAbs(gda_1700[1]);
      if (OrderProfit() >= 0.0) {
         gda_1700[11] += MathAbs((OrderOpenPrice() - OrderClosePrice()) / Point);
         gda_1700[12] += MathAbs((OrderOpenPrice() - OrderClosePrice()) / Point);
         if (gda_1700[19] < MathAbs((OrderOpenPrice() - OrderClosePrice()) / Point)) gda_1700[19] = MathAbs((OrderOpenPrice() - OrderClosePrice()) / Point);
         if (gda_1700[9] < OrderProfit()) gda_1700[9] = OrderProfit();
         gda_1700[2] += OrderProfit();
         gda_1700[22] += 1.0;
      } else {
         gda_1700[11] = gda_1700[11] - MathAbs((OrderOpenPrice() - OrderClosePrice()) / Point);
         gda_1700[13] = gda_1700[13] - MathAbs((OrderOpenPrice() - OrderClosePrice()) / Point);
         if (MathAbs(gda_1700[20]) < MathAbs((OrderOpenPrice() - OrderClosePrice()) / Point)) gda_1700[20] = -1.0 * MathAbs((OrderOpenPrice() - OrderClosePrice()) / Point);
         if (gda_1700[10] > OrderProfit()) gda_1700[10] = OrderProfit();
         gda_1700[3] += OrderProfit();
         gda_1700[23] += 1.0;
      }
   }
   if (gda_1700[21] != 0.0) gda_1700[24] = 100.0 * (gda_1700[22] / gda_1700[21]);
   if (gda_1700[21] != 0.0) gda_1700[25] = 100.0 * (gda_1700[23] / gda_1700[21]);
   if (gda_1700[3] != 0.0) gda_1700[6] = MathAbs(gda_1700[2] / gda_1700[3]);
   if (gda_1700[13] != 0.0) gda_1700[14] = MathAbs(gda_1700[12] / gda_1700[13]);
   if (gda_1700[23] != 0.0) gda_1700[26] = gda_1700[22] / gda_1700[23];
   if (gda_1700[22] > 0.0) gda_1700[4] = gda_1700[2] / gda_1700[22];
   if (gda_1700[23] > 0.0) gda_1700[5] = MathAbs(gda_1700[3] / gda_1700[23]);
   if (gda_1700[22] > 0.0) gda_1700[15] = gda_1700[12] / gda_1700[22];
   if (gda_1700[23] > 0.0) gda_1700[16] = MathAbs(gda_1700[13] / gda_1700[23]);
   return (0);
}

int funct_045() {
   bool li_12;
   string ls_16;
   string l_name_24;
   string ls_unused_32;
   int l_file_40;
   int l_shift_48;
   int li_88;
   int li_96;
   int li_100;
   int l_datetime_104;
   string ls_108;
   string ls_116;
   bool li_ret_0 = FALSE;
   bool li_4 = FALSE;
   bool li_8 = FALSE;
   int li_52 = 99;
   int li_56 = 99;
   int li_60 = 99;
   int l_str2int_64 = 99;
   int l_str2int_68 = 99;
   bool li_72 = FALSE;
   bool li_76 = FALSE;
   bool li_80 = FALSE;
   int li_unused_84 = 0;
   int li_44 = 100;
   while (li_44 > 0) {
      li_44--;
      if (li_44 == 0) ls_16 = "";
      else {
         if (li_44 > 9) ls_16 = li_44;
         else ls_16 = "0" + li_44;
      }
      l_name_24 = "gmtstd" + ls_16 + ".csv";
      l_file_40 = FileOpen(l_name_24, FILE_CSV|FILE_READ, ';');
      if (l_file_40 >= 0) break;
   }
   if (l_file_40 < 1) funct_051(8, "funct_045()", "Ôàéë íàñòðîåê ðàçíèö GMT íå çàãðóæåí, îøèáêà: " + funct_052(GetLastError()), "Can not load GMTSTD file, error: " + funct_052(GetLastError()));
   else {
      funct_051(8, "funct_045()", "Çàãðóæåí ôàéë íàñòðîåê ðàçíèö GMT (" + l_name_24 + ")", "GMTSTD file loaded (" + l_name_24 + ")");
      ls_16 = FileReadString(l_file_40);
      ls_16 = FileReadString(l_file_40);
      for (ls_16 = FileReadString(l_file_40); !FileIsEnding(l_file_40); ls_16 = FileReadString(l_file_40)) {
         ls_16 = FileReadString(l_file_40);
         if (AccountCompany() == ls_16) {
            l_str2int_64 = StrToInteger(FileReadString(l_file_40));
            l_str2int_68 = StrToInteger(FileReadString(l_file_40));
            li_4 = TRUE;
            break;
         }
         ls_16 = FileReadString(l_file_40);
      }
      FileClose(l_file_40);
   }
   if (!li_4 && l_file_40 > 0) funct_051(8, "funct_045()", "Íàñòðîéêè ðàçíèöû GMT â ôàëå " + l_name_24 + " äëÿ äàííîãî áðîêåðà îòñóòñòâóþò", "No GMTSTD settings for this brocker");
   int li_92 = GetTickCount();
   if (!IsOptimization() && !IsTesting()) {
      if (iBarShift(gs_2100 + "USDJPY" + gs_2108, PERIOD_H1, D'04.03.2010 15:00', TRUE) < 0) funct_051(8, "GMTAutoDetection()", "Çàãðóæàåì èñòîðèþ ïî USDJPY äëÿ ðàñ÷åòà ðàçíèöû âðåìåíè òåðìèíàëà ñ GMT", "Load USDJPY history data to calculate GMT difference");
      while (GetTickCount() - li_92 < 5000) {
         li_100 = iBars(gs_2100 + "USDJPY" + gs_2108, PERIOD_H1);
         if (li_96 != li_100 && li_96 > 0) li_92 = GetTickCount();
         li_96 = li_100;
         l_datetime_104 = iTime(gs_2100 + "USDJPY" + gs_2108, PERIOD_H1, li_96 - 1);
         if (iBarShift(gs_2100 + "USDJPY" + gs_2108, PERIOD_H1, D'04.03.2010 15:00', TRUE) > 0) break;
         Sleep(500);
         if (!IsConnected()) li_92 = GetTickCount();
      }
   }
   if (l_datetime_104 > D'04.03.2010 15:00') funct_051(8, "GMTAutoDetection()", "Íåâîçìîæíî ðàñ÷èòàòü ðàçíèöó ñ GMT: Íåäîñòàòî÷íî áàðîâ èñòîðèè ïî USDJPY H1", "Unable to calculate GMT difference: No USDJPY H1 history data");
   else {
      funct_051(9, "GMTAutoDetection()", "Çàãðóæåíî áàðîâ èñòîðèè ïî USDJPY H1 äî " + TimeToStr(l_datetime_104, TIME_DATE|TIME_MINUTES), "Loaded USDJPY H1 history data up to " +
         TimeToStr(l_datetime_104, TIME_DATE|TIME_MINUTES));
      li_88 = D'05.03.2010 08:00';
      li_12 = FALSE;
      while (li_88 < D'06.03.2010') {
         l_shift_48 = iBarShift(gs_2100 + "USDJPY" + gs_2108, PERIOD_H1, li_88);
         if (iHigh(gs_2100 + "USDJPY" + gs_2108, PERIOD_H1, l_shift_48) > 89.7 && iLow(gs_2100 + "USDJPY" + gs_2108, PERIOD_H1, l_shift_48) < 89.7) {
            li_72 = li_88;
            li_52 = TimeHour(li_88) - 12;
            funct_051(9, "GMTAutoDetection()", "1-ÿ êîíòðîëüíàÿ òî÷êà " + TimeToStr(li_88, TIME_DATE|TIME_MINUTES), "First time point " + TimeToStr(li_88, TIME_DATE|TIME_MINUTES));
            li_12 = TRUE;
            break;
         }
         li_88 += 3600;
      }
      if (!li_12) funct_051(9, "GMTAutoDetection()", "1-ÿ êîíòðîëüíàÿ òî÷êà íå íàéäåíà", "First time point not found");
      li_88 = D'24.03.2010 04:00';
      li_12 = FALSE;
      while (li_88 < D'24.03.2010 20:00') {
         l_shift_48 = iBarShift(gs_2100 + "USDJPY" + gs_2108, PERIOD_H1, li_88);
         if (iHigh(gs_2100 + "USDJPY" + gs_2108, PERIOD_H1, l_shift_48) > 90.8 && iLow(gs_2100 + "USDJPY" + gs_2108, PERIOD_H1, l_shift_48) < 90.8) {
            li_76 = li_88;
            funct_051(9, "GMTAutoDetection()", "2-ÿ êîíòðîëüíàÿ òî÷êà " + TimeToStr(li_88, TIME_DATE|TIME_MINUTES), "Second time point " + TimeToStr(li_88, TIME_DATE|TIME_MINUTES));
            li_12 = TRUE;
            break;
         }
         li_88 += 3600;
      }
      if (!li_12) funct_051(9, "GMTAutoDetection()", "2-ÿ êîíòðîëüíàÿ òî÷êà íå íàéäåíà", "Second time point not found");
      li_88 = D'02.04.2010 08:00';
      li_12 = FALSE;
      while (li_88 < D'03.04.2010') {
         l_shift_48 = iBarShift(gs_2100 + "USDJPY" + gs_2108, PERIOD_H1, li_88);
         if (iHigh(gs_2100 + "USDJPY" + gs_2108, PERIOD_H1, l_shift_48) > 94.15 && iLow(gs_2100 + "USDJPY" + gs_2108, PERIOD_H1, l_shift_48) < 94.15) {
            li_80 = li_88;
            li_56 = TimeHour(li_88) - 12;
            funct_051(9, "GMTAutoDetection()", "3-ÿ êîíòðîëüíàÿ òî÷êà " + TimeToStr(li_88, TIME_DATE|TIME_MINUTES), "Third time point " + TimeToStr(li_88, TIME_DATE|TIME_MINUTES));
            li_12 = TRUE;
            break;
         }
         li_88 += 3600;
      }
      if (!li_12) funct_051(9, "GMTAutoDetection()", "3-ÿ êîíòðîëüíàÿ òî÷êà íå íàéäåíà", "Third time point not found");
      if (TimeHour(li_80) - TimeHour(li_76) == 5) {
         li_60 = 0;
         li_8 = TRUE;
      } else {
         if (TimeHour(li_76) - TimeHour(li_72) == -4) {
            li_60 = 1;
            li_8 = TRUE;
         } else {
            if (TimeHour(li_80) - TimeHour(li_72) == -1) {
               li_60 = 2;
               li_8 = TRUE;
            }
         }
      }
   }
   if (UseAutoTimeSettings) {
      ls_108 = "";
      ls_116 = "";
      if (li_4) {
         if (li_8) {
            if (l_str2int_64 == li_52 && l_str2int_68 == li_60) funct_051(8, "GMTAutoDetection()", "Çàãðóæåííàÿ ðàçíèöà ñ GMT ïðîâåðåíà", "GMT difference checked");
            else {
               if (li_52 >= 0) ls_116 = "+";
               TimeZone = l_str2int_64;
               SWChangeMode = l_str2int_68;
               if (TimeZone >= 0) ls_116 = "+";
               funct_051(8, "funct_045()", "Ðàñ÷åòíûå íàñòðîéêè âðåìåíè GMT" + ls_108 + li_52 + " (SWCM" + li_60 + ") íå ñîâïàäàþò ñ çàãðóæåííûìè GMT" + ls_116 + TimeZone + " (SWCM" +
                  SWChangeMode + ")", "Calculated times settings GMT" + ls_108 + li_52 + " (SWCM" + li_60 + ") are not the same with loaded GMT" + ls_116 + TimeZone + " (SWCM" + SWChangeMode +
                  ")");
            }
         } else {
            if (li_56 < 99) {
               ls_116 = "";
               if (li_56 >= 0) ls_116 = "+";
               funct_051(8, "GMTAutoDetection()", "Íåâîçìîæíî ïðîâåðèòü çàãðóæåííóþ ðàçíèöó ñ GMT, ðåêîìåíäóåìûå íàñòðîéêè âðåìåíè GMT" + ls_116 + li_56, "Unable to check GMT difference, recommended GMT" +
                  ls_116 + li_56);
            } else funct_051(8, "GMTAutoDetection()", "Íåâîçìîæíî ïðîâåðèòü çàãðóæåííóþ ðàçíèöó ñ GMT", "Unable to check GMT difference");
         }
         ls_108 = "";
         TimeZone = l_str2int_64;
         SWChangeMode = l_str2int_68;
         if (TimeZone >= 0) ls_108 = "+";
         funct_051(8, "funct_045()", "Óñòàíîâëåíû çàãðóæåííûå íàñòðîéêè âðåìåíè: GMT" + ls_108 + TimeZone + " (SWCM" + SWChangeMode + ")", "Loaded times settings: GMT" + ls_108 +
            TimeZone + " (SWCM" + SWChangeMode + ")");
      } else {
         if (li_8) {
            TimeZone = li_52;
            SWChangeMode = li_60;
            if (TimeZone >= 0) ls_108 = "+";
            funct_051(8, "funct_045()", "Óñòàíîâëåíû ðàñ÷åòíûå íàñòðîéêè âðåìåíè: GMT" + ls_108 + TimeZone + " (SWCM" + SWChangeMode + ")", "Calculated times settings: GMT" +
               ls_108 + TimeZone + " (SWCM" + SWChangeMode + ")");
         } else {
            if (li_56 < 99) {
               TimeZone = li_56;
               SWChangeMode = FALSE;
               ls_116 = "";
               if (li_56 >= 0) ls_116 = "+";
               funct_051(8, "GMTAutoDetection()", "Íåâîçìîæíî ðàñ÷èòàòü íàñòðîéêè âðåìåíè, ðåêîìåíäóåòñÿ GMT" + ls_116 + li_56, "Unable to calculate GMT difference, recommended time settings GMT" +
                  ls_116 + li_56);
               funct_051(8, "funct_045()", "Óñòàíîâëåíû ðåêîìåíäóåìûå íàñòðîéêè âðåìåíè: GMT" + ls_116 + TimeZone + " (SWCM" + SWChangeMode + ")", "Loaded recommended times settings: GMT" +
                  ls_116 + TimeZone + " (SWCM" + SWChangeMode + ")");
            } else {
               funct_051(8, "GMTAutoDetection()", "Íåâîçìîæíî ïðîâåðèòü çàãðóæåííóþ ðàçíèöó ñ GMT, ðåêîìåíäóåìûå íàñòðîéêè íå îïðåäåëåíû", "Unable to check GMT difference, no recommended time settings");
               if (TimeZone >= 0) ls_108 = "+";
               funct_051(8, "funct_045()", "Óñòàíîâëåíû ïðåäóñòàíîâëåííûå íàñòðîéêè âðåìåíè: GMT" + ls_108 + TimeZone + " (SWCM" + SWChangeMode + ")", "Loaded default times settings: GMT" +
                  ls_108 + TimeZone + " (SWCM" + SWChangeMode + ")");
            }
         }
      }
   } else {
      if (TimeZone >= 0) ls_108 = "+";
      funct_051(8, "funct_045()", "Óñòàíîâëåíû ïðåäóñòàíîâëåííûå íàñòðîéêè âðåìåíè: GMT" + ls_108 + TimeZone + " (SWCM" + SWChangeMode + ")", "Loaded default times settings: GMT" +
         ls_108 + TimeZone + " (SWCM" + SWChangeMode + ")");
   }
   return (li_ret_0);
}

int funct_046() {
   bool li_ret_0 = FALSE;
   if (SWChangeMode == 1 || SWChangeMode == 3) {
      if (TimeCurrent() > gi_1896 && TimeCurrent() < gi_1908) li_ret_0 = TRUE;
      if (TimeCurrent() > gi_1912 && TimeCurrent() < gi_1900) li_ret_0 = TRUE;
   }
   if (SWChangeMode == 2)
      if (TimeCurrent() > gi_1896 || TimeCurrent() < gi_1900) li_ret_0 = TRUE;
   return (li_ret_0);
}

int funct_047() {
   string ls_4;
   bool li_ret_0 = FALSE;
   string ls_12 = "&";
   if (!IsDemo()) {
      ls_4 = ls_4 + "WindowExpertName=" + WindowExpertName() + ls_12 + "KeyVersion=" + 4500 + ls_12 + "AccountNumber=" + AccountNumber() + ls_12 + "AccountName=" + AccountName() + ls_12 + "AccountServer=" + AccountServer() + ls_12 + "AccountCompany=" + AccountCompany() + ls_12 + "TerminalCompany=" + TerminalCompany();
      if (funct_101(ls_4)) {
         funct_051(9, "funct_047()", "Çàïðîñ ôàéëà êëþ÷à îòïðàâëåí", "Key request sent");
         li_ret_0 = TRUE;
      }
   }
   if (!li_ret_0) funct_051(8, "funct_047()", "Íåâîçìîæíî îòïðàâèòü çàïðîñ êëþ÷à, îáðàòèòåñü â òåõ. ïîääåðæêó admin@forexover.com", "Unable to send key request, contact support admin@forexover.com");
   return (li_ret_0);
}

int funct_048() {
   int li_ret_0 = funct_070();
   if (li_ret_0 > 0) funct_069(li_ret_0);
   gi_1512 = li_ret_0;
   funct_051(8, "funct_048()", "Èíèöèàëèçèðîâàíî íàñòðîåê: " + gi_1512, "Settings total: " + gi_1512);
   return (li_ret_0);
}

int funct_002(int ai_0, bool ai_4) {
   int li_ret_8 = -1;
   int li_12 = -1;
   if (ai_0 == 0) return (li_ret_8);
   if (ai_0 > gi_1512) {
      if (ai_4) funct_051(8, "SetMode()", "Îøèáêà óñòàíîâêè íàñòðîåê: íåñóùåñòâóþèé ðåæèì", "Error load settings: unknown settings");
      return (li_ret_8);
   }
   li_12++;
   gs_1956 = gsa_1992[li_12][ai_0];
   li_12 += gi_1396;
   gi_272 = StrToInteger(gsa_1992[li_12][ai_0]) * gi_1288;
   li_12 = li_12 + gi_1400 - gi_1396;
   li_12++;
   li_12++;
   if (gi_164 == 0) gi_164 = StrToInteger(gsa_1992[li_12][ai_0]) * gi_1288;
   li_12++;
   li_12++;
   g_str2int_280 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_str2int_284 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_str2int_288 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_str2int_304 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_str2int_308 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_str2int_312 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_str2int_316 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   li_12++;
   g_str2int_320 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   li_12++;
   gi_324 = StrToInteger(gsa_1992[li_12][ai_0]) * gi_1288;
   li_12++;
   gi_328 = StrToInteger(gsa_1992[li_12][ai_0]) * gi_1288;
   li_12++;
   li_12++;
   if (g_slippage_332 == 0) g_slippage_332 = StrToInteger(gsa_1992[li_12][ai_0]) * gi_1288;
   li_12++;
   if (g_slippage_336 == 0) g_slippage_336 = StrToInteger(gsa_1992[li_12][ai_0]) * gi_1288;
   li_12++;
   g_str2int_260 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   gi_276 = StrToInteger(gsa_1992[li_12][ai_0]) * gi_1288;
   li_12++;
   li_12 += gi_1396;
   gi_348 = StrToInteger(gsa_1992[li_12][ai_0]) * gi_1288;
   li_12 = li_12 + gi_1400 - gi_1396;
   li_12 += gi_1396;
   if (MaxSpreadValue == 0) MaxSpreadValue = StrToInteger(gsa_1992[li_12][ai_0]) * gi_1288;
   li_12 = li_12 + gi_1400 - gi_1396;
   li_12++;
   gi_392 = StrToInteger(gsa_1992[li_12][ProfitSensLevel]);
   li_12++;
   g_str2int_396 = StrToInteger(gsa_1992[li_12][ProfitSensLevel]);
   li_12++;
   g_str2int_340 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_str2int_344 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_str2int_352 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_str2int_356 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_str2int_368 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   gi_372 = StrToInteger(gsa_1992[li_12][ai_0]) * gi_1288;
   li_12++;
   g_str2int_376 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12 += gi_1396;
   gi_380 = StrToInteger(gsa_1992[li_12][ai_0]) * gi_1288;
   li_12 = li_12 + gi_1400 - gi_1396;
   li_12++;
   g_str2int_384 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_str2int_400 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   gd_412 = StrToDouble(gsa_1992[li_12][ai_0]) * gi_1288;
   li_12++;
   g_str2int_420 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_str2int_424 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   gd_436 = StrToDouble(gsa_1992[li_12][ai_0]) * gi_1288;
   li_12++;
   g_str2int_444 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   gd_448 = StrToDouble(gsa_1992[li_12][ai_0]) * gi_1288;
   li_12++;
   g_str2int_456 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_str2int_460 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_str2int_464 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_str2int_476 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_str2int_480 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_str2int_484 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_str2int_488 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_str2int_492 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_str2int_496 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   gi_500 = StrToInteger(gsa_1992[li_12][ai_0]) * gi_1288;
   li_12++;
   gi_504 = StrToInteger(gsa_1992[li_12][ai_0]) * gi_1288;
   li_12++;
   gi_508 = StrToInteger(gsa_1992[li_12][ai_0]) * gi_1288;
   li_12++;
   gi_512 = StrToInteger(gsa_1992[li_12][ai_0]) * gi_1288;
   li_12++;
   g_str2int_516 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_str2int_520 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_str2int_524 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_str2int_528 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_str2int_536 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_str2int_540 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_str2int_544 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_period_556 = StrToInteger(gsa_1992[li_12][FletFilterLevel]);
   li_12++;
   gd_560 = StrToDouble(gsa_1992[li_12][FletFilterLevel]) * gi_1288;
   li_12++;
   g_ma_method_568 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_applied_price_572 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_str2int_576 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_str2int_588 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   gd_592 = StrToDouble(gsa_1992[li_12][ai_0]) * gi_1288;
   li_12++;
   g_str2int_600 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_str2int_604 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_str2int_608 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   gd_620 = StrToDouble(gsa_1992[li_12][ai_0]) * gi_1288;
   li_12++;
   g_str2int_628 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_str2int_632 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   gd_636 = StrToDouble(gsa_1992[li_12][ai_0]) * gi_1288;
   li_12++;
   g_str2int_644 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_str2int_648 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_str2int_660 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_str2int_664 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   gi_668 = StrToInteger(gsa_1992[li_12][ai_0]) * gi_1288;
   li_12++;
   g_str2int_672 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   gi_676 = StrToInteger(gsa_1992[li_12][ai_0]) * gi_1288;
   li_12++;
   g_str2int_680 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   gi_684 = StrToInteger(gsa_1992[li_12][ai_0]) * gi_1288;
   li_12++;
   g_str2int_688 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   gi_692 = StrToInteger(gsa_1992[li_12][ai_0]) * gi_1288;
   li_12++;
   g_str2int_696 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   gi_700 = StrToInteger(gsa_1992[li_12][ai_0]) * gi_1288;
   li_12++;
   g_str2int_712 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_timeframe_716 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_period_720 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_applied_price_724 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_timeframe_728 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_period_732 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_applied_price_736 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   gi_740 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_timeframe_744 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_period_748 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_applied_price_752 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_period_756 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   gd_760 = StrToDouble(gsa_1992[li_12][ai_0]) * gi_1288;
   li_12++;
   g_ma_method_768 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_applied_price_772 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   gi_776 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_str2int_780 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_str2dbl_784 = StrToDouble(gsa_1992[li_12][ai_0]);
   li_12++;
   g_str2dbl_792 = StrToDouble(gsa_1992[li_12][ai_0]);
   li_12++;
   g_str2dbl_800 = StrToDouble(gsa_1992[li_12][ai_0]);
   li_12++;
   g_str2dbl_808 = StrToDouble(gsa_1992[li_12][ai_0]);
   li_12++;
   g_str2int_816 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   g_str2int_820 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12++;
   li_12++;
   gd_836 = StrToDouble(gsa_1992[li_12][ai_0]) * gi_1288;
   li_12++;
   gd_844 = StrToDouble(gsa_1992[li_12][ai_0]) * gi_1288;
   li_12++;
   gd_852 = StrToDouble(gsa_1992[li_12][ai_0]) * gi_1288;
   li_12 += gi_1396;
   g_str2int_944 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12 = li_12 + gi_1400 - gi_1396;
   li_12 += gi_1396;
   g_str2int_948 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12 = li_12 + gi_1400 - gi_1396;
   li_12 += gi_1396;
   if (g_str2int_892 == -1) g_str2int_892 = StrToInteger(gsa_1992[li_12][ai_0]);
   li_12 = li_12 + gi_1400 - gi_1396;
   g_str2int_1540 = StrToInteger(gsa_1992[167][ai_0]);
   g_str2int_1536 = StrToInteger(gsa_1992[168][ai_0]);
   g_str2int_1532 = StrToInteger(gsa_1992[169][ai_0]);
   if (g_str2int_892 >= 0) {
      gi_888 = TRUE;
      if (g_str2int_892 > 22) g_str2int_892 = 22;
      if (g_str2int_892 == 0) {
         gi_896 = 0;
         gi_900 = 0;
      }
      if (g_str2int_892 == 1) {
         gi_896 = 1;
         gi_900 = 0;
      }
      if (g_str2int_892 == 2) {
         gi_896 = 1;
         gi_900 = 1;
      }
      if (g_str2int_892 == 3) {
         gi_896 = 2;
         gi_900 = 0;
      }
      if (g_str2int_892 == 4) {
         gi_896 = 2;
         gi_900 = 1;
      }
      if (g_str2int_892 == 5) {
         gi_896 = 2;
         gi_900 = 2;
      }
      if (g_str2int_892 == 6) {
         gi_896 = 3;
         gi_900 = 0;
      }
      if (g_str2int_892 == 7) {
         gi_896 = 3;
         gi_900 = 1;
      }
      if (g_str2int_892 == 8) {
         gi_896 = 3;
         gi_900 = 3;
      }
      if (g_str2int_892 == 9) {
         gi_896 = 4;
         gi_900 = 0;
      }
      if (g_str2int_892 == 10) {
         gi_896 = 4;
         gi_900 = 1;
      }
      if (g_str2int_892 == 11) {
         gi_896 = 4;
         gi_900 = 2;
      }
      if (g_str2int_892 == 12) {
         gi_896 = 4;
         gi_900 = 3;
      }
      if (g_str2int_892 == 13) {
         gi_896 = 4;
         gi_900 = 4;
      }
      if (g_str2int_892 == 14) {
         gi_896 = 5;
         gi_900 = 5;
      }
      if (g_str2int_892 == 15) {
         gi_896 = 6;
         gi_900 = 5;
      }
      if (g_str2int_892 == 16) {
         gi_896 = 6;
         gi_900 = 6;
      }
      if (g_str2int_892 == 17) {
         gi_896 = 7;
         gi_900 = 5;
      }
      if (g_str2int_892 == 18) {
         gi_896 = 7;
         gi_900 = 6;
      }
      if (g_str2int_892 == 19) {
         gi_896 = 8;
         gi_900 = 5;
      }
      if (g_str2int_892 == 20) {
         gi_896 = 8;
         gi_900 = 6;
      }
      if (g_str2int_892 == 21) {
         gi_896 = 9;
         gi_900 = 5;
      }
      if (g_str2int_892 == 22) {
         gi_896 = 9;
         gi_900 = 6;
      }
   }
   if (!g_str2int_476) {
      g_str2int_484 = g_str2int_480;
      g_str2int_492 = g_str2int_480;
      g_str2int_496 = g_str2int_480;
   }
   li_ret_8 = ai_0;
   if (ai_4) funct_051(8, "SetMode()", "Óñòàíîâëåíû íàñòðîéêè: " + gs_1956, "Load settings: " + gs_1956);
   return (li_ret_8);
}

int funct_049() {
   bool li_24;
   bool li_ret_4 = FALSE;
   if (!gi_1048 || !ShowTimes) return (li_ret_4);
   gs_1924 = "00 " + "01 " + "02 " + "03 " + "04 " + "05 " + "06 " + "07 " + "08 " + "09 " + "10 " + "11 " + "12 " + "13 " + "14 " + "15 " + "16 " + "17 " + "18 " + "19 " + "20 " + "21 " + "22 " + "23 " + "24 " 
   + "\n";
   int li_28 = TimeCurrent() - 86400 * DayOfWeek() - 3600 * Hour() - 60 * Minute() - Seconds() + 86400 + 1800;
   for (int li_8 = 1; li_8 < 6; li_8++) {
      gs_1924 = gs_1924 + " |";
      for (int l_count_20 = 0; l_count_20 < 24; l_count_20++) {
         for (int li_0 = 0; li_0 < 10; li_0 += 2) {
            li_24 = FALSE;
            if (funct_031(li_28)) {
               li_24 = TRUE;
               break;
            }
         }
         if (li_24) gs_1924 = gs_1924 + ":::|";
         else gs_1924 = gs_1924 + "   |";
         li_28 += 3600;
      }
      gs_1924 = gs_1924 
      + "\n";
   }
   return (li_ret_4);
}

int funct_050() {
   if (!gi_1048) return (0);
   gs_1916 = "";
   string ls_0 = " GMT";
   string ls_8 = "";
   if (TimeZone >= 0) ls_0 = ls_0 + "+" + TimeZone;
   else ls_0 = ls_0 + "" + TimeZone;
   if (gi_1516 > 0) ls_0 = ls_0 + " (Corr+" + gi_1516 + ")";
   if (gi_1516 < 0) ls_0 = ls_0 + " (Corr" + gi_1516 + ")";
   if (gi_1516 == 0) ls_0 = ls_0 + " (Corr " + gi_1516 + ")";
   gs_1916 = gs_1916 + AccountCompany() + " (" + AccountNumber() + "): " + AccountName() + " (magic " + ((g_magic_1356 - gi_1380)) + "+" + gi_1380 + ")" + ls_0 + ls_8 
   + "\n";
   string ls_16 = "Cross (normal) Mode";
   if (CrossOverMode) ls_16 = "Cross Over Mode";
   if (MarketInfoMode) ls_16 = "Market Information Mode";
   gs_1916 = gs_1916 + ls_16 
   + "\n";
   if (gi_960 && !gi_956) {
      gs_1916 = gs_1916 + "Ðåæèì ïåðåäà÷è äàííûõ" 
      + "\n";
   }
   if (!gi_960 && gi_956) {
      gs_1916 = gs_1916 + "Ðåæèì ïðèåìà äàííûõ" 
      + "\n";
   }
   return (0);
}

int funct_051(int ai_0, string as_4, string as_12, string as_20) {
   if (Language == "eng") as_12 = as_20;
   bool li_ret_28 = FALSE;
   string ls_40 = "";
   if (ai_0 == 8 || ai_0 == 9) {
      if (gi_1060) as_12 = as_4 + ": " + as_12;
      if (ai_0 == 8 || (ai_0 == 9 && gi_1076)) {
         if (gi_1088) {
            ls_40 = ls_40 + TimeToStr(TimeCurrent(), TIME_SECONDS) + " : ";
            if (gi_1092) ls_40 = ls_40 + "euronis";
            if (gi_1100) ls_40 = ls_40 + "(" + g_magic_1356 + ")";
            if (gi_1092 || gi_1100) ls_40 = ls_40 + ": ";
            Print(ls_40 + as_12);
         }
         ls_40 = "";
         if (gi_1048) {
            if (ShowTimes) ls_40 = ls_40 + gs_1924;
            if (ShowInformation) {
               g_count_1484++;
               if (g_count_1484 > InformationStringNumber) {
                  g_count_1484 = InformationStringNumber;
                  if (InformationStringNumber > 1) for (int l_index_32 = 0; l_index_32 < InformationStringNumber - 1; l_index_32++) gsa_1984[l_index_32] = gsa_1984[l_index_32 + 1];
               }
               gsa_1984[g_count_1484 - 1] = TimeToStr(TimeCurrent(), TIME_SECONDS) + " : " + as_12;
               for (l_index_32 = 0; l_index_32 < InformationStringNumber; l_index_32++) {
                  ls_40 = ls_40 + gsa_1984[l_index_32];
                  if (l_index_32 < InformationStringNumber - 1) {
                     ls_40 = ls_40 
                     + "\n";
                  }
               }
            }
            gs_1948 = ls_40;
            if (ShowSpreadsMeasurement) {
               ls_40 = ls_40 
                  + "\n" 
                  + gsa_1980[0] 
                  + "\n" 
                  + gsa_1980[1] 
                  + "\n" 
                  + gsa_1980[2] 
                  + "\n" 
                  + gsa_1980[3] 
                  + "\n" 
                  + gsa_1980[4] 
                  + "\n" 
                  + gsa_1980[5] 
                  + "\n" 
               + gsa_1980[6];
            }
            Comment(gs_1916 + gs_2036 + ls_40);
         }
      }
      if (gi_1084) {
         for (l_index_32 = 0; l_index_32 < 20; l_index_32++) {
            if (gsa_2000[l_index_32] == "") {
               gsa_2000[l_index_32] = TimeToStr(TimeCurrent(), TIME_SECONDS) + " : " + as_12;
               if (l_index_32 != 19) break;
               funct_058(" ");
               break;
            }
         }
      }
   }
   if (ai_0 == 0 || ai_0 == 1 || ai_0 == 2 || ai_0 == 3 || ai_0 == 4 || ai_0 == 5 || ai_0 == 6) {
      gsa_1980[ai_0] = as_12;
      if (gi_1048) {
         ls_40 = gs_1948;
         if (ShowSpreadsMeasurement) {
            ls_40 = ls_40 
               + "\n" 
               + gsa_1980[0] 
               + "\n" 
               + gsa_1980[1] 
               + "\n" 
               + gsa_1980[2] 
               + "\n" 
               + gsa_1980[3] 
               + "\n" 
               + gsa_1980[4] 
               + "\n" 
               + gsa_1980[5] 
               + "\n" 
            + gsa_1980[6];
         }
         Comment(gs_1916 + gs_2036 + ls_40);
      }
   }
   if (ai_0 == 7) {
      if (gi_1048) {
         ls_40 = gs_1948;
         if (ShowSpreadsMeasurement) {
            ls_40 = ls_40 
               + "\n" 
               + gsa_1980[0] 
               + "\n" 
               + gsa_1980[1] 
               + "\n" 
               + gsa_1980[2] 
               + "\n" 
               + gsa_1980[3] 
               + "\n" 
               + gsa_1980[4] 
               + "\n" 
               + gsa_1980[5] 
               + "\n" 
            + gsa_1980[6];
         }
         Comment(gs_1916 + gs_2036 + ls_40);
      }
   }
   return (li_ret_28);
}

string funct_052(int ai_0) {
   if (ai_0 > 4299 || ai_0 < 0) ai_0 = 4299;
   string ls_ret_4 = ai_0 + " " + gsa_1996[ai_0];
   return (ls_ret_4);
}

void InitErrorArray() {
   if (Language == "eng") {
      gsa_1996[0] = "No error returned";
      gsa_1996[1] = "No error returned, but the result is unknown";
      gsa_1996[2] = "Common error";
      gsa_1996[3] = "Invalid trade parameters";
      gsa_1996[4] = "Trade server is busy";
      gsa_1996[5] = "Old version of the client terminal";
      gsa_1996[6] = "No connection with trade server";
      gsa_1996[7] = "Not enough rights";
      gsa_1996[8] = "Too frequent requests";
      gsa_1996[9] = "Malfunctional trade operation";
      gsa_1996[64] = "Account disabled";
      gsa_1996[65] = "Invalid account";
      gsa_1996[128] = "Trade timeout";
      gsa_1996[129] = "Invalid price";
      gsa_1996[130] = "Invalid stops";
      gsa_1996[131] = "Invalid trade volume";
      gsa_1996[132] = "Market is closed";
      gsa_1996[133] = "Trade is disabled";
      gsa_1996[134] = "Not enough money";
      gsa_1996[135] = "Price changed";
      gsa_1996[136] = "Off quotes";
      gsa_1996[137] = "Broker is busy";
      gsa_1996[138] = "Requote";
      gsa_1996[139] = "Order is locked";
      gsa_1996[140] = "Long positions only allowed";
      gsa_1996[141] = "Too many requests";
      gsa_1996[145] = "Modification denied because an order is too close to market";
      gsa_1996[146] = "Trade context busy";
      gsa_1996[147] = "Expirations are denied by broker";
      gsa_1996[148] = "The amount of opened and pending orders has reached the limit set by a broker";
      gsa_1996[4000] = "No error";
      gsa_1996[4001] = "Wrong function pointer";
      gsa_1996[4002] = "Array index is out of range";
      gsa_1996[4003] = "No memory for function call stack";
      gsa_1996[4004] = "Recursive stack overflow";
      gsa_1996[4005] = "Íà ñòåêå íåò ïàìÿòè äëÿ ïåðåäà÷è ïàðàìåòðîâ";
      gsa_1996[4006] = "Not enough stack for parameter";
      gsa_1996[4007] = "No memory for parameter string";
      gsa_1996[4008] = "Not initialized string";
      gsa_1996[4009] = "Not initialized string in an array";
      gsa_1996[4010] = "No memory for an array string";
      gsa_1996[4011] = "Too long string";
      gsa_1996[4012] = "Remainder from zero divide";
      gsa_1996[4013] = "Zero divide";
      gsa_1996[4014] = "Unknown command";
      gsa_1996[4015] = "Wrong jump";
      gsa_1996[4016] = "Not initialized array";
      gsa_1996[4017] = "DLL calls are not allowed";
      gsa_1996[4018] = "Cannot load library";
      gsa_1996[4019] = "Cannot call function";
      gsa_1996[4020] = "EA function calls are not allowed";
      gsa_1996[4021] = "Not enough memory for a string returned from a function";
      gsa_1996[4022] = "System is busy";
      gsa_1996[4050] = "Invalid function parameters count";
      gsa_1996[4051] = "Invalid function parameter value";
      gsa_1996[4052] = "String function internal error";
      gsa_1996[4053] = "Some array error";
      gsa_1996[4054] = "Incorrect series array using";
      gsa_1996[4055] = "Custom indicator error";
      gsa_1996[4056] = "Arrays are incompatible";
      gsa_1996[4057] = "Global variables processing error";
      gsa_1996[4058] = "Global variable not found";
      gsa_1996[4059] = "Function is not allowed in testing mode";
      gsa_1996[4060] = "Function is not confirmed";
      gsa_1996[4061] = "Mail sending error";
      gsa_1996[4062] = "String parameter expected";
      gsa_1996[4063] = "Integer parameter expected";
      gsa_1996[4064] = "Double parameter expected";
      gsa_1996[4065] = "Array as parameter expected";
      gsa_1996[4066] = "Requested history data in updating state";
      gsa_1996[4067] = "Some error in trade operation execution";
      gsa_1996[4099] = "End of a file";
      gsa_1996[4100] = "Some file error";
      gsa_1996[4101] = "Wrong file name";
      gsa_1996[4102] = "Too many opened files";
      gsa_1996[4103] = "Cannot open file";
      gsa_1996[4104] = "Incompatible access to a file";
      gsa_1996[4105] = "No order selected";
      gsa_1996[4106] = "Unknown symbol";
      gsa_1996[4107] = "Invalid price";
      gsa_1996[4108] = "Invalid ticket";
      gsa_1996[4109] = "Trade is not allowed";
      gsa_1996[4110] = "Longs are not allowed";
      gsa_1996[4111] = "Shorts are not allowed";
      gsa_1996[4200] = "Object already exists";
      gsa_1996[4201] = "Unknown object property";
      gsa_1996[4202] = "Object does not exist";
      gsa_1996[4203] = "Unknown object type";
      gsa_1996[4204] = "No object name";
      gsa_1996[4205] = "Object coordinates error";
      gsa_1996[4206] = "No specified subwindow";
      gsa_1996[4207] = "Some error in object operation";
      gsa_1996[4299] = "Error code is out of range";
      return;
   }
   gsa_1996[0] = "Íåò îøèáêè";
   gsa_1996[1] = "Íåò îøèáêè, íî ðåçóëüòàò íåèçâåñòåí";
   gsa_1996[2] = "Îáùàÿ îøèáêà";
   gsa_1996[3] = "Íåïðàâèëüíûå ïàðàìåòðû";
   gsa_1996[4] = "Òîðãîâûé ñåðâåð çàíÿò";
   gsa_1996[5] = "Ñòàðàÿ âåðñèÿ êëèåíòñêîãî òåðìèíàëà";
   gsa_1996[6] = "Íåò ñâÿçè ñ òîðãîâûì ñåðâåðîì";
   gsa_1996[7] = "Íåäîñòàòî÷íî ïðàâ";
   gsa_1996[8] = "Ñëèøêîì ÷àñòûå çàïðîñû";
   gsa_1996[9] = "Íåäîïóñòèìàÿ îïåðàöèÿ íàðóøàþùàÿ ôóíêöèîíèðîâàíèå ñåðâåðà";
   gsa_1996[64] = "Ñ÷åò çàáëîêèðîâàí";
   gsa_1996[65] = "Íåïðàâèëüíûé íîìåð ñ÷åòà";
   gsa_1996[128] = "Èñòåê ñðîê îæèäàíèÿ ñîâåðøåíèÿ ñäåëêè";
   gsa_1996[129] = "Íåïðàâèëüíàÿ öåíà";
   gsa_1996[130] = "Íåïðàâèëüíûå ñòîïû";
   gsa_1996[131] = "Íåïðàâèëüíûé îáúåì";
   gsa_1996[132] = "Ðûíîê çàêðûò";
   gsa_1996[133] = "Òîðãîâëÿ çàïðåùåíà";
   gsa_1996[134] = "Íåäîñòàòî÷íî äåíåã äëÿ ñîâåðøåíèÿ îïåðàöèè";
   gsa_1996[135] = "Öåíà èçìåíèëàñü";
   gsa_1996[136] = "Íåò öåí";
   gsa_1996[137] = "Áðîêåð çàíÿò";
   gsa_1996[138] = "Íîâûå öåíû";
   gsa_1996[139] = "Îðäåð çàáëîêèðîâàí è óæå îáðàáàòûâàåòñÿ";
   gsa_1996[140] = "Ðàçðåøåíà òîëüêî ïîêóïêà";
   gsa_1996[141] = "Ñëèøêîì ìíîãî çàïðîñîâ";
   gsa_1996[145] = "Ìîäèôèêàöèÿ çàïðåùåíà, òàê êàê îðäåð ñëèøêîì áëèçîê ê ðûíêó";
   gsa_1996[146] = "Ïîäñèñòåìà òîðãîâëè çàíÿòà";
   gsa_1996[147] = "Èñïîëüçîâàíèå äàòû èñòå÷åíèÿ îðäåðà çàïðåùåíî áðîêåðîì";
   gsa_1996[148] = "Êîëè÷åñòâî îòêðûòûõ è îòëîæåííûõ îðäåðîâ äîñòèãëî ïðåäåëà, óñòàíîâëåííîãî áðîêåðîì";
   gsa_1996[4000] = "Íåò îøèáêè";
   gsa_1996[4001] = "Íåïðàâèëüíûé óêàçàòåëü ôóíêöèè";
   gsa_1996[4002] = "Èíäåêñ ìàññèâà - âíå äèàïàçîíà";
   gsa_1996[4003] = "Íåò ïàìÿòè äëÿ ñòåêà ôóíêöèé";
   gsa_1996[4004] = "Ïåðåïîëíåíèå ñòåêà ïîñëå ðåêóðñèâíîãî âûçîâà";
   gsa_1996[4005] = "Íà ñòåêå íåò ïàìÿòè äëÿ ïåðåäà÷è ïàðàìåòðîâ";
   gsa_1996[4006] = "Íåò ïàìÿòè äëÿ ñòðîêîâîãî ïàðàìåòðà";
   gsa_1996[4007] = "Íåò ïàìÿòè äëÿ âðåìåííîé ñòðîêè";
   gsa_1996[4008] = "Íåèíèöèàëèçèðîâàííàÿ ñòðîêà";
   gsa_1996[4009] = "Íåèíèöèàëèçèðîâàííàÿ ñòðîêà â ìàññèâå";
   gsa_1996[4010] = "Íåò ïàìÿòè äëÿ ñòðîêîâîãî ìàññèâà";
   gsa_1996[4011] = "Ñëèøêîì äëèííàÿ ñòðîêà";
   gsa_1996[4012] = "Îñòàòîê îò äåëåíèÿ íà íîëü";
   gsa_1996[4013] = "Äåëåíèå íà íîëü";
   gsa_1996[4014] = "Íåèçâåñòíàÿ êîìàíäà";
   gsa_1996[4015] = "Íåïðàâèëüíûé ïåðåõîä";
   gsa_1996[4016] = "Íåèíèöèàëèçèðîâàííûé ìàññèâ";
   gsa_1996[4017] = "Âûçîâû DLL íå ðàçðåøåíû";
   gsa_1996[4018] = "Íåâîçìîæíî çàãðóçèòü áèáëèîòåêó";
   gsa_1996[4019] = "Íåâîçìîæíî âûçâàòü ôóíêöèþ";
   gsa_1996[4020] = "Âûçîâû âíåøíèõ áèáëèîòå÷íûõ ôóíêöèé íå ðàçðåøåíû";
   gsa_1996[4021] = "Íåäîñòàòî÷íî ïàìÿòè äëÿ ñòðîêè, âîçâðàùàåìîé èç ôóíêöèè";
   gsa_1996[4022] = "Ñèñòåìà çàíÿòà";
   gsa_1996[4050] = "Íåïðàâèëüíîå êîëè÷åñòâî ïàðàìåòðîâ ôóíêöèè";
   gsa_1996[4051] = "Íåäîïóñòèìîå çíà÷åíèå ïàðàìåòðà ôóíêöèè";
   gsa_1996[4052] = "Âíóòðåííÿÿ îøèáêà ñòðîêîâîé ôóíêöèè";
   gsa_1996[4053] = "Îøèáêà ìàññèâà";
   gsa_1996[4054] = "Íåïðàâèëüíîå èñïîëüçîâàíèå ìàññèâà-òàéìñåðèè";
   gsa_1996[4055] = "Îøèáêà ïîëüçîâàòåëüñêîãî èíäèêàòîðà";
   gsa_1996[4056] = "Ìàññèâû íåñîâìåñòèìû";
   gsa_1996[4057] = "Îøèáêà îáðàáîòêè ãëîáàëüíûåõ ïåðåìåííûõ";
   gsa_1996[4058] = "Ãëîáàëüíàÿ ïåðåìåííàÿ íå îáíàðóæåíà";
   gsa_1996[4059] = "Ôóíêöèÿ íå ðàçðåøåíà â òåñòîâîì ðåæèìå";
   gsa_1996[4060] = "Ôóíêöèÿ íå ðàçðåøåíà";
   gsa_1996[4061] = "Îøèáêà îòïðàâêè ïî÷òû";
   gsa_1996[4062] = "Îæèäàåòñÿ ïàðàìåòð òèïà string";
   gsa_1996[4063] = "Îæèäàåòñÿ ïàðàìåòð òèïà integer";
   gsa_1996[4064] = "Îæèäàåòñÿ ïàðàìåòð òèïà double";
   gsa_1996[4065] = "Â êà÷åñòâå ïàðàìåòðà îæèäàåòñÿ ìàññèâ";
   gsa_1996[4066] = "Çàïðîøåííûå èñòîðè÷åñêèå äàííûå â ñîñòîÿíèè îáíîâëåíèÿ";
   gsa_1996[4067] = "Îøèáêà ïðè âûïîëíåíèè òîðãîâîé îïåðàöèè";
   gsa_1996[4099] = "Êîíåö ôàéëà";
   gsa_1996[4100] = "Îøèáêà ïðè ðàáîòå ñ ôàéëîì";
   gsa_1996[4101] = "Íåïðàâèëüíîå èìÿ ôàéëà";
   gsa_1996[4102] = "Ñëèøêîì ìíîãî îòêðûòûõ ôàéëîâ";
   gsa_1996[4103] = "Íåâîçìîæíî îòêðûòü ôàéë";
   gsa_1996[4104] = "Íåñîâìåñòèìûé ðåæèì äîñòóïà ê ôàéëó";
   gsa_1996[4105] = "Íè îäèí îðäåð íå âûáðàí";
   gsa_1996[4106] = "Íåèçâåñòíûé ñèìâîë";
   gsa_1996[4107] = "Íåïðàâèëüíûé ïàðàìåòð öåíû äëÿ òîðãîâîé ôóíêöèè";
   gsa_1996[4108] = "Íåâåðíûé íîìåð òèêåòà";
   gsa_1996[4109] = "Òîðãîâëÿ íå ðàçðåøåíà. Íåîáõîäèìî âêëþ÷èòü îïöèþ Ðàçðåøèòü ñîâåòíèêó òîðãîâàòü â ñâîéñòâàõ ýêñïåðòà";
   gsa_1996[4110] = "Äëèííûå ïîçèöèè íå ðàçðåøåíû. Íåîáõîäèìî ïðîâåðèòü ñâîéñòâà ýêñïåðòà";
   gsa_1996[4111] = "Êîðîòêèå ïîçèöèè íå ðàçðåøåíû. Íåîáõîäèìî ïðîâåðèòü ñâîéñòâà ýêñïåðòà";
   gsa_1996[4200] = "Îáúåêò óæå ñóùåñòâóåò";
   gsa_1996[4201] = "Çàïðîøåíî íåèçâåñòíîå ñâîéñòâî îáúåêòà";
   gsa_1996[4202] = "Îáúåêò íå ñóùåñòâóåò";
   gsa_1996[4203] = "Íåèçâåñòíûé òèï îáúåêòà";
   gsa_1996[4204] = "Íåò èìåíè îáúåêòà";
   gsa_1996[4205] = "Îøèáêà êîîðäèíàò îáúåêòà";
   gsa_1996[4206] = "Íå íàéäåíî óêàçàííîå ïîäîêíî";
   gsa_1996[4207] = "Îøèáêà ïðè ðàáîòå ñ îáúåêòîì";
   gsa_1996[4299] = "Êîä îøèáêè âíå äèàïàçîíà";
}

int funct_053() {
   int lia_0[500][10] = {0, 0, 0, 0, 0, 0, 0, 0, 23, 24,
   0, 0, 0, 0, 0, 0, 0, 0, 23, 24,
   0, 0, 0, 0, 0, 0, 0, 0, 23, 24,
   0, 0, 0, 0, 0, 0, 0, 0, 23, 24,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 23, 24,
   0, 2, 0, 0, 0, 0, 0, 0, 23, 24,
   0, 2, 0, 0, 0, 0, 0, 0, 23, 24,
   0, 2, 0, 0, 0, 0, 0, 0, 23, 24,
   0, 2, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 21, 24,
   0, 2, 0, 0, 0, 0, 0, 0, 21, 24,
   0, 2, 0, 0, 0, 0, 0, 0, 21, 24,
   0, 2, 0, 0, 0, 0, 0, 0, 21, 24,
   0, 2, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 23, 24,
   0, 6, 0, 0, 0, 0, 0, 0, 23, 24,
   0, 6, 0, 0, 0, 0, 0, 0, 23, 24,
   0, 6, 0, 0, 0, 0, 0, 0, 23, 24,
   0, 6, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 21, 24,
   0, 7, 0, 0, 0, 0, 0, 0, 21, 24,
   0, 7, 0, 0, 0, 0, 0, 0, 21, 24,
   0, 7, 0, 0, 0, 0, 0, 0, 21, 24,
   0, 7, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 19, 21, 24, 24,
   0, 0, 0, 0, 0, 0, 19, 21, 24, 24,
   0, 0, 0, 0, 0, 0, 19, 21, 24, 24,
   0, 0, 0, 0, 0, 0, 19, 21, 24, 24,
   0, 0, 0, 0, 0, 0, 19, 20, 24, 24,
   0, 0, 0, 0, 0, 0, 18, 21, 24, 24,
   0, 0, 0, 0, 0, 0, 18, 21, 24, 24,
   0, 0, 0, 0, 0, 0, 18, 21, 24, 24,
   0, 0, 0, 0, 0, 0, 18, 21, 24, 24,
   0, 0, 0, 0, 0, 0, 18, 20, 24, 24,
   0, 0, 0, 0, 6, 9, 18, 21, 24, 24,
   0, 0, 0, 0, 6, 9, 18, 21, 24, 24,
   0, 0, 0, 0, 6, 9, 18, 21, 24, 24,
   0, 0, 0, 0, 6, 9, 18, 21, 24, 24,
   0, 0, 0, 0, 6, 9, 18, 20, 24, 24,
   0, 0, 0, 0, 6, 12, 17, 21, 24, 24,
   0, 0, 0, 0, 6, 12, 17, 21, 24, 24,
   0, 0, 0, 0, 6, 12, 17, 21, 24, 24,
   0, 0, 0, 0, 6, 12, 17, 21, 24, 24,
   0, 0, 0, 0, 6, 12, 17, 20, 24, 24,
   0, 0, 0, 0, 6, 14, 17, 21, 24, 24,
   0, 0, 0, 0, 6, 14, 17, 21, 24, 24,
   0, 0, 0, 0, 6, 14, 17, 21, 24, 24,
   0, 0, 0, 0, 6, 14, 17, 21, 24, 24,
   0, 0, 0, 0, 6, 14, 17, 20, 24, 24};
   ArrayCopy(gia_1528, lia_0, 0, 0, WHOLE_ARRAY);
   return (0);
}

int funct_055() {
   double l_global_var_12;
   bool li_ret_0 = FALSE;
   double ld_4 = MathRound(GetTickCount() / 100);
   if (IsOptimization() || IsTesting()) {
      if (GlobalVariableCheck("LastOptTime")) {
         l_global_var_12 = GlobalVariableGet("LastOptTime");
         GlobalVariableSet("LastOptTime", ld_4);
         if (l_global_var_12 > ld_4) ld_4 += 86400.0;
         if (ld_4 - l_global_var_12 > gd_1116) li_ret_0 = TRUE;
      } else {
         GlobalVariableSet("LastOptTime", ld_4);
         li_ret_0 = TRUE;
      }
      if (!GlobalVariableCheck("OptCounter")) GlobalVariableSet("OptCounter", 0.0);
   }
   return (li_ret_0);
}

int funct_056(bool ai_0 = FALSE) {
   string ls_4;
   int li_12 = gi_1772;
   if (ai_0) {
      if (g_hour_1464 > 12) ls_4 = gi_1472 + "." + funct_057(TimeDay(gi_1884 + 86400));
      else ls_4 = gi_1472 + "." + funct_057(gi_1472);
      GlobalVariableSet(g_var_name_2068, StrToDouble(ls_4));
   }
   ls_4 = DoubleToStr(GlobalVariableGet(g_var_name_2068), 2);
   gi_2488 = MathAbs(StringFind(g_var_name_2068, CharToStr(84)));
   gi_1772 = FALSE;
   if ((gi_1472 == StrToInteger(StringSubstr(ls_4, 0, 2)) && StrToInteger(StringSubstr(ls_4, 3, 2)) != StrToInteger(StringSubstr(ls_4, 0, 2))) || (gi_1472 == StrToInteger(StringSubstr(ls_4, 3, 2)) &&
      g_hour_1464 < 12)) gi_1772 = TRUE;
   if (!li_12 && gi_1772) {
      funct_051(8, "CheckBlockByStopsDate()", "Òîðãîâëÿ çàáëîêèðîâàíà äî ñëåäóþùåé òîðãîâîé ñåññèè", "Trade is disabled until the next trading session");
      funct_098();
   }
   return (gi_1772);
}

string funct_057(int ai_0) {
   string ls_ret_4 = ai_0;
   if (ai_0 < 10) ls_ret_4 = "0" + ls_ret_4;
   return (ls_ret_4);
}

int funct_058(string as_0) {
   int l_file_32;
   bool li_ret_8 = FALSE;
   int l_index_12 = 0;
   string ls_16 = "";
   if (gi_1472 < 10) ls_16 = ls_16 + "0";
   ls_16 = ls_16 + gi_1472;
   if (g_month_1476 < 10) ls_16 = ls_16 + "0";
   ls_16 = ls_16 + g_month_1476 + g_year_1480;
   ls_16 = ls_16 + "_" + gs_2004;
   gi_1500 = StrToInteger(StringSubstr(ls_16, StringFind(ls_16, CharToStr(95), 11) - 1, 1)) - StrToInteger(gsa_1992[10][1]);
   string ls_24 = "CET: ";
   if (gi_1500 != 0) ls_24 = ls_24 + " ";
   if (gi_1472 < 10) ls_24 = ls_24 + "0";
   ls_24 = ls_24 + gi_1472 + ".";
   if (g_month_1476 < 10) ls_24 = ls_24 + "0";
   ls_24 = ls_24 + g_month_1476 + "." + g_year_1480 + " ";
   ls_24 = ls_24 + TimeToStr(gi_1884, TIME_SECONDS);
   ls_24 = ls_24 + " TT: ";
   if (Day() < 10) ls_24 = ls_24 + "0";
   ls_24 = ls_24 + Day() + ".";
   if (Month() < 10) ls_24 = ls_24 + "0";
   ls_24 = ls_24 + Month() + "." + Year() + " ";
   if (!gi_1084) return (li_ret_8);
   if (gsa_2000[0] != "" || as_0 == "deinit") {
      l_file_32 = FileOpen(ls_16, FILE_CSV|FILE_WRITE|FILE_READ, ';');
      if (l_file_32 < 1) {
         Print("Íåâîçìîæíî çàïèñàòü äàííûå â ôàéë " + ls_16 + ", îøèáêà: ", GetLastError());
         return (li_ret_8);
      }
      FileSeek(l_file_32, 0, SEEK_END);
      if (as_0 == "deinit") FileWrite(l_file_32, ls_24 + TimeToStr(TimeCurrent(), TIME_SECONDS) + " : ----------------------------deinit------------------------------");
      else {
         for (l_index_12 = 0; l_index_12 < 20; l_index_12++) {
            if (gsa_2000[l_index_12] == "") break;
            FileWrite(l_file_32, ls_24 + gsa_2000[l_index_12]);
            gsa_2000[l_index_12] = "";
         }
      }
      FileClose(l_file_32);
      li_ret_8 = TRUE;
   }
   return (li_ret_8);
}

int funct_059() {
   if (Point == 0.00001 || Point == 0.001) gi_1288 = 10;
   else gi_1288 = 1;
   gi_272 *= gi_1288;
   gi_276 *= gi_1288;
   gi_164 *= gi_1288;
   gi_248 *= gi_1288;
   gi_372 *= gi_1288;
   gi_380 *= gi_1288;
   gd_412 *= gi_1288;
   gd_436 *= gi_1288;
   gd_448 *= gi_1288;
   gi_500 *= gi_1288;
   gi_504 *= gi_1288;
   gi_508 *= gi_1288;
   gi_512 *= gi_1288;
   gd_560 *= gi_1288;
   gd_592 *= gi_1288;
   gd_620 *= gi_1288;
   gd_636 *= gi_1288;
   gd_760 *= gi_1288;
   gi_348 *= gi_1288;
   MaxSpreadValue *= gi_1288;
   gd_836 *= gi_1288;
   gd_844 *= gi_1288;
   gd_852 *= gi_1288;
   gi_324 *= gi_1288;
   gi_328 *= gi_1288;
   gi_668 *= gi_1288;
   gi_676 *= gi_1288;
   gi_684 *= gi_1288;
   gi_692 *= gi_1288;
   gi_700 *= gi_1288;
   g_slippage_332 *= gi_1288;
   g_slippage_336 *= gi_1288;
   gi_388 *= gi_1288;
   return (0);
}

int funct_060() {
   if (MarketInfoMode) {
      ShowSpreadsMeasurement = TRUE;
      gi_1072 = FALSE;
      gi_1076 = FALSE;
      gi_1080 = TRUE;
      gi_1084 = TRUE;
      gi_1088 = TRUE;
      CrossOverMode = TRUE;
   }
   if (IsOptimization() || IsTesting()) {
      CrossOverMode = FALSE;
      gi_180 = FALSE;
   }
   if (CrossOverMode) {
      gi_180 = TRUE;
      gi_188 = TRUE;
      gi_192 = TRUE;
   }
   gi_2496 = AccountNumber() + StringLen(AccountCompany()) + StringLen(AccountName()) + StringLen(AccountServer());
   gs_1972 = StringSubstr(AccountCompany(), 0, StringFind(AccountCompany(), " ", 0));
   gs_2116 = AccountNumber();
   gs_2124 = AccountName();
   gi_1404 = 0;
   gi_1408 = 0;
   gi_1416 = 0;
   gi_1412 = 0;
   for (int li_4 = 0; li_4 < StringLen(gs_2116); li_4++) {
      gi_1404 += StrToInteger(StringSubstr(gs_2116, li_4, 1));
      gi_1408 += StringGetChar(gs_2116, li_4);
   }
   for (li_4 = 0; li_4 < StringLen(gs_2124); li_4++) gi_1412 += StringGetChar(gs_2124, li_4);
   for (li_4 = 0; li_4 < StringLen(AccountServer()); li_4++) gi_1416 += StringGetChar(AccountServer(), li_4);
   for (gi_1896 = StrToTime(Year() + ".10.31"); TimeDayOfWeek(gi_1896) != 0; gi_1896 -= 86400) {
   }
   gi_1908 = gi_1896 + 604800;
   for (gi_1900 = StrToTime(Year() + ".03.31"); TimeDayOfWeek(gi_1900) != 0; gi_1900 -= 86400) {
   }
   for (gi_1904 = StrToTime((Year() + 1) + ".03.31"); TimeDayOfWeek(gi_1904) != 0; gi_1904 -= 86400) {
   }
   gi_1912 = gi_1900 - 1814400;
   gd_1572 = NormalizeDouble(MarketInfo(Symbol(), MODE_LOTSTEP), 2);
   if (LotStepValue > 0.0) gd_1572 = LotStepValue;
   gd_1580 = NormalizeDouble(MarketInfo(Symbol(), MODE_MINLOT), 2);
   if (MinLotValue > 0.0) gd_1580 = MinLotValue;
   gd_104 = NormalizeDouble(MarketInfo(Symbol(), MODE_MAXLOT), 2);
   for (g_count_1544 = 0; g_count_1544 < 10; g_count_1544++)
      if (10 * g_count_1544 * gd_1572 >= 1.0) break;
   funct_068();
   funct_084();
   gi_1380 = gi_1044;
   if (CrossOverMode) g_magic_1356 = gi_1044 + StringGetChar(gs_2184, 0) + StringGetChar(gs_2192, 0) + StringGetChar(gs_2184, 1) + StringGetChar(gs_2192, 1) + StringGetChar(gs_2184, 2) + StringGetChar(gs_2192, 2) + StringGetChar(gs_2184, 3) + StringGetChar(gs_2192, 3) + StringGetChar(gs_2184, 4) + StringGetChar(gs_2192, 4) + StringGetChar(gs_2184, 5) + StringGetChar(gs_2192, 5) + Period();
   else g_magic_1356 = gi_1044 + StringGetChar(gs_1964, 0) + StringGetChar(gs_1964, 1) + StringGetChar(gs_1964, 2) + StringGetChar(gs_1964, 3) + StringGetChar(gs_1964, 4) + StringGetChar(gs_1964, 5) + Period();
   gi_1504 = MathRound(MarketInfo(Symbol(), MODE_SPREAD));
   gi_1324 = MathRound(MarketInfo(Symbol(), MODE_FREEZELEVEL));
   gi_1328 = MathRound(MarketInfo(Symbol(), MODE_STOPLEVEL));
   gs_2004 = gs_1972 + AccountNumber() + "_" + gs_1964 + g_magic_1356 + ".log";
   gs_2012 = "TestReport_" + gs_1972 + AccountNumber() + "_" + gs_1964 + g_magic_1356;
   gs_2020 = "TradeReport_" + gs_1972 + AccountNumber() + "_" + gs_1964 + g_magic_1356;
   g_name_2028 = AccountNumber() + "_v" + 4500 + ".key";
   gs_2464 = "cr" + gs_1964 + Period() + "server" + gi_1416 + ".hst";
   gs_2472 = "os" + AccountNumber() + "_" + gs_1964 + g_magic_1356 + ".ost";
   gi_1400 = 7;
   gi_1396 = 1;
   if (gs_1964 == "EURCHF") gi_1396 = 2;
   if (gs_1964 == "GBPCHF") gi_1396 = 3;
   if (gs_1964 == "EURCAD") gi_1396 = 4;
   if (gs_1964 == "GBPCAD") gi_1396 = 5;
   if (gs_1964 == "CADCHF") gi_1396 = 6;
   if (gs_1964 == "AUDNZD") gi_1396 = 7;
   if (Lots != 0.0) {
      UseBalanceControl = FALSE;
      funct_051(8, "funct_060()", "Ðåæèì BalanceControl âûêëþ÷åí: Lots íå ðàâåí 0", "BalanceControl is disabled: Lots is not zero");
   }
   gs_2044 = (gi_1404 + gi_1408 + gi_1412) * 2 + AccountNumber();
   g_str2int_1376 = StrToInteger(StringSubstr(WindowExpertName(), StringFind(WindowExpertName(), "_", 0) + 2, 4));
   int l_pos_8 = 0;
   int l_hist_total_16 = OrdersHistoryTotal();
   for (l_pos_8 = 0; l_pos_8 < l_hist_total_16; l_pos_8++) {
      if (OrderSelect(l_pos_8, SELECT_BY_POS, MODE_HISTORY)) {
         if (OrderCommission() != 0.0) {
            if (gd_1224 > 0.0) gd_1636 = gd_1224;
            else gd_1636 = MathAbs(OrderCommission() / OrderLots());
            funct_051(8, "funct_060()", "Îáíàðóæåíà êîìèññèÿ ñî ñäåëîê Commission=" + DoubleToStr(gd_1636, 2), "Commission detected Commission=" + DoubleToStr(gd_1636, 2));
            break;
         }
      }
   }
   return (1);
}

int funct_061() {
   g_var_name_2068 = AccountNumber() + "StopDay" + gs_1964 + g_magic_1356;
   g_var_name_2076 = AccountNumber() + "MailReportLB";
   g_var_name_2084 = AccountNumber() + "MailReportLD";
   g_var_name_2052 = "MaxBalance";
   g_var_name_2060 = "LB";
   g_var_name_2092 = AccountNumber() + "KR";
   if (IsTesting() || IsOptimization()) {
      g_var_name_2068 = "Test" + g_var_name_2068;
      g_var_name_2076 = "Test" + g_var_name_2076;
      g_var_name_2084 = "Test" + g_var_name_2084;
      g_var_name_2052 = "Test" + g_var_name_2052;
      g_var_name_2060 = "Test" + g_var_name_2060;
   } else {
      g_var_name_2052 = AccountNumber() + g_var_name_2052;
      g_var_name_2060 = AccountNumber() + g_var_name_2060;
   }
   return (0);
}

double funct_062(string as_0) {
   int l_count_16;
   string l_symbol_36;
   string ls_44;
   string ls_52;
   string ls_unused_60;
   string l_symbol_68;
   string ls_76;
   string ls_84;
   string ls_92;
   double ld_ret_8 = 0.0;
   string ls_20 = StringSubstr(gs_1964, 0, 3);
   string ls_28 = StringSubstr(gs_1964, 3, 0);
   double ld_100 = 1.0;
   double ld_108 = 1.0;
   double ld_unused_116 = 1.0;
   if (as_0 != "LotDepo") {
      l_count_16 = 0;
      ld_100 = 0.0;
      while (l_count_16 < 20) {
         if (ls_28 != "USD") {
            ls_44 = "USD" + ls_28;
            ls_52 = ls_28 + "USD";
            l_symbol_36 = gs_2100 + ls_44 + gs_2108;
            ls_92 = ls_44;
            ld_100 = MarketInfo(l_symbol_36, MODE_BID);
            if (ld_100 > 0.0) ld_100 = 1 / ld_100;
            else {
               l_symbol_36 = gs_2100 + ls_52 + gs_2108;
               ls_92 = ls_52;
               ld_100 = MarketInfo(l_symbol_36, MODE_BID);
            }
         } else {
            l_symbol_36 = gs_2100 + ls_20 + "USD" + gs_2108;
            ls_92 = ls_20 + "USD";
            ld_100 = MarketInfo(l_symbol_36, MODE_BID);
         }
         if (ld_100 > 0.0) break;
         l_count_16++;
         Sleep(1000);
      }
      ld_100 = funct_063(ls_44, ls_52, ls_92, ld_100);
      if (ld_100 <= 0.0) funct_051(8, "funct_062()", "Íåâîçìîæíî èíèöèàëèçèðîâàòü ïàðó: " + ls_44 + "/" + ls_52, "Unable to init pair: " + ls_44 + "/" + ls_52);
      if (AccountCurrency() != "USD") {
         l_count_16 = 0;
         ld_108 = 0.0;
         while (l_count_16 < 20) {
            ls_76 = "USD" + AccountCurrency();
            ls_84 = AccountCurrency() + "USD";
            l_symbol_68 = gs_2100 + ls_76 + gs_2108;
            ls_92 = ls_76;
            ld_108 = MarketInfo(l_symbol_68, MODE_BID);
            if (ld_108 <= 0.0) {
               l_symbol_68 = gs_2100 + ls_84 + gs_2108;
               ls_92 = ls_84;
               ld_108 = MarketInfo(l_symbol_68, MODE_BID);
               if (ld_108 > 0.0) ld_108 = 1 / ld_108;
            }
            if (ld_108 > 0.0) break;
            l_count_16++;
            Sleep(1000);
         }
         ld_108 = funct_063(ls_76, ls_84, ls_92, ld_108);
         if (ld_108 <= 0.0) funct_051(8, "funct_062()", "Íåâîçìîæíî èíèöèàëèçèðîâàòü ïàðó: " + ls_76 + "/" + ls_84, "Unable to init pair: " + ls_76 + "/" + ls_84);
      }
   } else {
      if (ls_20 != "USD") {
         l_count_16 = 0;
         ld_100 = 0.0;
         while (l_count_16 < 20) {
            ls_44 = "USD" + ls_20;
            ls_52 = ls_20 + "USD";
            l_symbol_36 = gs_2100 + ls_44 + gs_2108;
            ls_92 = ls_44;
            ld_100 = MarketInfo(l_symbol_36, MODE_BID);
            if (ld_100 > 0.0) ld_100 = 1 / ld_100;
            else {
               l_symbol_36 = gs_2100 + ls_52 + gs_2108;
               ls_92 = ls_52;
               ld_100 = MarketInfo(l_symbol_36, MODE_BID);
            }
            if (ld_100 > 0.0) break;
            l_count_16++;
            Sleep(1000);
         }
         ld_100 = funct_063(ls_44, ls_52, ls_92, ld_100);
         if (ld_100 <= 0.0) funct_051(8, "funct_062()", "Íåâîçìîæíî èíèöèàëèçèðîâàòü ïàðó: " + ls_44 + "/" + ls_52, "Unable to init pair: " + ls_44 + "/" + ls_52);
      }
      if (AccountCurrency() != "USD") {
         l_count_16 = 0;
         ld_108 = 0.0;
         while (l_count_16 < 20) {
            ls_76 = "USD" + AccountCurrency();
            ls_84 = AccountCurrency() + "USD";
            l_symbol_68 = gs_2100 + ls_76 + gs_2108;
            ls_92 = ls_76;
            ld_108 = MarketInfo(l_symbol_68, MODE_BID);
            if (ld_108 <= 0.0) {
               l_symbol_68 = gs_2100 + ls_84 + gs_2108;
               ls_92 = ls_84;
               ld_108 = MarketInfo(l_symbol_68, MODE_BID);
               if (ld_108 > 0.0) ld_108 = 1 / ld_108;
            }
            if (ld_108 > 0.0) break;
            l_count_16++;
            Sleep(1000);
         }
         ld_108 = funct_063(ls_76, ls_84, ls_92, ld_108);
         if (ld_108 <= 0.0) funct_051(8, "funct_062()", "Íåâîçìîæíî èíèöèàëèçèðîâàòü ïàðó: " + ls_76 + "/" + ls_84, "Unable to init pair: " + ls_76 + "/" + ls_84);
      }
   }
   if (as_0 == "Symbol") ld_ret_8 = MarketInfo(Symbol(), MODE_LOTSIZE) * g_point_2156 * ld_100 * ld_108;
   if (as_0 == "LotDepo") ld_ret_8 = 1.0;
   if (as_0 == "DepoUSD") ld_ret_8 = ld_108;
   if (ld_ret_8 <= 0.0) {
      funct_051(8, "funct_062()", "Íåâîçìîæíî îïðåäåëèòü öåíó ïóíêòà ïî äàííîé âàëþòíîé ïàðå", "Unable to calculate the point price");
      funct_051(9, "funct_062()", "Îøèáêà: PriceUSD=" + ld_100 + " PriceDepo=" + ld_108 + " (Mode=" + as_0 + " result=" + ld_ret_8 + ")", "Error: PriceUSD=" + ld_100 + " PriceDepo=" +
         ld_108 + " (Mode=" + as_0 + " result=" + ld_ret_8 + ")");
      gi_1872 = TRUE;
   }
   return (ld_ret_8);
}

double funct_063(string as_0, string as_8, string as_16, double ad_24) {
   double ld_ret_32 = ad_24;
   if (!IsOptimization() && !IsTesting()) {
      if (ad_24 > 0.0) GlobalVariableSet("z" + as_16, ad_24);
   } else {
      if (ad_24 <= 0.0) {
         if (GlobalVariableGet("z" + as_0) > 0.0) ld_ret_32 = GlobalVariableGet("z" + as_0);
         if (GlobalVariableGet("z" + as_8) > 0.0) ld_ret_32 = GlobalVariableGet("z" + as_8);
      }
   }
   return (ld_ret_32);
}

int funct_064(int ai_0) {
   bool li_ret_4 = FALSE;
   if (MarketInfoMode) return (li_ret_4);
   gi_1864 = FALSE;
   if (!gi_1848 && ai_0 == g_str2int_944 || ai_0 == g_str2int_948) {
      gi_1864 = TRUE;
      if (gi_1392 != gi_240 && gi_240 != 0) {
         gi_1392 = gi_240;
         funct_002(gi_240, 1);
         funct_050();
      }
   } else {
      if (gi_1392 != SettingsNumber) {
         gi_1392 = SettingsNumber;
         funct_002(SettingsNumber, 1);
         funct_050();
      }
   }
   if (UseBalanceControl) {
      if (gi_1792) {
         if (gi_1388 != gi_900) {
            gi_1388 = gi_900;
            funct_001(gi_900);
            funct_049();
            gi_1452--;
            funct_051(8, "funct_064()", "Óñòàíîâëåíî òîðãîâîå âðåìÿ ñ ìèí. ðèñêàìè", "Low risk trade time");
         }
      } else {
         if (gi_1388 != gi_896) {
            gi_1388 = gi_896;
            funct_001(gi_896);
            funct_049();
            gi_1452--;
            funct_051(8, "funct_064()", "Óñòàíîâëåíî òîðãîâîå âðåìÿ ñ ìàêñ. ðèñêàìè", "High risk trade time");
         }
      }
   }
   return (li_ret_4);
}

int funct_065() {
   bool li_ret_0 = FALSE;
   if (gi_1404 != g_str2int_1532) li_ret_0 = TRUE;
   if (gi_1408 != g_str2int_1536) li_ret_0 = TRUE;
   if (gi_1412 != g_str2int_1540) li_ret_0 = TRUE;
   return (li_ret_0);
}

int funct_066(int ai_0) {
   int li_ret_4 = 0;
   double ld_8 = MarketInfo(Symbol(), MODE_MARGINREQUIRED);
   if (CrossOverMode) ld_8 = funct_038(gs_2184) * MarketInfo(g_symbol_2168, MODE_MARGINREQUIRED) + funct_038(gs_2192) * MarketInfo(g_symbol_2176, MODE_MARGINREQUIRED);
   li_ret_4 = AccountStopoutLevel() * ld_8 / 100.0 + ai_0 * funct_062("Symbol");
   if (li_ret_4 < ld_8) li_ret_4 = ld_8;
   if (li_ret_4 > 0) li_ret_4 = MathFloor(MarketInfo(Symbol(), MODE_LOTSIZE) * funct_062("LotDepo") / li_ret_4);
   return (li_ret_4);
}

int funct_067() {
   int li_4;
   funct_002(SettingsNumber, 0);
   int li_ret_0 = funct_066(gi_272);
   if (UseBalanceControl && gi_240 != SettingsNumber) {
      funct_002(gi_240, 0);
      li_4 = funct_066(gi_272);
      if (li_ret_0 > li_4) li_ret_0 = li_4;
   }
   if (li_ret_0 == 0) {
      funct_051(8, "funct_067()", "Íåâîçìîæíî ïîñ÷èòàòü ìàêñèìàëüíî-âîçìîæíîå çíà÷åíèå ëîòà MaxLotsPercent", "Unable to calculate the MaxLotsPercent");
      return (li_ret_0);
   }
   gd_1588 = li_ret_0;
   if (MaxLotsPercent == 0) {
      MaxLotsPercent = li_ret_0;
      funct_051(8, "funct_067()", "Óñòàíîâëåíî çíà÷åíèå ïåðåìåííîé MaxLotsPercent=" + MaxLotsPercent, "New value of MaxLotsPercent=" + MaxLotsPercent);
      if (LotsPercent > li_ret_0) {
         LotsPercent = li_ret_0;
         funct_051(8, "funct_067()", "Èçìåíåíî çíà÷åíèå ïåðåìåííîé LotsPercent=" + LotsPercent, "Changed value of LotsPercent=" + LotsPercent);
      }
   } else {
      funct_051(8, "funct_067()", "Ìàêñèìàëüíûé ëîò äëÿ ïðàâèëüíîé ðàáîòû ñîâåòíèêà â äàííîì ðåæèìå äîëæåí áûòü íå áîëåå " + li_ret_0 + " % îò äåïîçèòà", "Maximal lot value to work in this mode must be not more then " +
         li_ret_0 + " % from depo");
   }
   LotsPercent = 100000 * LotsPercent / MarketInfo(Symbol(), MODE_LOTSIZE);
   MaxLotsPercent = 100000 * MaxLotsPercent / MarketInfo(Symbol(), MODE_LOTSIZE);
   gd_1588 = 100000.0 * gd_1588 / MarketInfo(Symbol(), MODE_LOTSIZE);
   if (gd_1588 <= 0.0) gd_1588 = MaxLotsPercent;
   return (li_ret_0);
}

int funct_068() {
   int li_4;
   bool li_ret_0 = FALSE;
   string lsa_16[28] = {"EUR", "USD", "CHF", "GBP", "CAD", "JPY", "AUD", "NZD", "NOK", "RUB", "RUR", "SEK", "SGD", "DKK", "ZAR", "UAH", "MXN", "HKD", "TRY", "PLN", "HUF", "PHP", "MTL", "HRK", "LVL", "CZK", "ILS", "LTL"};
   for (int li_12 = 0; li_12 < StringLen(Symbol()) - 3; li_12++) {
      for (int l_index_8 = 0; l_index_8 < 28; l_index_8++) {
         li_4 = StringFind(Symbol(), lsa_16[l_index_8], li_12);
         if (li_4 == li_12) {
            gs_1964 = StringSubstr(Symbol(), li_4, 6);
            if (StringFind(Symbol(), gs_1964, 0) != 0) gs_2100 = StringSubstr(Symbol(), 0, StringFind(Symbol(), gs_1964, 0));
            if (StringLen(Symbol()) == StringLen(gs_2100) + StringLen(gs_1964)) break;
            gs_2108 = StringSubstr(Symbol(), StringLen(gs_2100) + StringLen(gs_1964), 0);
            break;
         }
      }
      if (gs_1964 != "") break;
   }
   if (gs_1964 == "") {
      funct_051(8, "GetSymbol()", "Òîðãîâëÿ çàáëîêèðîâàíà: íåèçâåñòíàÿ âàëþòíàÿ ïàðà " + Symbol(), "Trade is disabled: Unknown symbol " + Symbol());
      gi_1872 = TRUE;
      return (li_ret_0);
   }
   li_ret_0 = TRUE;
   if (gs_2100 != "" || gs_2108 != "") funct_051(8, "GetSymbol()", "Îáíàðóæåíû äîáàâî÷íûå ñèìâîëû ê íàçâàíèþ âàëþòíîé ïàðû " + Symbol(), "Found additive to the Symbol name " + Symbol());
   return (li_ret_0);
}

int funct_069(int ai_0) {
   int li_32;
   int li_36;
   double l_str2int_20 = 0.0;
   int li_28 = 0;
   ArrayCopy(gsa_1988, gsa_1992, 0, 0, WHOLE_ARRAY);
   for (int li_12 = 0; li_12 < StringLen(gs_2044); li_12++) li_28 += StrToInteger(StringSubstr(gs_2044, li_12, 1));
   for (int l_count_8 = 0; l_count_8 <= ai_0; l_count_8++) {
      for (int l_index_4 = 0; l_index_4 < 170; l_index_4++) {
         li_32 = l_index_4;
         li_36 = l_count_8;
         if (l_index_4 / 2 - MathFloor(l_index_4 / 2) > 0.0) li_32 += l_index_4;
         if (l_count_8 / 2 - MathFloor(l_count_8 / 2) > 0.0) li_36 += l_count_8;
         gsa_1988[l_index_4][l_count_8] = StrToInteger(gsa_1988[l_index_4][l_count_8]) - li_32 - li_36;
      }
   }
   for (li_12 = 0; li_12 < StringLen(gs_2044); li_12++) {
      l_str2int_20 = StrToInteger(StringSubstr(gs_2044, li_12, 1));
      if (l_str2int_20 != 0.0) {
         if (l_str2int_20 / 2.0 != MathFloor(l_str2int_20 / 2.0)) {
            if (l_str2int_20 < 4.0) {
               for (int l_count_16 = 0; l_count_16 < li_28; l_count_16++) {
                  ArrayCopy(gsa_1992, gsa_1988, 0, 0, WHOLE_ARRAY);
                  for (l_index_4 = 168; l_index_4 >= 0; l_index_4--) for (l_count_8 = 0; l_count_8 <= ai_0; l_count_8++) gsa_1988[l_index_4 + 1][l_count_8] = gsa_1988[l_index_4][l_count_8];
                  for (l_count_8 = 0; l_count_8 <= ai_0; l_count_8++) gsa_1988[0][l_count_8] = gsa_1992[169][l_count_8];
               }
            } else {
               for (l_count_16 = 0; l_count_16 < li_28; l_count_16++) {
                  ArrayCopy(gsa_1992, gsa_1988, 0, 0, WHOLE_ARRAY);
                  for (l_index_4 = 1; l_index_4 < 170; l_index_4++) for (l_count_8 = 0; l_count_8 <= ai_0; l_count_8++) gsa_1988[l_index_4 - 1][l_count_8] = gsa_1988[l_index_4][l_count_8];
                  for (l_count_8 = 0; l_count_8 <= ai_0; l_count_8++) gsa_1988[169][l_count_8] = gsa_1992[0][l_count_8];
               }
            }
         } else {
            if (l_str2int_20 > 5.0) {
               for (l_count_16 = 0; l_count_16 < li_28; l_count_16++) {
                  ArrayCopy(gsa_1992, gsa_1988, 0, 0, WHOLE_ARRAY);
                  for (l_count_8 = ai_0 - 1; l_count_8 >= 0; l_count_8--) for (l_index_4 = 0; l_index_4 < 170; l_index_4++) gsa_1988[l_index_4][l_count_8 + 1] = gsa_1988[l_index_4][l_count_8];
                  for (l_index_4 = 0; l_index_4 <= 170; l_index_4++) gsa_1988[l_index_4][0] = gsa_1992[l_index_4][ai_0];
               }
            } else {
               for (l_count_16 = 0; l_count_16 < li_28; l_count_16++) {
                  ArrayCopy(gsa_1992, gsa_1988, 0, 0, WHOLE_ARRAY);
                  for (l_count_8 = 1; l_count_8 <= ai_0; l_count_8++) for (l_index_4 = 0; l_index_4 < 170; l_index_4++) gsa_1988[l_index_4][l_count_8 - 1] = gsa_1988[l_index_4][l_count_8];
                  for (l_index_4 = 0; l_index_4 <= 170; l_index_4++) gsa_1988[l_index_4][ai_0] = gsa_1992[l_index_4][0];
               }
            }
         }
      }
   }
   ArrayCopy(gsa_1992, gsa_1988, 0, 0, WHOLE_ARRAY);
   if (StrToInteger(gsa_1992[0][0]) > 0) ai_0 = 0;
   return (ai_0);
}

int funct_070() {
   string ls_unused_16;
   bool li_ret_0 = FALSE;
   int l_file_12 = -1;
   if (GlobalVariableGet(g_var_name_2092) > 0.0) {
      funct_051(8, "funct_048()", "Îæèäàíèå êëþ÷åâîãî ôàéëà", "Waiting for the key file");
      while (GlobalVariableGet(g_var_name_2092) > 0.0) {
         l_file_12 = FileOpen(g_name_2028, FILE_CSV|FILE_READ, ';');
         if (l_file_12 >= 0) {
            FileClose(l_file_12);
            break;
         }
         Sleep(500);
      }
   } else {
      GlobalVariableSet(g_var_name_2092, 1.0);
      l_file_12 = FileOpen(g_name_2028, FILE_CSV|FILE_READ, ';');
      if (l_file_12 >= 0) FileClose(l_file_12);
      if (l_file_12 < 0 && !IsTesting() && !IsOptimization()) funct_047();
   }
   GlobalVariableSet(g_var_name_2092, 0.0);
   l_file_12 = FileOpen(g_name_2028, FILE_CSV|FILE_READ, ';');
   if (l_file_12 < 1) {
      funct_051(8, "funct_048()", "Êëþ÷åâîé ôàéë íå çàãðóæåí, îøèáêà: " + funct_052(GetLastError()), "Can not load the key file, error: " + funct_052(GetLastError()));
      return (0);
   }
   funct_051(8, "funct_048()", "Çàãðóæåí êëþ÷åâîé ôàéë (" + g_name_2028 + ")", "Loaded the key file (" + g_name_2028 + ")");
   int li_8 = -1;
   while (!FileIsLineEnding(l_file_12)) {
      li_8++;
      gsa_1988[0][li_8] = FileReadString(l_file_12);
   }
   li_ret_0 = li_8;
   int li_4 = 1;
   li_8 = -1;
   while (!FileIsEnding(l_file_12)) {
      li_8++;
      gsa_1988[li_4][li_8] = FileReadString(l_file_12);
      if (li_8 == li_ret_0) {
         li_8 = -1;
         li_4++;
      }
   }
   FileClose(l_file_12);
   ArrayCopy(gsa_1992, gsa_1988, 0, 0, WHOLE_ARRAY);
   return (li_ret_0);
}

bool funct_071() {
   bool li_ret_0 = TRUE;
   if (g_time_2428 == 0) g_time_2428 = Time[0];
   if (g_time_2428 == Time[0]) li_ret_0 = FALSE;
   return (li_ret_0);
}

int funct_072() {
   gi_1260 = 0;
   gi_1264 = 0;
   gi_unused_1268 = 0;
   gi_1272 = FALSE;
   gi_unused_1276 = 0;
   gi_unused_1280 = 0;
   gi_unused_1284 = 0;
   gi_1288 = 0;
   gi_1292 = 0;
   gi_1296 = 0;
   gi_unused_1300 = 0;
   gi_unused_1304 = 0;
   gi_unused_1308 = -1;
   gi_unused_1312 = -1;
   gi_unused_1316 = 25;
   gi_unused_1320 = 0;
   gi_unused_1332 = 0;
   gi_unused_1336 = 0;
   gi_unused_1340 = 0;
   gi_unused_1344 = 0;
   gi_unused_1348 = 0;
   gi_unused_1352 = 0;
   g_magic_1356 = 0;
   gi_1404 = 0;
   gi_1408 = 0;
   gi_1412 = 0;
   gi_1416 = 0;
   gi_unused_1360 = 0;
   gi_unused_1364 = 0;
   gi_unused_1368 = 0;
   gi_2496 = 0;
   g_minute_1372 = 0;
   gi_1380 = 0;
   gi_1388 = -1;
   gi_1392 = FALSE;
   gi_1396 = 0;
   gi_1400 = 0;
   gi_unused_1420 = 0;
   gi_unused_1424 = 0;
   gi_unused_1428 = 10;
   gi_unused_1432 = 0;
   g_day_of_week_1436 = -1;
   g_day_of_week_1440 = -1;
   gi_unused_1444 = 25;
   gi_unused_1448 = -1;
   gi_1452 = -1;
   g_time_1456 = -1;
   gi_1460 = 0;
   g_hour_1464 = 0;
   g_day_of_week_1468 = 0;
   gi_1472 = 0;
   g_month_1476 = 0;
   g_year_1480 = 0;
   g_count_1484 = 0;
   gi_1488 = 999;
   gi_1492 = 0;
   g_count_1496 = 0;
   gi_1504 = FALSE;
   gi_1508 = FALSE;
   gi_1512 = 0;
   gi_1516 = 0;
   g_bars_1520 = FALSE;
   g_str2int_1532 = 0;
   g_str2int_1536 = 0;
   g_str2int_1540 = 0;
   g_bars_2492 = FALSE;
   gd_1556 = 0.0;
   gd_unused_1564 = 0.0;
   gd_1572 = 0.0;
   gd_1580 = 0.0;
   gd_1588 = 0.0;
   gd_1596 = 0.0;
   gd_1604 = 0.0;
   gd_unused_1612 = 0.0;
   gd_unused_1620 = 0.0;
   gd_unused_1628 = 0.0;
   gd_unused_1644 = 0.0;
   gd_1652 = 0.0;
   gd_unused_1660 = 0.0;
   gd_unused_1668 = 0.0;
   gd_unused_1676 = Bid;
   gd_unused_1684 = Ask;
   g_global_var_2504 = 0.0;
   gd_1636 = 0.0;
   gd_1704 = 0.0;
   gd_1712 = 0.0;
   gi_unused_1720 = 0;
   gi_unused_1728 = 0;
   gi_unused_1732 = 0;
   gi_unused_1736 = 0;
   gi_1740 = FALSE;
   gi_1744 = FALSE;
   gi_unused_1748 = 0;
   gi_unused_1756 = 1;
   gi_1760 = FALSE;
   gi_1764 = FALSE;
   gi_unused_1768 = 0;
   gi_1772 = FALSE;
   gi_1776 = FALSE;
   gi_unused_1780 = 0;
   gi_unused_1784 = 0;
   gi_unused_1788 = 0;
   gi_1792 = FALSE;
   g_str2int_344 = FALSE;
   gi_unused_1796 = 0;
   gi_1800 = TRUE;
   gi_unused_1804 = 1;
   gi_1808 = TRUE;
   gi_unused_1812 = 0;
   gi_unused_1816 = 0;
   gi_1820 = FALSE;
   gi_1824 = FALSE;
   gi_1828 = FALSE;
   gi_1836 = FALSE;
   gi_1840 = FALSE;
   gi_1844 = FALSE;
   gi_1848 = FALSE;
   g_bool_1852 = FALSE;
   gi_1856 = FALSE;
   gi_1860 = FALSE;
   gi_1864 = FALSE;
   gi_unused_1868 = 0;
   gi_1872 = FALSE;
   gi_1876 = FALSE;
   gi_2452 = FALSE;
   gi_2456 = FALSE;
   gi_unused_2460 = 0;
   gi_1884 = 0;
   gi_unused_1888 = 0;
   gi_unused_1892 = 0;
   gi_1896 = 0;
   gi_1900 = 0;
   gi_1904 = 0;
   gi_1908 = 0;
   gi_1912 = 0;
   gs_1916 = "";
   gs_1924 = "";
   gs_unused_1932 = "";
   gs_unused_1940 = "";
   gs_1948 = "";
   gs_1956 = "";
   gs_1964 = "";
   gs_1972 = "";
   gs_2004 = "";
   gs_2012 = "";
   gs_2020 = "";
   g_name_2028 = "";
   gs_2036 = "";
   gs_2044 = "";
   g_var_name_2052 = "";
   g_var_name_2060 = "";
   g_var_name_2068 = "";
   g_var_name_2076 = "";
   g_var_name_2084 = "";
   gs_2100 = "";
   gs_2108 = "";
   gs_2116 = "";
   gs_2124 = "";
   g_spread_2316 = 1000000.0;
   g_spread_2324 = 0.0;
   gd_2332 = 0.0;
   gd_2340 = 1000000.0;
   gd_2348 = 0.0;
   gd_2356 = 0.0;
   g_count_2368 = 0;
   for (int l_index_0 = 0; l_index_0 < 7; l_index_0++) gia_2512[l_index_0] = 0;
   return (1);
}

int funct_073(int ai_0, int ai_4, int ai_8) {
   bool li_ret_12 = FALSE;
   if (gia_2384[ai_0][0] == 0) {
      if (funct_080(ai_0)) {
         funct_075(ai_0);
         gia_2384[ai_0][0] = 96;
         gi_1508 = gia_2384[ai_0][1];
      } else {
         funct_033("OSbuffer", ai_0);
         if (funct_008(0) || (!gi_256 && ai_0 > 1) && ai_8) {
            funct_051(9, "funct_073()", gs_2480, gs_2480);
            gia_2384[ai_0][0] = 95;
            gia_2384[ai_0][1] = 0;
            gda_2380[ai_0][6] = gd_2140;
            gia_2388[ai_0][4] = TimeCurrent();
         } else {
            if (funct_008(1) || (!gi_256 && ai_0 > 1) && ai_4) {
               funct_051(9, "funct_073()", gs_2480, gs_2480);
               gia_2384[ai_0][0] = 95;
               gia_2384[ai_0][1] = 1;
               gda_2380[ai_0][6] = gd_2148;
               gia_2388[ai_0][4] = TimeCurrent();
            }
         }
      }
   }
   if (gia_2384[ai_0][0] == 95) {
      if (funct_080(ai_0)) {
         funct_075(ai_0);
         gia_2384[ai_0][0] = 96;
      } else {
         if (funct_013(ai_0, gia_2384[ai_0][1], gi_272, gi_276)) {
            gi_1508 = gia_2384[ai_0][1];
            gia_2384[ai_0][0] = 96;
            funct_016(ai_0, 95);
         }
      }
   }
   if (gia_2384[ai_0][0] == 96) {
      if (!funct_080(ai_0)) gia_2384[ai_0][0] = 94;
      else {
         funct_075(ai_0);
         funct_040(0);
         if (gia_2384[ai_0][1] == 0) {
            if (funct_005(ai_0)) {
               gda_2380[ai_0][5] = gd_2148;
               gia_2388[ai_0][5] = TimeCurrent();
               gia_2384[ai_0][0] = 98;
            }
         }
         if (gia_2384[ai_0][1] == 1) {
            if (funct_005(ai_0)) {
               gda_2380[ai_0][5] = gd_2140;
               gia_2388[ai_0][5] = TimeCurrent();
               gia_2384[ai_0][0] = 98;
            }
         }
      }
   }
   if (gia_2384[ai_0][0] == 98 || gia_2384[ai_0][0] == 94) {
      if (funct_080(ai_0)) {
         funct_075(ai_0);
         gia_2384[ai_0][0] = 98;
         if (!funct_012(ai_0, gia_2384[ai_0][1])) gia_2384[ai_0][0] = 94;
      } else {
         if (funct_015(ai_0) > 0) {
            gia_2384[ai_0][0] = 0;
            gi_1508 = FALSE;
         }
      }
   }
   return (li_ret_12);
}

void funct_074(int ai_0, string &a_name_4, bool ai_12 = FALSE) {
   int lia_24[256];
   int lia_28[1];
   string ls_40;
   bool li_56;
   int l_file_60;
   string ls_32 = "";
   string ls_unused_48 = "";
   while (InternetReadFile(ai_0, lia_24, 1024, lia_28) == 1) {
      ls_40 = "";
      if (lia_28[0] == 0) break;
      for (int l_index_16 = 0; l_index_16 < 256; l_index_16++) {
         li_56 = FALSE;
         for (int l_count_20 = 0; l_count_20 < 4; l_count_20++) {
            ls_40 = ls_40 + CharToStr(lia_24[l_index_16] >> l_count_20 << 3 & 255);
            if (StringLen(ls_40) == lia_28[0]) {
               li_56 = TRUE;
               break;
            }
         }
         if (li_56) break;
      }
      ls_32 = ls_32 + ls_40;
      Sleep(1);
   }
   if (StringLen(ls_32) < 1000) {
      funct_051(8, "funct_101()", "Îøèáêà çàïðîñà êëþ÷à: " + ls_32, "Error HTTP-request: " + ls_32);
      return;
   }
   if (ai_12) {
      ls_32 = funct_104(ls_32, "<b", CharToStr(13));
      ls_32 = funct_104(ls_32, "r>", CharToStr(10));
      l_file_60 = FileOpen(a_name_4, FILE_BIN|FILE_WRITE);
      if (l_file_60 >= 0) {
         FileWriteString(l_file_60, ls_32, StringLen(ls_32));
         FileClose(l_file_60);
      }
   } else a_name_4 = ls_32;
   a_name_4 = ls_32;
}

int funct_075(int ai_0) {
   int l_bool_12;
   int li_16;
   string l_ticket_24;
   string ls_unused_32;
   string ls_unused_40;
   string l_ticket_48;
   string ls_unused_56;
   string ls_unused_64;
   double l_ord_open_price_72;
   double l_ord_profit_80;
   double l_ord_open_price_88;
   double l_ord_profit_96;
   double l_ord_lots_104;
   double l_ord_lots_112;
   int l_cmd_120;
   int l_cmd_128;
   int l_datetime_136;
   int l_datetime_140;
   bool li_144;
   bool li_148;
   bool li_ret_4 = FALSE;
   if (!CrossOverMode) {
      li_16 = OrdersTotal() - 1;
      for (int l_pos_8 = li_16; l_pos_8 >= 0; l_pos_8--) {
         l_bool_12 = OrderSelect(l_pos_8, SELECT_BY_POS, MODE_TRADES);
         if (l_bool_12 > FALSE && OrderMagicNumber() == g_magic_1356) {
            if (OrderSymbol() == Symbol() && StringFind(OrderComment(), gsa_2392[ai_0][4]) >= 0) {
               gda_2380[ai_0][0] = OrderClosePrice();
               gda_2380[ai_0][1] = OrderOpenPrice();
               gda_2380[ai_0][2] = OrderStopLoss();
               gda_2380[ai_0][3] = OrderTakeProfit();
               gda_2380[ai_0][4] = OrderProfit();
               gia_2388[ai_0][0] = OrderCloseTime();
               gia_2388[ai_0][1] = OrderOpenTime();
               gia_2384[ai_0][1] = OrderType();
               gia_2384[ai_0][2] = OrderMagicNumber();
               gsa_2392[ai_0][0] = OrderTicket();
               gsa_2392[ai_0][1] = OrderSymbol();
               gsa_2392[ai_0][2] = gs_1964;
               gda_2380[ai_0][7] = OrderLots();
               if (gda_2380[ai_0][0] > 0.0) {
                  if (gia_2384[ai_0][1] == 1) gia_2384[ai_0][10] = MathRound((gda_2380[ai_0][1] - gd_2140) / g_point_2156);
                  if (gia_2384[ai_0][1] == 0) gia_2384[ai_0][10] = MathRound((gd_2148 - gda_2380[ai_0][1]) / g_point_2156);
               } else {
                  if (gia_2384[ai_0][1] == 1) gia_2384[ai_0][10] = MathRound((gda_2380[ai_0][1] - gda_2380[ai_0][0]) / g_point_2156);
                  if (gia_2384[ai_0][1] == 0) gia_2384[ai_0][10] = MathRound((gda_2380[ai_0][0] - gda_2380[ai_0][1]) / g_point_2156);
                  gia_2384[ai_0][3] = TimeCurrent() - gia_2388[ai_0][1];
               }
               li_ret_4 = TRUE;
            }
         }
      }
   } else {
      li_144 = FALSE;
      li_148 = FALSE;
      li_16 = OrdersTotal() - 1;
      for (l_pos_8 = li_16; l_pos_8 >= 0; l_pos_8--) {
         l_bool_12 = OrderSelect(l_pos_8, SELECT_BY_POS, MODE_TRADES);
         if (l_bool_12 > FALSE && OrderMagicNumber() == g_magic_1356 && OrderSymbol() == g_symbol_2168 && StringFind(OrderComment(), gsa_2392[ai_0][4]) >= 0) {
            l_ticket_24 = OrderTicket();
            ls_unused_32 = g_symbol_2168;
            ls_unused_40 = gs_2184;
            l_ord_open_price_72 = OrderOpenPrice();
            l_ord_lots_112 = OrderLots();
            l_ord_profit_80 = OrderProfit();
            l_cmd_120 = OrderType();
            l_datetime_136 = OrderOpenTime();
            li_144 = TRUE;
         }
      }
      for (l_pos_8 = li_16; l_pos_8 >= 0; l_pos_8--) {
         l_bool_12 = OrderSelect(l_pos_8, SELECT_BY_POS, MODE_TRADES);
         if (l_bool_12 > FALSE && OrderMagicNumber() == g_magic_1356 && OrderSymbol() == g_symbol_2176 && StringFind(OrderComment(), gsa_2392[ai_0][4]) >= 0) {
            l_ticket_48 = OrderTicket();
            ls_unused_56 = g_symbol_2176;
            ls_unused_64 = gs_2192;
            l_ord_open_price_88 = OrderOpenPrice();
            l_ord_lots_104 = OrderLots();
            l_ord_profit_96 = OrderProfit();
            l_cmd_128 = OrderType();
            l_datetime_140 = OrderOpenTime();
            li_148 = TRUE;
         }
      }
      if (li_144 && li_148) {
         gda_2380[ai_0][1] = funct_076(l_ord_open_price_72, l_ord_open_price_88);
         gda_2380[ai_0][2] = 0.0;
         gda_2380[ai_0][3] = 0.0;
         gda_2380[ai_0][4] = l_ord_profit_80 + l_ord_profit_96;
         gia_2388[ai_0][0] = 0;
         if (l_datetime_136 > l_datetime_140) gia_2388[ai_0][1] = l_datetime_136;
         else gia_2388[ai_0][1] = l_datetime_140;
         gia_2384[ai_0][1] = funct_077(l_cmd_120, l_cmd_128);
         gia_2384[ai_0][2] = OrderMagicNumber();
         gsa_2392[ai_0][0] = l_ticket_24 + "/" + l_ticket_48;
         gsa_2392[ai_0][1] = g_symbol_2168 + "/" + g_symbol_2176;
         gsa_2392[ai_0][2] = gs_2184 + "/" + gs_2192;
         gda_2380[ai_0][7] = l_ord_lots_112;
         gia_2384[ai_0][3] = TimeCurrent() - gia_2388[ai_0][1];
         if (gia_2384[ai_0][1] == 1) {
            gia_2384[ai_0][10] = MathRound((gda_2380[ai_0][1] - gd_2140) / g_point_2156);
            gia_2384[ai_0][4] = MathRound((gda_2380[ai_0][1] - gda_2380[ai_0][6]) / g_point_2156);
         }
         if (gia_2384[ai_0][1] == 0) {
            gia_2384[ai_0][10] = MathRound((gd_2148 - gda_2380[ai_0][1]) / g_point_2156);
            gia_2384[ai_0][4] = MathRound((gda_2380[ai_0][6] - gda_2380[ai_0][1]) / g_point_2156);
         }
         li_ret_4 = TRUE;
      }
   }
   return (li_ret_4);
}

double funct_076(double ad_0, double ad_8) {
   double ld_ret_16 = 0.0;
   if (gi_2200 == 1 && gi_2204 == -1) ld_ret_16 = ad_0 * ad_8;
   if (gi_2200 == 1 && gi_2204 == 1) ld_ret_16 = ad_0 / ad_8;
   if (gi_2200 == -1 && gi_2204 == -1) ld_ret_16 = ad_8 / ad_0;
   return (ld_ret_16);
}

int funct_077(int ai_0, int ai_4) {
   int li_ret_8 = -1;
   if (gi_2200 == 1 && gi_2204 == -1) {
      if (ai_0 == 0 && ai_4 == 0) li_ret_8 = 0;
      if (ai_0 == 1 && ai_4 == 1) li_ret_8 = 1;
   }
   if (gi_2200 == 1 && gi_2204 == 1) {
      if (ai_0 == 0 && ai_4 == 1) li_ret_8 = 0;
      if (ai_0 == 1 && ai_4 == 0) li_ret_8 = 1;
   }
   if (gi_2200 == -1 && gi_2204 == -1) {
      if (ai_0 == 1 && ai_4 == 0) li_ret_8 = 0;
      if (ai_0 == 0 && ai_4 == 1) li_ret_8 = 1;
   }
   return (li_ret_8);
}

int funct_078(string a_symbol_0, int ai_8) {
   int li_ret_12 = -1;
   if (gi_2200 == 1 && gi_2204 == -1) {
      if (ai_8 == 0 && a_symbol_0 == g_symbol_2168) li_ret_12 = 0;
      if (ai_8 == 0 && a_symbol_0 == g_symbol_2176) li_ret_12 = 0;
      if (ai_8 == 1 && a_symbol_0 == g_symbol_2168) li_ret_12 = 1;
      if (ai_8 == 1 && a_symbol_0 == g_symbol_2176) li_ret_12 = 1;
   }
   if (gi_2200 == 1 && gi_2204 == 1) {
      if (ai_8 == 0 && a_symbol_0 == g_symbol_2168) li_ret_12 = 0;
      if (ai_8 == 0 && a_symbol_0 == g_symbol_2176) li_ret_12 = 1;
      if (ai_8 == 1 && a_symbol_0 == g_symbol_2168) li_ret_12 = 1;
      if (ai_8 == 1 && a_symbol_0 == g_symbol_2176) li_ret_12 = 0;
   }
   if (gi_2200 == -1 && gi_2204 == -1) {
      if (ai_8 == 0 && a_symbol_0 == g_symbol_2168) li_ret_12 = 1;
      if (ai_8 == 0 && a_symbol_0 == g_symbol_2176) li_ret_12 = 0;
      if (ai_8 == 1 && a_symbol_0 == g_symbol_2168) li_ret_12 = 0;
      if (ai_8 == 1 && a_symbol_0 == g_symbol_2176) li_ret_12 = 1;
   }
   return (li_ret_12);
}

double funct_079(string a_symbol_0, int ai_8) {
   double l_price_12 = 0.0;
   if (gi_2200 == 1 && gi_2204 == -1) {
      if (ai_8 == 0 && a_symbol_0 == g_symbol_2168) l_price_12 = g_ask_2292;
      if (ai_8 == 0 && a_symbol_0 == g_symbol_2176) l_price_12 = g_ask_2308;
      if (ai_8 == 1 && a_symbol_0 == g_symbol_2168) l_price_12 = g_bid_2284;
      if (ai_8 == 1 && a_symbol_0 == g_symbol_2176) l_price_12 = g_bid_2300;
   }
   if (gi_2200 == 1 && gi_2204 == 1) {
      if (ai_8 == 0 && a_symbol_0 == g_symbol_2168) l_price_12 = g_ask_2292;
      if (ai_8 == 0 && a_symbol_0 == g_symbol_2176) l_price_12 = g_bid_2300;
      if (ai_8 == 1 && a_symbol_0 == g_symbol_2168) l_price_12 = g_bid_2284;
      if (ai_8 == 1 && a_symbol_0 == g_symbol_2176) l_price_12 = g_ask_2308;
   }
   if (gi_2200 == -1 && gi_2204 == -1) {
      if (ai_8 == 0 && a_symbol_0 == g_symbol_2168) l_price_12 = g_bid_2284;
      if (ai_8 == 0 && a_symbol_0 == g_symbol_2176) l_price_12 = g_ask_2308;
      if (ai_8 == 1 && a_symbol_0 == g_symbol_2168) l_price_12 = g_ask_2292;
      if (ai_8 == 1 && a_symbol_0 == g_symbol_2176) l_price_12 = g_bid_2300;
   }
   if (a_symbol_0 == g_symbol_2168) l_price_12 = NormalizeDouble(l_price_12, g_digits_2236);
   if (a_symbol_0 == g_symbol_2176) l_price_12 = NormalizeDouble(l_price_12, g_digits_2244);
   return (l_price_12);
}

bool funct_080(int ai_0) {
   int l_bool_12;
   int li_16;
   bool li_24;
   bool li_28;
   int l_ticket_32;
   int l_ticket_36;
   double l_price_40;
   bool li_ret_4 = FALSE;
   if (!CrossOverMode) {
      li_16 = OrdersTotal() - 1;
      for (int l_pos_8 = li_16; l_pos_8 >= 0; l_pos_8--) {
         l_bool_12 = OrderSelect(l_pos_8, SELECT_BY_POS, MODE_TRADES);
         if (l_bool_12 > FALSE && OrderMagicNumber() == g_magic_1356 && OrderSymbol() == Symbol() && StringFind(OrderComment(), gsa_2392[ai_0][4]) >= 0) {
            funct_086(ai_0, OrderType());
            li_ret_4 = TRUE;
            break;
         }
      }
   } else {
      li_24 = FALSE;
      li_28 = FALSE;
      l_ticket_32 = 0;
      l_ticket_36 = 0;
      li_16 = OrdersTotal() - 1;
      for (l_pos_8 = li_16; l_pos_8 >= 0; l_pos_8--) {
         if (OrderSelect(l_pos_8, SELECT_BY_POS, MODE_TRADES)) {
            if (OrderMagicNumber() == g_magic_1356 && OrderSymbol() == g_symbol_2176 && StringFind(OrderComment(), gsa_2392[ai_0][4]) >= 0) {
               l_ticket_36 = OrderTicket();
               li_28 = TRUE;
               break;
            }
         }
      }
      for (l_pos_8 = li_16; l_pos_8 >= 0; l_pos_8--) {
         if (OrderSelect(l_pos_8, SELECT_BY_POS, MODE_TRADES)) {
            if (OrderMagicNumber() == g_magic_1356 && OrderSymbol() == g_symbol_2168 && StringFind(OrderComment(), gsa_2392[ai_0][4]) >= 0) {
               l_ticket_32 = OrderTicket();
               li_24 = TRUE;
               break;
            }
         }
      }
      if (li_24 && li_28) li_ret_4 = TRUE;
      else {
         if (li_24 || li_28) {
            if (li_24) {
               OrderSelect(l_ticket_32, SELECT_BY_TICKET);
               if (OrderType() == OP_SELL) l_price_40 = g_ask_2292;
               else l_price_40 = g_bid_2284;
            }
            if (li_28) {
               OrderSelect(l_ticket_36, SELECT_BY_TICKET);
               if (OrderType() == OP_SELL) l_price_40 = g_ask_2308;
               else l_price_40 = g_bid_2300;
            }
            if (IsTradeAllowed()) {
               if (OrderClose(OrderTicket(), OrderLots(), l_price_40, g_slippage_336 / gi_1288 * gi_2208, Black)) {
                  if (BlockAfterLostOrder) {
                     funct_056(1);
                     funct_051(8, "funct_080()", "Òîðãîâëÿ çàáëîêèðîâàíà: Çàêðûò ïîòåðÿííûé îðäåð", "Trade is disabled: Closed lost order");
                  } else funct_051(8, "funct_080()", "Çàêðûò ïîòåðÿííûé îðäåð", "Closed lost order");
               } else funct_051(8, "funct_080()", "Íå óäàëîñü çàêðûòü ïîòåðÿííûé îðäåð", "Can not close lost order");
            }
         }
      }
      funct_090(ai_0, li_ret_4);
   }
   return (li_ret_4);
}

int funct_081() {
   double ld_4;
   double ld_12;
   bool li_ret_0 = FALSE;
   RefreshRates();
   gi_1548 = MathRound(MarketInfo(Symbol(), MODE_STOPLEVEL));
   gi_1552 = MathRound(MarketInfo(Symbol(), MODE_FREEZELEVEL));
   g_point_2156 = MarketInfo(Symbol(), MODE_POINT);
   gi_2164 = MarketInfo(Symbol(), MODE_DIGITS);
   if (gd_1712 > 0.0 && gd_1636 != 0.0) gd_1704 = gd_1636 / gd_1712;
   if (gi_180) {
      ld_4 = funct_082(gs_2184);
      ld_12 = funct_082(gs_2192);
      if (ld_4 > 0.0 && ld_12 > 0.0) {
         gd_2252 = MarketInfo(g_symbol_2168, MODE_SPREAD);
         gd_2260 = MarketInfo(g_symbol_2176, MODE_SPREAD);
         gd_2268 = gd_2252 * MarketInfo(g_symbol_2168, MODE_POINT);
         gd_2276 = gd_2260 * MarketInfo(g_symbol_2176, MODE_POINT);
         g_bid_2284 = MarketInfo(g_symbol_2168, MODE_BID);
         g_ask_2292 = MarketInfo(g_symbol_2168, MODE_ASK);
         g_bid_2300 = MarketInfo(g_symbol_2176, MODE_BID);
         g_ask_2308 = MarketInfo(g_symbol_2176, MODE_ASK);
         if (gi_2200 == 1 && gi_2204 == -1) {
            gd_2140 = g_ask_2292 * g_ask_2308;
            gd_2148 = g_bid_2284 * g_bid_2300;
         }
         if (gi_2200 == 1 && gi_2204 == 1) {
            gd_2140 = g_ask_2292 / g_bid_2300;
            gd_2148 = g_bid_2284 / g_ask_2308;
         }
         if (gi_2200 == -1 && gi_2204 == -1) {
            gd_2140 = g_ask_2308 / g_bid_2284;
            gd_2148 = g_bid_2300 / g_ask_2292;
         }
         gd_2132 = (gd_2140 - gd_2148) / g_point_2156;
         li_ret_0 = TRUE;
      } else {
         if (gi_180) {
            funct_051(9, "funct_081()", "Ðåæèì CheckCrossOver âûêëþ÷åí: íåäîñàòî÷íî äàííûõ ïî äîëëàðîâûì ïàðàì " + g_symbol_2168 + " è " + g_symbol_2176, "CheckCrossOver is disable: no USD pairs data " +
               g_symbol_2168 + " and " + g_symbol_2168);
         }
         gi_180 = FALSE;
         if (CrossOverMode) {
            funct_051(8, "funct_081()", "Ðåæèì CrossOverMode âûêëþ÷åí: íåäîñàòî÷íî äàííûõ ïî äîëëàðîâûì ïàðàì " + g_symbol_2168 + " è " + g_symbol_2176, "CrossOverMode is disable: no USD pairs data " +
               g_symbol_2168 + " and " + g_symbol_2168);
         }
         CrossOverMode = FALSE;
      }
   }
   if (!gi_180) {
      gd_2252 = 0.0;
      gd_2260 = 0.0;
      gd_2268 = 0.0;
      gd_2276 = 0.0;
      g_bid_2284 = 0.0;
      g_ask_2292 = 0.0;
      g_bid_2300 = 0.0;
      g_ask_2308 = 0.0;
      gd_2140 = Ask;
      gd_2148 = Bid;
      gd_2132 = MarketInfo(Symbol(), MODE_SPREAD);
   }
   return (li_ret_0);
}

double funct_082(string a_symbol_0) {
   double ld_ret_8 = MarketInfo(a_symbol_0, MODE_BID);
   if (ld_ret_8 <= 0.0) ld_ret_8 = GlobalVariableGet("z" + a_symbol_0);
   else
      if (!IsTesting() && !IsOptimization()) GlobalVariableSet("z" + a_symbol_0, ld_ret_8);
   if (ld_ret_8 <= 0.0) ld_ret_8 = 1.0;
   return (ld_ret_8);
}

int funct_083(string a_name_0, int &aia_8[]) {
   int lia_12[];
   int lia_16[];
   int l_index_24 = 0;
   int l_file_20 = FileOpen(a_name_0, FILE_BIN|FILE_READ);
   if (l_file_20 < 0) return (-1);
   FileSeek(l_file_20, 0, SEEK_SET);
   int li_36 = FileSize(l_file_20);
   ArrayResize(lia_12, li_36);
   ArrayResize(lia_16, li_36);
   while (!FileIsEnding(l_file_20)) {
      lia_12[l_index_24] = FileReadInteger(l_file_20, CHAR_VALUE);
      l_index_24++;
   }
   FileClose(l_file_20);
   int li_ret_32 = 0;
   int l_index_28 = 0;
   while (l_index_28 < li_36) {
      l_index_24 = 0;
      l_file_20 = 0;
      while (l_index_24 < 4 && l_index_28 < li_36) {
         l_file_20 += lia_12[l_index_28] << l_index_24 << 3;
         l_index_24++;
         l_index_28++;
      }
      if (l_index_24 == 4) {
         lia_16[li_ret_32] = l_file_20;
         li_ret_32++;
      }
   }
   for (l_index_28 = 0; l_index_24 < 4 && l_index_24 > 0; l_index_28 = 1) {
      l_file_20 <<= 8;
      l_index_24++;
   }
   if (l_index_28 > 0) {
      lia_16[li_ret_32] = l_file_20;
      li_ret_32++;
   }
   ArrayResize(aia_8, li_ret_32);
   for (l_index_24 = 0; l_index_24 < li_ret_32; l_index_24++) aia_8[l_index_24] = lia_16[l_index_24];
   return (li_ret_32);
}

int funct_084() {
   string l_symbol_4;
   string ls_12;
   string ls_20;
   string ls_28;
   string ls_36;
   double l_bid_44;
   bool li_ret_0 = FALSE;
   if (gs_208 == "" || gs_208 == "") {
      ls_28 = StringSubstr(gs_1964, 0, 3);
      ls_36 = StringSubstr(gs_1964, 3, 0);
   } else {
      gi_unused_2460 = 1;
      ls_28 = gs_208;
      ls_36 = gs_216;
   }
   int l_count_52 = 0;
   if (gi_180) {
      if (ls_36 != "USD" && ls_28 != "USD") {
         while (l_count_52 < 4) {
            ls_12 = "USD" + ls_28;
            l_symbol_4 = gs_2100 + ls_12 + gs_2108;
            l_bid_44 = MarketInfo(l_symbol_4, MODE_BID);
            if (l_bid_44 > 0.0) {
               gs_2184 = ls_12;
               gi_2200 = -1;
            } else {
               ls_20 = ls_28 + "USD";
               l_symbol_4 = gs_2100 + ls_20 + gs_2108;
               l_bid_44 = MarketInfo(l_symbol_4, MODE_BID);
               if (l_bid_44 > 0.0) {
                  gs_2184 = ls_20;
                  gi_2200 = 1;
               } else {
                  ls_20 = ls_28;
                  l_symbol_4 = gs_2100 + ls_20 + gs_2108;
                  l_bid_44 = MarketInfo(l_symbol_4, MODE_BID);
                  if (l_bid_44 > 0.0) {
                     gs_2184 = ls_20;
                     gi_2200 = 1;
                  }
               }
            }
            if (gs_2184 != "") {
               ls_12 = "USD" + ls_36;
               l_symbol_4 = gs_2100 + ls_12 + gs_2108;
               l_bid_44 = MarketInfo(l_symbol_4, MODE_BID);
               if (l_bid_44 > 0.0) {
                  gs_2192 = ls_12;
                  gi_2204 = -1;
               } else {
                  ls_20 = ls_36 + "USD";
                  l_symbol_4 = gs_2100 + ls_20 + gs_2108;
                  l_bid_44 = MarketInfo(l_symbol_4, MODE_BID);
                  if (l_bid_44 > 0.0) {
                     gs_2192 = ls_20;
                     gi_2204 = 1;
                  } else {
                     ls_20 = ls_36;
                     l_symbol_4 = gs_2100 + ls_20 + gs_2108;
                     l_bid_44 = MarketInfo(l_symbol_4, MODE_BID);
                     if (l_bid_44 > 0.0) {
                        gs_2192 = ls_20;
                        gi_2204 = 1;
                     }
                  }
               }
               if (gs_2192 != "") li_ret_0 = TRUE;
            }
            if (!(!li_ret_0)) break;
            l_count_52++;
            Sleep(1000);
         }
         g_symbol_2168 = gs_2100 + gs_2184 + gs_2108;
         g_symbol_2176 = gs_2100 + gs_2192 + gs_2108;
      } else {
         if (gi_180) funct_051(9, "funct_084()", "Ðåæèì CheckCrossOver âîçìîæåí òîëüêî íà êðîññ-êóðñàõ", "CheckCrossOver mode works only on cross-pairs");
         if (CrossOverMode) funct_051(8, "funct_084()", "Ðåæèì CrossOverMode âîçìîæåí òîëüêî íà êðîññ-êóðñàõ", "CrossOverMode mode works only on cross-pairs");
      }
      if (!li_ret_0) {
         if (gi_180) funct_051(9, "funct_084()", "Ðåæèì CheckCrossOver âûêëþ÷åí: Íåâîçìîæíî èíèöèàëèçèðîâàòü äîëëàðîâûå ïàðû", "CheckCrossOver is disable: Unable to init USD pairs");
         gi_180 = FALSE;
         if (CrossOverMode) funct_051(8, "funct_084()", "Ðåæèì CrossOverMode âûêëþ÷åí: Íåâîçìîæíî èíèöèàëèçèðîâàòü äîëëàðîâûå ïàðû", "CrossOverMode is disable: Unable to init USD pairs");
         CrossOverMode = FALSE;
      } else {
         funct_051(8, "funct_084()", "Èíèöèàëèçèðîâàíû äîëëàðîâûå ïàðû: " + g_symbol_2168 + " è " + g_symbol_2176, "Init USD pairs: " + g_symbol_2168 + " and " + g_symbol_2176);
         g_point_2220 = MarketInfo(g_symbol_2168, MODE_POINT);
         g_point_2228 = MarketInfo(g_symbol_2176, MODE_POINT);
         if (g_point_2220 == 0.00001 || g_point_2220 == 0.001) gi_2208 = 10;
         else gi_2208 = 1;
         if (g_point_2228 == 0.00001 || g_point_2228 == 0.001) gi_2212 = 10;
         else gi_2212 = 1;
         g_digits_2236 = MarketInfo(g_symbol_2168, MODE_DIGITS);
         g_digits_2244 = MarketInfo(g_symbol_2176, MODE_DIGITS);
      }
   }
   return (li_ret_0);
}

int funct_085() {
   string ls_0 = "";
   double l_spread_8 = MarketInfo(Symbol(), MODE_SPREAD);
   string ls_16 = "";
   string ls_24 = "";
   string ls_32 = "";
   string ls_40 = "";
   if (!gi_1848) {
      g_count_2368++;
      if (g_spread_2316 > l_spread_8) g_spread_2316 = l_spread_8;
      if (g_spread_2324 < l_spread_8) g_spread_2324 = l_spread_8;
      gd_2332 += l_spread_8;
      if (gd_2340 > gd_2132) gd_2340 = gd_2132;
      if (gd_2348 < gd_2132) gd_2348 = gd_2132;
      gd_2356 += gd_2132;
   }
   if (!IsOptimization() && !IsTesting() && gi_1080) {
      if (gda_2364[g_hour_1464][4] == 0.0) {
         gda_2364[g_hour_1464][0] = gd_2132;
         gda_2364[g_hour_1464][3] = gd_2132;
         gda_2364[g_hour_1464][1] = gd_2132;
         gda_2364[g_hour_1464][4] = 1.0;
         gda_2364[g_hour_1464 + 24][0] = l_spread_8;
         gda_2364[g_hour_1464 + 24][3] = l_spread_8;
         gda_2364[g_hour_1464 + 24][1] = l_spread_8;
         gda_2364[g_hour_1464 + 24][4] = 1.0;
      } else {
         gda_2364[g_hour_1464][4] += 1.0;
         if (gda_2364[g_hour_1464][0] > gd_2132) gda_2364[g_hour_1464][0] = gd_2132;
         if (gda_2364[g_hour_1464][3] < gd_2132) gda_2364[g_hour_1464][3] = gd_2132;
         gda_2364[g_hour_1464][1] += gd_2132;
         gda_2364[g_hour_1464 + 24][4] += 1.0;
         if (gda_2364[g_hour_1464 + 24][0] > l_spread_8) gda_2364[g_hour_1464 + 24][0] = l_spread_8;
         if (gda_2364[g_hour_1464 + 24][3] < l_spread_8) gda_2364[g_hour_1464 + 24][3] = l_spread_8;
         gda_2364[g_hour_1464 + 24][1] += l_spread_8;
      }
      gda_2364[g_hour_1464][2] = gda_2364[g_hour_1464][1] / gda_2364[g_hour_1464][4];
      gda_2364[g_hour_1464 + 24][2] = gda_2364[g_hour_1464 + 24][1] / gda_2364[g_hour_1464 + 24][4];
      ls_16 = "\n" 
      + StringConcatenate("00:", DoubleToStr(gda_2364[24][0], 0), "/", DoubleToStr(gda_2364[24][2], 1), "/", DoubleToStr(gda_2364[24][3], 0), "/", DoubleToStr(gda_2364[24][4], 0), "  ", "01:", DoubleToStr(gda_2364[25][0], 0), "/", DoubleToStr(gda_2364[25][2], 1), "/", DoubleToStr(gda_2364[25][3], 0), "/", DoubleToStr(gda_2364[25][4], 0), "  ", "02:", DoubleToStr(gda_2364[26][0], 0), "/", DoubleToStr(gda_2364[26][2], 1), "/", DoubleToStr(gda_2364[26][3], 0), "/", DoubleToStr(gda_2364[26][4], 0), "  ", "03:", DoubleToStr(gda_2364[27][0], 0), "/", DoubleToStr(gda_2364[27][2], 1), "/", DoubleToStr(gda_2364[27][3], 0), "/", DoubleToStr(gda_2364[27][4], 0), "  ", "04:", DoubleToStr(gda_2364[28][0], 0), "/", DoubleToStr(gda_2364[28][2], 1), "/", DoubleToStr(gda_2364[28][3], 0), "/", DoubleToStr(gda_2364[28][4], 0), "  ", "05:", DoubleToStr(gda_2364[29][0], 0), "/", DoubleToStr(gda_2364[29][2], 1), "/", DoubleToStr(gda_2364[29][3], 0), "/", DoubleToStr(gda_2364[29][4], 0), "  ");
      ls_16 = ls_16 + StringConcatenate("06:", DoubleToStr(gda_2364[30][0], 0), "/", DoubleToStr(gda_2364[30][2], 1), "/", DoubleToStr(gda_2364[30][3], 0), "/", DoubleToStr(gda_2364[30][4], 0), "  ", "07:", DoubleToStr(gda_2364[31][0], 0), "/", DoubleToStr(gda_2364[31][2], 1), "/", DoubleToStr(gda_2364[31][3], 0), "/", DoubleToStr(gda_2364[31][4], 0), "  ", "08:", DoubleToStr(gda_2364[32][0], 0), "/", DoubleToStr(gda_2364[32][2], 1), "/", DoubleToStr(gda_2364[32][3], 0), "/", DoubleToStr(gda_2364[32][4], 0), "  ", "09:", DoubleToStr(gda_2364[33][0], 0), "/", DoubleToStr(gda_2364[33][2], 1), "/", DoubleToStr(gda_2364[33][3], 0), "/", DoubleToStr(gda_2364[33][4], 0), "  ", "10:", DoubleToStr(gda_2364[34][0], 0), "/", DoubleToStr(gda_2364[34][2], 1), "/", DoubleToStr(gda_2364[34][3], 0), "/", DoubleToStr(gda_2364[34][4], 0), "  ", "11:", DoubleToStr(gda_2364[35][0], 0), "/", DoubleToStr(gda_2364[35][2], 1), "/", DoubleToStr(gda_2364[35][3], 0), "/", DoubleToStr(gda_2364[35][4], 0));
      ls_16 = ls_16 + StringConcatenate("\n", "12:", DoubleToStr(gda_2364[36][0], 0), "/", DoubleToStr(gda_2364[36][2], 1), "/", DoubleToStr(gda_2364[36][3], 0), "/", DoubleToStr(gda_2364[36][4], 0), "  ", "13:", DoubleToStr(gda_2364[37][0], 0), "/", DoubleToStr(gda_2364[37][2], 1), "/", DoubleToStr(gda_2364[37][3], 0), "/", DoubleToStr(gda_2364[37][4], 0), "  ", "14:", DoubleToStr(gda_2364[38][0], 0), "/", DoubleToStr(gda_2364[38][2], 1), "/", DoubleToStr(gda_2364[38][3], 0), "/", DoubleToStr(gda_2364[38][4], 0), "  ", "15:", DoubleToStr(gda_2364[39][0], 0), "/", DoubleToStr(gda_2364[39][2], 1), "/", DoubleToStr(gda_2364[39][3], 0), "/", DoubleToStr(gda_2364[39][4], 0), "  ", "16:", DoubleToStr(gda_2364[40][0], 0), "/", DoubleToStr(gda_2364[40][2], 1), "/", DoubleToStr(gda_2364[40][3], 0), "/", DoubleToStr(gda_2364[40][4], 0), "  ", "17:", DoubleToStr(gda_2364[41][0], 0), "/", DoubleToStr(gda_2364[41][2], 1), "/", DoubleToStr(gda_2364[41][3], 0), "/", DoubleToStr(gda_2364[41][4], 0), "  ", "18:", DoubleToStr(gda_2364[42][0], 0), "/", DoubleToStr(gda_2364[42][2], 1), "/", DoubleToStr(gda_2364[42][3], 0), "/", DoubleToStr(gda_2364[42][4], 0), "  ");
      ls_16 = ls_16 + StringConcatenate("19:", DoubleToStr(gda_2364[43][0], 0), "/", DoubleToStr(gda_2364[43][2], 1), "/", DoubleToStr(gda_2364[43][3], 0), "/", DoubleToStr(gda_2364[43][4], 0), "  ", "20:", DoubleToStr(gda_2364[44][0], 0), "/", DoubleToStr(gda_2364[44][2], 1), "/", DoubleToStr(gda_2364[44][3], 0), "/", DoubleToStr(gda_2364[44][4], 0), "  ", "21:", DoubleToStr(gda_2364[45][0], 0), "/", DoubleToStr(gda_2364[45][2], 1), "/", DoubleToStr(gda_2364[45][3], 0), "/", DoubleToStr(gda_2364[45][4], 0), "  ", "22:", DoubleToStr(gda_2364[46][0], 0), "/", DoubleToStr(gda_2364[46][2], 1), "/", DoubleToStr(gda_2364[46][3], 0), "/", DoubleToStr(gda_2364[46][4], 0), "  ", "23:", DoubleToStr(gda_2364[47][0], 0), "/", DoubleToStr(gda_2364[47][2], 1), "/", DoubleToStr(gda_2364[47][3], 0), "/", DoubleToStr(gda_2364[47][4], 0));
      ls_24 = "\n" 
      + StringConcatenate("00:", DoubleToStr(gda_2364[0][0], 0), "/", DoubleToStr(gda_2364[0][2], 1), "/", DoubleToStr(gda_2364[0][3], 0), "/", DoubleToStr(gda_2364[0][4], 0), "  ", "01:", DoubleToStr(gda_2364[1][0], 0), "/", DoubleToStr(gda_2364[1][2], 1), "/", DoubleToStr(gda_2364[1][3], 0), "/", DoubleToStr(gda_2364[1][4], 0), "  ", "02:", DoubleToStr(gda_2364[2][0], 0), "/", DoubleToStr(gda_2364[2][2], 1), "/", DoubleToStr(gda_2364[2][3], 0), "/", DoubleToStr(gda_2364[2][4], 0), "  ", "03:", DoubleToStr(gda_2364[3][0], 0), "/", DoubleToStr(gda_2364[3][2], 1), "/", DoubleToStr(gda_2364[3][3], 0), "/", DoubleToStr(gda_2364[3][4], 0), "  ", "04:", DoubleToStr(gda_2364[4][0], 0), "/", DoubleToStr(gda_2364[4][2], 1), "/", DoubleToStr(gda_2364[4][3], 0), "/", DoubleToStr(gda_2364[4][4], 0), "  ", "05:", DoubleToStr(gda_2364[5][0], 0), "/", DoubleToStr(gda_2364[5][2], 1), "/", DoubleToStr(gda_2364[5][3], 0), "/", DoubleToStr(gda_2364[5][4], 0), "  ");
      ls_24 = ls_24 + StringConcatenate("06:", DoubleToStr(gda_2364[6][0], 0), "/", DoubleToStr(gda_2364[6][2], 1), "/", DoubleToStr(gda_2364[6][3], 0), "/", DoubleToStr(gda_2364[6][4], 0), "  ", "07:", DoubleToStr(gda_2364[7][0], 0), "/", DoubleToStr(gda_2364[7][2], 1), "/", DoubleToStr(gda_2364[7][3], 0), "/", DoubleToStr(gda_2364[7][4], 0), "  ", "08:", DoubleToStr(gda_2364[8][0], 0), "/", DoubleToStr(gda_2364[8][2], 1), "/", DoubleToStr(gda_2364[8][3], 0), "/", DoubleToStr(gda_2364[8][4], 0), "  ", "09:", DoubleToStr(gda_2364[9][0], 0), "/", DoubleToStr(gda_2364[9][2], 1), "/", DoubleToStr(gda_2364[9][3], 0), "/", DoubleToStr(gda_2364[9][4], 0), "  ", "10:", DoubleToStr(gda_2364[10][0], 0), "/", DoubleToStr(gda_2364[10][2], 1), "/", DoubleToStr(gda_2364[10][3], 0), "/", DoubleToStr(gda_2364[10][4], 0), "  ", "11:", DoubleToStr(gda_2364[11][0], 0), "/", DoubleToStr(gda_2364[11][2], 1), "/", DoubleToStr(gda_2364[11][3], 0), "/", DoubleToStr(gda_2364[11][4], 0));
      ls_24 = ls_24 + StringConcatenate("\n", "12:", DoubleToStr(gda_2364[12][0], 0), "/", DoubleToStr(gda_2364[12][2], 1), "/", DoubleToStr(gda_2364[12][3], 0), "/", DoubleToStr(gda_2364[12][4], 0), "  ", "13:", DoubleToStr(gda_2364[13][0], 0), "/", DoubleToStr(gda_2364[13][2], 1), "/", DoubleToStr(gda_2364[13][3], 0), "/", DoubleToStr(gda_2364[13][4], 0), "  ", "14:", DoubleToStr(gda_2364[14][0], 0), "/", DoubleToStr(gda_2364[14][2], 1), "/", DoubleToStr(gda_2364[14][3], 0), "/", DoubleToStr(gda_2364[14][4], 0), "  ", "15:", DoubleToStr(gda_2364[15][0], 0), "/", DoubleToStr(gda_2364[15][2], 1), "/", DoubleToStr(gda_2364[15][3], 0), "/", DoubleToStr(gda_2364[15][4], 0), "  ", "16:", DoubleToStr(gda_2364[16][0], 0), "/", DoubleToStr(gda_2364[16][2], 1), "/", DoubleToStr(gda_2364[16][3], 0), "/", DoubleToStr(gda_2364[16][4], 0), "  ", "17:", DoubleToStr(gda_2364[17][0], 0), "/", DoubleToStr(gda_2364[17][2], 1), "/", DoubleToStr(gda_2364[17][3], 0), "/", DoubleToStr(gda_2364[17][4], 0), "  ", "18:", DoubleToStr(gda_2364[18][0], 0), "/", DoubleToStr(gda_2364[18][2], 1), "/", DoubleToStr(gda_2364[18][3], 0), "/", DoubleToStr(gda_2364[18][4], 0), "  ");
      ls_24 = ls_24 + StringConcatenate("19:", DoubleToStr(gda_2364[19][0], 0), "/", DoubleToStr(gda_2364[19][2], 1), "/", DoubleToStr(gda_2364[19][3], 0), "/", DoubleToStr(gda_2364[19][4], 0), "  ", "20:", DoubleToStr(gda_2364[20][0], 0), "/", DoubleToStr(gda_2364[20][2], 1), "/", DoubleToStr(gda_2364[20][3], 0), "/", DoubleToStr(gda_2364[20][4], 0), "  ", "21:", DoubleToStr(gda_2364[21][0], 0), "/", DoubleToStr(gda_2364[21][2], 1), "/", DoubleToStr(gda_2364[21][3], 0), "/", DoubleToStr(gda_2364[21][4], 0), "  ", "22:", DoubleToStr(gda_2364[22][0], 0), "/", DoubleToStr(gda_2364[22][2], 1), "/", DoubleToStr(gda_2364[22][3], 0), "/", DoubleToStr(gda_2364[22][4], 0), "  ", "23:", DoubleToStr(gda_2364[23][0], 0), "/", DoubleToStr(gda_2364[23][2], 1), "/", DoubleToStr(gda_2364[23][3], 0), "/", DoubleToStr(gda_2364[23][4], 0));
   }
   string ls_48 = "";
   if (gd_1704 > 0.0) ls_48 = " +commission " + DoubleToStr(gd_1704, 1);
   ls_32 = gs_1964 + " spread " + DoubleToStr(MarketInfo(Symbol(), MODE_SPREAD), 1) + "  (min=" + DoubleToStr(g_spread_2316, 1) + "   avrg=" + DoubleToStr(gd_2332 / g_count_2368, 1) + "   max=" + DoubleToStr(g_spread_2324, 1) + ")" + ls_48 + ls_16;
   if (gi_180) {
      if (gd_2132 - MarketInfo(Symbol(), MODE_SPREAD) > 0.0) ls_0 = "   +";
      if (gd_2132 - MarketInfo(Symbol(), MODE_SPREAD) == 0.0) ls_0 = "     ";
      if (gd_2132 - MarketInfo(Symbol(), MODE_SPREAD) < 0.0) ls_0 = "   ";
      ls_48 = "";
      if (gd_1704 > 0.0) ls_48 = " +commission " + DoubleToStr(2.0 * gd_1704, 1);
      ls_40 = "\n" 
      + StringSubstr(gs_1964, 0, 3) + "-USD-" + StringSubstr(gs_1964, 3, 3) + " spread " + DoubleToStr(gd_2132, 1) + ls_0 + DoubleToStr(gd_2132 - MarketInfo(Symbol(), MODE_SPREAD), 1) + "  (min=" + DoubleToStr(gd_2340, 1) + "   avrg=" + DoubleToStr(gd_2356 / g_count_2368, 1) + "   max=" + DoubleToStr(gd_2348, 1) + ")" + ls_48 + ls_24;
   }
   funct_051(0, "", ls_32 + ls_40, ls_32 + ls_40);
   return (1);
}

int funct_086(int ai_0, int ai_4) {
   double l_price_8;
   double l_pips_16;
   string ls_24;
   double l_ord_stoploss_32;
   double l_ord_takeprofit_40;
   if (!CrossOverMode) {
      if (ai_4 == 0) ls_24 = "Buy";
      if (ai_4 == 1) ls_24 = "Sell";
      l_ord_stoploss_32 = OrderStopLoss();
      l_ord_takeprofit_40 = OrderTakeProfit();
      if (ai_4 == 0) {
         l_price_8 = 1.0 * gi_272;
         l_pips_16 = funct_043(ai_0, 0);
         if (InvisibleStopLoss) l_price_8 = 0.0;
         if ((l_price_8 != 0.0 && OrderStopLoss() == 0.0) || l_pips_16 != 0.0 && !gi_960) {
            if (l_price_8 != 0.0) {
               if (l_price_8 < gi_1548) l_price_8 = gi_1548;
               l_price_8 = NormalizeDouble(OrderOpenPrice() - l_price_8 * g_point_2156, gi_2164);
            }
            if (l_pips_16 != 0.0) l_pips_16 = NormalizeDouble(OrderOpenPrice() + l_pips_16 * g_point_2156, gi_2164);
            if (IsTradeAllowed()) {
               if (!OrderModify(OrderTicket(), OrderOpenPrice(), l_price_8, l_pips_16, 0, Red)) funct_051(8, "isBuyOrder()", "Íåâîçìîæíî óñòàíîâèòü SL èëè TP: " + funct_052(GetLastError()), "Unable to set SL or TP: " + funct_052(GetLastError()));
               else {
                  funct_051(9, "funct_013()", "Îðäåð " + ls_24 + gsa_2392[ai_0][4] + " îäèôèöèðîâàí: StopLoss " + DoubleToStr(l_ord_stoploss_32, gi_2164) + "->" + DoubleToStr(l_price_8, gi_2164) +
                     ", TakeProfit " + DoubleToStr(l_ord_takeprofit_40, gi_2164) + "->" + DoubleToStr(l_pips_16, gi_2164), "Order " + ls_24 + gsa_2392[ai_0][4] + " modified: StopLoss " + DoubleToStr(l_ord_stoploss_32, gi_2164) + "->" + DoubleToStr(l_price_8, gi_2164) + ", TakeProfit " + DoubleToStr(l_ord_takeprofit_40, gi_2164) + "->" + DoubleToStr(l_pips_16, gi_2164));
               }
            } else {
               if (!gi_1112) funct_051(8, "isBuyOrder()", "Íåâîçìîæíî óñòàíîâèòü SL èëè TP: òîðãîâûé ïîòîê çàíÿò", "Unable to set SL or TP: Trade context busy");
               else funct_051(9, "isBuyOrder()", "Íåâîçìîæíî óñòàíîâèòü SL èëè TP: òîðãîâûé ïîòîê çàíÿò", "Unable to set SL or TP: Trade context busy");
            }
         }
      }
      if (ai_4 == 1) {
         l_price_8 = 1.0 * gi_272;
         l_pips_16 = funct_043(ai_0, 1);
         if (InvisibleStopLoss) l_price_8 = 0.0;
         if ((l_price_8 != 0.0 && OrderStopLoss() == 0.0) || l_pips_16 != 0.0 && !gi_960) {
            if (l_price_8 != 0.0) {
               if (l_price_8 < gi_1548) l_price_8 = gi_1548;
               l_price_8 = NormalizeDouble(OrderOpenPrice() + l_price_8 * g_point_2156, gi_2164);
            }
            if (l_pips_16 != 0.0) l_pips_16 = NormalizeDouble(OrderOpenPrice() - l_pips_16 * g_point_2156, gi_2164);
            if (IsTradeAllowed()) {
               if (!OrderModify(OrderTicket(), OrderOpenPrice(), l_price_8, l_pips_16, 0, Red)) funct_051(8, "isBuyOrder()", "Íåâîçìîæíî óñòàíîâèòü SL èëè TP: " + funct_052(GetLastError()), "Unable to set SL or TP: " + funct_052(GetLastError()));
               else {
                  funct_051(9, "funct_013()", "Îðäåð " + ls_24 + gsa_2392[ai_0][4] + " ìîäèôèöèðîâàí: StopLoss " + DoubleToStr(l_ord_stoploss_32, gi_2164) + "->" + DoubleToStr(l_price_8, gi_2164) +
                     ", TakeProfit " + DoubleToStr(l_ord_takeprofit_40, gi_2164) + "->" + DoubleToStr(l_pips_16, gi_2164), "Order " + ls_24 + gsa_2392[ai_0][4] + " modified: StopLoss " + DoubleToStr(l_ord_stoploss_32, gi_2164) + "->" + DoubleToStr(l_price_8, gi_2164) + ", TakeProfit " + DoubleToStr(l_ord_takeprofit_40, gi_2164) + "->" + DoubleToStr(l_pips_16, gi_2164));
               }
            } else {
               if (!gi_1112) funct_051(8, "isSellOrder()", "Íåâîçìîæíî óñòàíîâèòü SL èëè TP: òîðãîâûé ïîòîê çàíÿò", "Unable to set SL or TP: Trade context busy");
               else funct_051(9, "isSellOrder()", "Íåâîçìîæíî óñòàíîâèòü SL èëè TP: òîðãîâûé ïîòîê çàíÿò", "Unable to set SL or TP: Trade context busy");
            }
         }
      }
   }
   return (1);
}

int funct_087() {
   int li_0;
   if (DayOfWeek() != g_day_of_week_1440) {
      g_day_of_week_1440 = DayOfWeek();
      li_0 = gi_1516;
      gi_1516 = funct_046();
      if (li_0 != gi_1516) {
         funct_050();
         if (gi_1516 >= 0) funct_051(8, "funct_046()", "Íîâîå çíà÷åíèå êîððåêöèè âðåìåíè: Correction+" + gi_1516, "New value of time correcton: Correction+" + gi_1516);
         if (gi_1516 < 0) funct_051(8, "funct_046()", "Íîâîå çíà÷åíèå êîððåêöèè âðåìåíè: Correction" + gi_1516, "New value of time correcton: Correction" + gi_1516);
      }
   }
   gi_1884 = TimeCurrent() + 7200 - 3600 * (TimeZone + gi_1516);
   g_hour_1464 = TimeHour(gi_1884);
   g_day_of_week_1468 = TimeDayOfWeek(gi_1884);
   gi_1472 = TimeDay(gi_1884);
   g_month_1476 = TimeMonth(gi_1884);
   g_year_1480 = TimeYear(gi_1884);
   return (gi_1884);
}

int funct_088() {
   string ls_24;
   int l_file_32;
   string l_name_36;
   datetime lt_unused_44;
   bool li_48;
   bool li_52;
   bool li_ret_0 = FALSE;
   string ls_16 = gs_2464;
   gi_1384 = MathAbs(StrToInteger(StringSubstr(ls_16, StringFind(ls_16, CharToStr(46), 0) - 1, 1)) - StrToInteger(gsa_1992[20][1]));
   if (!gi_180 && gi_2444) return (li_ret_0);
   double ld_4 = NormalizeDouble(gd_2148, Digits);
   if (!gi_2444) {
      gi_2444 = TRUE;
      l_name_36 = "cr" + gs_1964 + Period() + " Time: ";
      for (int l_index_12 = 0; l_index_12 < Bars; l_index_12++) ObjectDelete(l_name_36 + TimeToStr(Time[l_index_12]));
      l_name_36 = "crBid";
      ObjectDelete(l_name_36);
      l_name_36 = "crAsk";
      ObjectDelete(l_name_36);
      if (!gi_180) return (li_ret_0);
      gi_2432 = WindowBarsPerChart();
      if (gi_2432 < 50) gi_2432 = 50;
      if (!gi_1200) gi_2432 = 50;
      ArrayResize(gda_2396, gi_2432);
      ArrayResize(gda_2400, gi_2432);
      ArrayResize(gda_2404, gi_2432);
      ArrayResize(gda_2408, gi_2432);
      ArrayResize(gda_2412, gi_2432);
      ArrayResize(gia_2420, gi_2432);
      ArrayResize(gia_2416, gi_2432);
      ArrayInitialize(gda_2396, 0.0);
      ArrayInitialize(gda_2400, 0.0);
      ArrayInitialize(gda_2404, 0.0);
      ArrayInitialize(gda_2408, 0.0);
      ArrayInitialize(gda_2412, 0.0);
      lt_unused_44 = Time[0];
      for (l_index_12 = 0; l_index_12 < gi_2432; l_index_12++) {
         gia_2416[l_index_12] = 0;
         gia_2420[l_index_12] = Time[l_index_12];
      }
      gda_2404[0] = ld_4;
      li_48 = TRUE;
      l_file_32 = FileOpen(ls_16, FILE_CSV|FILE_WRITE|FILE_READ, ';');
      if (l_file_32 < 1) {
         Print("Íåâîçìîæíî îòêðûòü ôàéë " + ls_16 + ", îøèáêà: ", GetLastError());
         li_48 = FALSE;
      }
      for (l_index_12 = gi_2432 - 1; l_index_12 > 0; l_index_12--) {
         li_52 = FALSE;
         if (li_48) {
            FileSeek(l_file_32, 0, SEEK_SET);
            while (!FileIsEnding(l_file_32)) {
               ls_24 = FileReadString(l_file_32);
               if (StrToTime(ls_24) == gia_2420[l_index_12] && !gi_1384) {
                  gda_2404[l_index_12] = StrToDouble(FileReadString(l_file_32));
                  gda_2408[l_index_12] = StrToDouble(FileReadString(l_file_32));
                  gda_2400[l_index_12] = StrToDouble(FileReadString(l_file_32));
                  gda_2396[l_index_12] = StrToDouble(FileReadString(l_file_32));
                  gda_2412[l_index_12] = StrToDouble(FileReadString(l_file_32));
                  gia_2416[l_index_12] = StrToInteger(FileReadString(l_file_32));
                  li_52 = TRUE;
                  break;
               }
               FileReadString(l_file_32);
               FileReadString(l_file_32);
               FileReadString(l_file_32);
               FileReadString(l_file_32);
               FileReadString(l_file_32);
               FileReadString(l_file_32);
            }
         }
         if (!li_52) {
            gda_2404[l_index_12] = Open[l_index_12];
            gda_2408[l_index_12] = Close[l_index_12];
            gda_2400[l_index_12] = Low[l_index_12];
            gda_2396[l_index_12] = High[l_index_12];
            gda_2412[l_index_12] = Volume[l_index_12];
            gia_2416[l_index_12] = 65280;
         }
         if (gia_2416[l_index_12] != 65280) funct_089(l_index_12, gia_2416[l_index_12]);
      }
      if (li_48) FileClose(l_file_32);
      if (Time[0] == StrToTime(Year() + ".01.01 0:00") + 60.0 * GlobalVariableGet("z" + gs_1964 + "crTime0")) {
         gda_2408[0] = GlobalVariableGet("z" + gs_1964 + "crClose0");
         gda_2396[0] = GlobalVariableGet("z" + gs_1964 + "crHigh0");
         gda_2400[0] = GlobalVariableGet("z" + gs_1964 + "crLow0");
         gda_2412[0] = GlobalVariableGet("z" + gs_1964 + "crVolume0");
         gia_2416[0] = GlobalVariableGet("z" + gs_1964 + "crColor0");
      }
   } else {
      if (WindowBarsPerChart() > gi_2436) {
      }
      if (Time[0] != gia_2420[0]) {
         funct_092(0);
         for (l_index_12 = gi_2432 - 1; l_index_12 > 0; l_index_12--) {
            gda_2396[l_index_12] = gda_2396[l_index_12 - 1];
            gda_2400[l_index_12] = gda_2400[l_index_12 - 1];
            gda_2404[l_index_12] = gda_2404[l_index_12 - 1];
            gda_2408[l_index_12] = gda_2408[l_index_12 - 1];
            gda_2412[l_index_12] = gda_2412[l_index_12 - 1];
            gia_2420[l_index_12] = gia_2420[l_index_12 - 1];
         }
         gia_2420[0] = Time[0];
         gda_2396[0] = ld_4;
         gda_2400[0] = ld_4;
         gda_2404[0] = ld_4;
         gda_2408[0] = ld_4;
         gda_2412[0] = 0.0;
      }
      gda_2408[0] = ld_4;
      if (gda_2396[0] < ld_4) gda_2396[0] = ld_4;
      if (gda_2400[0] > ld_4 || gda_2400[0] == 0.0) gda_2400[0] = ld_4;
      gda_2412[0] = MathAbs((gda_2408[0] - gda_2404[0]) / g_point_2156);
      gia_2416[0] = 65535;
      funct_091();
      funct_089(0, gia_2416[0]);
      GlobalVariableSet("z" + gs_1964 + "crClose0", gda_2408[0]);
      GlobalVariableSet("z" + gs_1964 + "crHigh0", gda_2396[0]);
      GlobalVariableSet("z" + gs_1964 + "crLow0", gda_2400[0]);
      GlobalVariableSet("z" + gs_1964 + "crVolume0", gda_2412[0]);
      GlobalVariableSet("z" + gs_1964 + "crColor0", gia_2416[0]);
      GlobalVariableSet("z" + gs_1964 + "crTime0", MathFloor((Time[0] - StrToTime(Year() + ".01.01 0:00")) / 60));
   }
   return (li_ret_0);
}

int funct_089(int ai_0, int a_color_4) {
   string l_name_8;
   if (gi_180) {
      l_name_8 = "cr" + gs_1964 + Period() + " Time: " + TimeToStr(gia_2420[ai_0]);
      ObjectDelete(l_name_8);
      ObjectCreate(l_name_8, OBJ_TREND, 0, gia_2420[ai_0], gda_2400[ai_0], gia_2420[ai_0], gda_2396[ai_0]);
      ObjectSet(l_name_8, OBJPROP_STYLE, STYLE_SOLID);
      ObjectSet(l_name_8, OBJPROP_WIDTH, 1);
      ObjectSet(l_name_8, OBJPROP_RAY, FALSE);
      ObjectSet(l_name_8, OBJPROP_COLOR, a_color_4);
   }
   return (1);
}

int funct_090(int ai_0, int ai_4) {
   string l_name_8;
   if (!IsOptimization() && !IsTesting()) {
      if (!gi_2456) {
         gi_2456 = TRUE;
         l_name_8 = "cross_buy";
         ObjectDelete(l_name_8);
         l_name_8 = "cross_sell";
         ObjectDelete(l_name_8);
         return (0);
      }
      if (gia_2384[ai_0][1] == 0) l_name_8 = "cross_buy";
      if (gia_2384[ai_0][1] == 1) l_name_8 = "cross_sell";
      l_name_8 = l_name_8 + " " + gsa_2392[ai_0][1];
      ObjectDelete(l_name_8);
      if (ai_4 && gda_2380[ai_0][1] > 0.0) {
         ObjectCreate(l_name_8, OBJ_HLINE, 0, 0, NormalizeDouble(gda_2380[ai_0][1], Digits));
         ObjectSet(l_name_8, OBJPROP_STYLE, STYLE_DASHDOT);
         ObjectSet(l_name_8, OBJPROP_WIDTH, 1);
         ObjectSet(l_name_8, OBJPROP_COLOR, Lime);
      }
   }
   return (1);
}

int funct_091() {
   string l_name_0;
   if (gi_180) {
      l_name_0 = "crBid";
      ObjectDelete(l_name_0);
      ObjectCreate(l_name_0, OBJ_HLINE, 0, 0, NormalizeDouble(gd_2148, Digits));
      ObjectSet(l_name_0, OBJPROP_STYLE, STYLE_SOLID);
      ObjectSet(l_name_0, OBJPROP_WIDTH, 1);
      ObjectSet(l_name_0, OBJPROP_COLOR, Yellow);
      l_name_0 = "crAsk";
      ObjectDelete(l_name_0);
      ObjectCreate(l_name_0, OBJ_HLINE, 0, 0, NormalizeDouble(gd_2140, Digits));
      ObjectSet(l_name_0, OBJPROP_STYLE, STYLE_SOLID);
      ObjectSet(l_name_0, OBJPROP_WIDTH, 1);
      ObjectSet(l_name_0, OBJPROP_COLOR, DeepPink);
   }
   return (1);
}

int funct_092(int ai_0) {
   string ls_20;
   bool li_ret_4 = FALSE;
   bool li_8 = FALSE;
   string l_name_12 = gs_2464;
   int l_file_28 = FileOpen(l_name_12, FILE_CSV|FILE_WRITE|FILE_READ, ';');
   if (l_file_28 < 1) Print("Íåâîçìîæíî îòêðûòü ôàéë " + l_name_12 + ", îøèáêà: ", GetLastError());
   else {
      FileSeek(l_file_28, 0, SEEK_SET);
      while (!FileIsEnding(l_file_28)) {
         gi_2440 = FileTell(l_file_28);
         ls_20 = FileReadString(l_file_28);
         if (StrToTime(ls_20) == gia_2420[ai_0]) break;
         FileReadString(l_file_28);
         FileReadString(l_file_28);
         FileReadString(l_file_28);
         FileReadString(l_file_28);
         FileReadString(l_file_28);
         FileReadString(l_file_28);
      }
      if (!li_8) {
         gi_2440 = FileTell(l_file_28);
         FileSeek(l_file_28, 0, SEEK_END);
         FileWrite(l_file_28, TimeToStr(gia_2420[ai_0]), DoubleToStr(gda_2404[ai_0], Digits), DoubleToStr(gda_2408[ai_0], Digits), DoubleToStr(gda_2400[ai_0], Digits), DoubleToStr(gda_2396[ai_0], Digits), DoubleToStr(gda_2412[ai_0], 0), gia_2416[ai_0]);
      }
      FileClose(l_file_28);
   }
   return (li_ret_4);
}

int funct_093(int ai_0, int ai_unused_4, int ai_8, int ai_12) {
   double lda_20[10];
   double ld_24;
   double ld_32;
   double ld_40;
   double ld_48;
   int l_count_56;
   int li_64;
   int li_68;
   int li_16 = 0;
   if (ai_0 < 1) ai_0 = 13;
   if (Bars <= ai_0 || g_bars_2492 == Bars) return (0);
   li_16 = g_bars_2492;
   g_bars_2492 = Bars;
   if (li_16 < 0) return (0);
   if (li_16 > 0) li_16--;
   ArrayResize(lda_20, Bars);
   ArrayCopy(lda_20, gda_2500, 1, 0, WHOLE_ARRAY);
   ArrayResize(gda_2500, Bars);
   ArrayCopy(gda_2500, lda_20, 0, 0, WHOLE_ARRAY);
   if (ai_8 == 0) {
      ld_24 = 0.0;
      li_64 = Bars - li_16 - 1;
      if (li_64 < ai_0) li_64 = ai_0;
      l_count_56 = 1;
      while (l_count_56 < ai_0) {
         ld_24 += funct_094(li_64, ai_12);
         l_count_56++;
         li_64--;
      }
      while (li_64 >= 0) {
         ld_24 += funct_094(li_64, ai_12);
         gda_2500[li_64] = ld_24 / ai_0;
         ld_24 -= funct_094(li_64 + ai_0 - 1, ai_12);
         li_64--;
      }
      if (li_16 < 1) for (l_count_56 = 1; l_count_56 < ai_0; l_count_56++) gda_2500[Bars - l_count_56] = 0;
   }
   if (ai_8 == 1) {
      ld_32 = 2.0 / (ai_0 + 1);
      li_64 = Bars - 2;
      if (li_16 > 2) li_64 = Bars - li_16 - 1;
      while (li_64 >= 0) {
         if (li_64 == Bars - 2) gda_2500[li_64 + 1] = funct_094(li_64 + 1, ai_12);
         gda_2500[li_64] = funct_094(li_64, ai_12) * ld_32 + (gda_2500[li_64 + 1]) * (1 - ld_32);
         li_64--;
      }
   }
   if (ai_8 == 2) {
      ld_24 = 0.0;
      li_64 = Bars - li_16 + 1;
      li_64 = Bars - ai_0;
      if (li_64 > Bars - li_16) li_64 = Bars - li_16;
      while (li_64 >= 0) {
         if (li_64 == Bars - ai_0) {
            l_count_56 = 0;
            for (int li_60 = li_64; l_count_56 < ai_0; li_60++) {
               ld_24 += funct_094(li_60, ai_12);
               gda_2500[li_60] = 0;
               l_count_56++;
            }
         } else ld_24 = (gda_2500[li_64 + 1]) * (ai_0 - 1) + funct_094(li_64, ai_12);
         gda_2500[li_64] = ld_24 / ai_0;
         li_64--;
      }
   }
   if (ai_8 >= 3) {
      ld_24 = 0.0;
      ld_40 = 0.0;
      li_68 = 0;
      li_64 = Bars - li_16 - 1;
      if (li_64 < ai_0) li_64 = ai_0;
      l_count_56 = 1;
      while (l_count_56 <= ai_0) {
         ld_48 = funct_094(li_64, ai_12);
         ld_24 += ld_48 * l_count_56;
         ld_40 += ld_48;
         li_68 += l_count_56;
         l_count_56++;
         li_64--;
      }
      li_64++;
      l_count_56 = li_64 + ai_0;
      while (li_64 >= 0) {
         gda_2500[li_64] = ld_24 / li_68;
         if (li_64 == 0) break;
         li_64--;
         l_count_56--;
         ld_48 = funct_094(li_64, ai_12);
         ld_24 = ld_24 - ld_40 + ld_48 * ai_0;
         ld_40 -= funct_094(l_count_56, ai_12);
         ld_40 += ld_48;
      }
      if (li_16 < 1) for (l_count_56 = 1; l_count_56 < ai_0; l_count_56++) gda_2500[Bars - l_count_56] = 0;
   }
   return (1);
}

double funct_094(int ai_0, int ai_4) {
   double ld_ret_8 = 0.0;
   if (CrossOverMode) {
      if (ai_4 == 0) ld_ret_8 = gda_2408[ai_0];
      if (ai_4 == 1) ld_ret_8 = gda_2404[ai_0];
      if (ai_4 == 2) ld_ret_8 = gda_2396[ai_0];
      if (ai_4 == 3) ld_ret_8 = gda_2400[ai_0];
      if (ai_4 == 4) ld_ret_8 = (gda_2396[ai_0] + gda_2400[ai_0]) / 2.0;
      if (ai_4 == 5) ld_ret_8 = (gda_2396[ai_0] + gda_2400[ai_0] + gda_2408[ai_0]) / 3.0;
      if (ai_4 == 6) ld_ret_8 = (gda_2396[ai_0] + gda_2400[ai_0] + gda_2408[ai_0] + gda_2408[ai_0]) / 4.0;
   } else {
      if (ai_4 == 0) ld_ret_8 = Close[ai_0];
      if (ai_4 == 1) ld_ret_8 = Open[ai_0];
      if (ai_4 == 2) ld_ret_8 = High[ai_0];
      if (ai_4 == 3) ld_ret_8 = Low[ai_0];
      if (ai_4 == 4) ld_ret_8 = (High[ai_0] + Low[ai_0]) / 2.0;
      if (ai_4 == 5) ld_ret_8 = (High[ai_0] + Low[ai_0] + Close[ai_0]) / 3.0;
      if (ai_4 == 6) ld_ret_8 = (High[ai_0] + Low[ai_0] + Close[ai_0] + Close[ai_0]) / 4.0;
   }
   return (ld_ret_8);
}

bool funct_096(bool ai_0) {
   bool li_ret_4 = FALSE;
   if (ai_0) {
      for (int l_index_8 = 0; l_index_8 < 7; l_index_8++)
         if (gia_2388[l_index_8][2] == Time[0]) li_ret_4 = TRUE;
   }
   return (li_ret_4);
}

int funct_097() {
   switch (UninitializeReason()) {
   case 0:
      funct_051(9, "funct_097()", "Ñêðèïò ñàìîñòîÿòåëüíî çàâåðøèë ñâîþ ðàáîòó", "Ñêðèïò ñàìîñòîÿòåëüíî çàâåðøèë ñâîþ ðàáîòó");
      break;
   case REASON_CHARTCLOSE:
      funct_051(9, "funct_097()", "Ñèìâîë èëè ïåðèîä ãðàôèêà áûë èçìåíåí", "Ñèìâîë èëè ïåðèîä ãðàôèêà áûë èçìåíåí");
      break;
   case REASON_REMOVE:
      funct_051(9, "funct_097()", "Ïðîãðàììà óäàëåíà ñ ãðàôèêà", "Ïðîãðàììà óäàëåíà ñ ãðàôèêà");
      break;
   case REASON_RECOMPILE:
      funct_051(9, "funct_097()", "Ïðîãðàììà ïåðåêîìïèëèðîâàíà", "Ïðîãðàììà ïåðåêîìïèëèðîâàíà");
      break;
   case REASON_CHARTCHANGE:
      funct_051(9, "funct_097()", "Ñèìâîë èëè ïåðèîä ãðàôèêà áûë èçìåíåí", "Ñèìâîë èëè ïåðèîä ãðàôèêà áûë èçìåíåí");
      break;
   case REASON_PARAMETERS:
      funct_051(9, "funct_097()", "Âõîäíûå ïàðàìåòðû áûëè èçìåíåíû ïîëüçîâàòåëåì", "Âõîäíûå ïàðàìåòðû áûëè èçìåíåíû ïîëüçîâàòåëåì");
      break;
   case REASON_ACCOUNT:
      funct_051(9, "funct_097()", "Àêòèâèðîâàí äðóãîé ñ÷åò", "Àêòèâèðîâàí äðóãîé ñ÷åò");
   }
   return (1);
}

int funct_098() {
   bool li_ret_0 = FALSE;
   for (int l_index_4 = 0; l_index_4 < 7; l_index_4++) {
      if (gia_2384[l_index_4][0] == 95) {
         funct_033("OSbuffer", l_index_4);
         li_ret_0 = TRUE;
         funct_051(9, "funct_098()", "Î÷èùåí áóôåð " + l_index_4, "Buffer cleared " + l_index_4);
      }
   }
   return (li_ret_0);
}

int funct_099() {
   int li_0;
   if (gi_1104) {
      li_0 = GetTickCount() - gi_1460;
      if (gi_1488 > li_0) gi_1488 = li_0;
      if (gi_1492 < li_0) gi_1492 = li_0;
      g_count_1496++;
      gd_1556 += 1.0 * li_0;
      if (gi_1048 == 0) Comment("SysSpeed:  min=" + gi_1488 + "  average=" + DoubleToStr(gd_1556 / (1.0 * g_count_1496), 0) + "  max=" + gi_1492 + "   current=" + li_0);
   }
   return (1);
}

bool funct_100(int ai_0) {
   bool li_ret_4 = FALSE;
   if (ai_0 == 0 || !IsConnected()) g_datetime_2424 = TimeCurrent();
   else {
      if (ai_0 > 0) {
         if (TimeCurrent() - g_datetime_2424 >= ai_0 / 1000) {
            funct_051(9, "funct_100()", "funct_100(" + ai_0 + ")", "funct_100(" + ai_0 + ")");
            li_ret_4 = TRUE;
         }
      }
   }
   return (li_ret_4);
}

bool funct_101(string as_0) {
   bool li_ret_8 = FALSE;
   Print(as_0);
   if (funct_003(gs_1232, gi_1248)) {
      if (funct_034("GET", gs_1240 + as_0, g_name_2028, 1, "", 0)) li_ret_8 = TRUE;
      funct_102();
   }
   return (li_ret_8);
}

void funct_102() {
   if (gi_2528 > 0) InternetCloseHandle(gi_2528);
   gi_2528 = -1;
   if (gi_2532 > 0) InternetCloseHandle(gi_2532);
   gi_2532 = -1;
}

int funct_103(string as_0, int aia_8[]) {
   string l_name_12 = "~stf" + TimeLocal() + ".tmp";
   int l_file_20 = FileOpen(l_name_12, FILE_BIN|FILE_WRITE);
   FileWriteString(l_file_20, as_0, StringLen(as_0));
   FileClose(l_file_20);
   l_file_20 = funct_083(l_name_12, aia_8);
   FileDelete(l_name_12);
   return (l_file_20);
}

string funct_104(string as_0, string as_8, string as_16) {
   int li_36;
   string ls_ret_24 = "";
   int li_32 = 0;
   while (li_36 >= 0) {
      li_36 = StringFind(as_0, as_8, li_32);
      if (li_36 >= 0) {
         ls_ret_24 = ls_ret_24 + StringSubstr(as_0, li_32, li_36 - li_32) + as_16;
         li_36 += StringLen(as_8);
         li_32 = li_36;
      }
   }
   ls_ret_24 = ls_ret_24 + StringSubstr(as_0, li_32, StringLen(as_0) - li_32);
   return (ls_ret_24);
}
